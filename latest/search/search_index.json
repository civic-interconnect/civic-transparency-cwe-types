{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Transparency CWE Types","text":"<p>Immutable, typed result objects for CWE, Standards, and Schema workflows. This library provides a small set of frozen dataclasses and helpers for loading data, validation, relationship analysis, and machine-friendly summaries, with strict typing and zero runtime dependencies.</p>"},{"location":"#quick-install","title":"Quick Install","text":"<pre><code>pip install civic-transparency-cwe-types\n</code></pre> <p>Requirements: Python 3.12+ (no additional runtime dependencies, includes typing support)</p>"},{"location":"#design","title":"Design","text":"<ul> <li>Immutable by default - all operations return new objects; originals never modified.</li> <li>Composition-first - domain results build on small base collections/counters/messages.</li> <li>Strictly typed - <code>py.typed</code> included; designed for strict type checkers.</li> <li>Leaf-module imports - no <code>__init__</code> re-exports; uses explicit dependency imports.</li> </ul> <p>Import from specific modules, e.g.:</p> <ul> <li><code>ci.transparency.cwe.types.cwe.results</code></li> <li><code>ci.transparency.cwe.types.standards.results</code></li> <li><code>ci.transparency.cwe.types.cwe.schema.results</code></li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>from ci.transparency.cwe.types.cwe.results import CweLoadingResult, add_cwe\n\nresult = CweLoadingResult()\nresult = add_cwe(result, \"CWE-79\", {\n    \"id\": \"CWE-79\",\n    \"name\": \"Cross-site Scripting\",\n    \"category\": \"injection\"\n})\n\nprint(result.cwe_count)  # 1\n</code></pre>"},{"location":"#whats-included","title":"What's Included","text":"Domain Purpose Key Results CWE Load, validate, analyze CWE data <code>CweLoadingResult</code>, <code>CweValidationResult</code>, <code>CweRelationshipResult</code> Standards Framework loading &amp; CWE mappings <code>StandardsLoadingResult</code>, <code>StandardsMappingResult</code> Schema Generic schema operations <code>SchemaLoadingResult</code>, <code>SchemaValidationResult</code> CWE Schema Domain-specific CWE schema validation <code>CweSchemaLoadingResult</code>, <code>CweSchemaValidationResult</code> Base Shared building blocks <code>MessageCollection</code>, <code>LoadingCounts</code>, <code>ValidationCounts</code>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Usage Guide - practical examples &amp; patterns</li> <li>API Reference - auto-generated from docstrings (see sidebar)</li> <li>CHANGELOG</li> <li>CONTRIBUTING</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT \u00a9 Civic Interconnect</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide shows common patterns for using the Civic Transparency CWE Types library.</p>"},{"location":"usage/#installation","title":"Installation","text":"<pre><code>pip install civic-transparency-cwe-types\n</code></pre>"},{"location":"usage/#core-concepts","title":"Core Concepts","text":""},{"location":"usage/#immutability-composition","title":"Immutability &amp; Composition","text":"<p>Operations return new dataclass instances; originals are never modified.</p> <pre><code>from pathlib import Path\nfrom ci.transparency.cwe.types.cwe.results import CweLoadingResult, add_cwe\n\nresult = CweLoadingResult()\nresult2 = add_cwe(\n    result,\n    \"CWE-79\",\n    {\"id\": \"CWE-79\", \"name\": \"Cross-site Scripting\", \"category\": \"injection\", \"relationships\": []},\n    file_path=Path(\"cwe-79.yaml\"),\n)\n\nassert result is not result2\nprint(result.cwe_count)   # 0\nprint(result2.cwe_count)  # 1\n</code></pre>"},{"location":"usage/#explicit-types-strong-guarantees","title":"Explicit Types, Strong Guarantees","text":"<p>Helper functions preserve concrete result types:</p> <pre><code>from ci.transparency.cwe.types.cwe.results import CweLoadingResult, add_cwe\n\ncwe_result = CweLoadingResult()\nupdated = add_cwe(cwe_result, \"CWE-89\", {\"id\": \"CWE-89\", \"name\": \"SQL Injection\"})\nprint(type(updated) is CweLoadingResult)  # True\n</code></pre>"},{"location":"usage/#base-building-blocks","title":"Base Building Blocks","text":"<p>The domain results compose a few base structures:</p> <ul> <li><code>LoadingCounts</code> / <code>ValidationCounts</code> - tracked on results</li> <li><code>MessageCollection</code> - <code>errors</code>, <code>warnings</code>, <code>infos</code> with convenience properties</li> </ul> <p>Typically operate through domain helpers, but can also access them directly:</p> <pre><code>from dataclasses import replace\nfrom ci.transparency.cwe.types.base.counts import LoadingCounts\nfrom ci.transparency.cwe.types.base.messages import MessageCollection\n\nloading = LoadingCounts()\nloading = replace(loading, loaded_count=loading.loaded_count + 1)\n\nmessages = MessageCollection()\nmessages = replace(messages, errors=messages.errors + [\"Something went wrong\"])\nprint(messages.has_errors)  # True\n</code></pre>"},{"location":"usage/#cwe-domain","title":"CWE Domain","text":""},{"location":"usage/#load-cwe-data","title":"Load CWE data","text":"<pre><code>from pathlib import Path\nfrom ci.transparency.cwe.types.cwe.results import (\n    CweLoadingResult, add_cwe, track_invalid_file, get_cwe_loading_summary\n)\n\nresult = CweLoadingResult()\n\n# Add one CWE\ncwe79 = {\n    \"id\": \"CWE-79\",\n    \"name\": \"Cross-site Scripting\",\n    \"category\": \"injection\",\n    \"relationships\": [{\"cwe_id\": \"CWE-80\", \"type\": \"child\"}],\n}\nresult = add_cwe(result, \"CWE-79\", cwe79, file_path=Path(\"cwe-79.yaml\"))\n\n# Track a failed file\nresult = track_invalid_file(result, Path(\"broken.yaml\"), \"Malformed YAML\")\n\nsummary = get_cwe_loading_summary(result)\nprint(summary[\"cwes_loaded\"], summary[\"failed_files\"])\n</code></pre>"},{"location":"usage/#validate-cwe-records","title":"Validate CWE records","text":"<pre><code>from ci.transparency.cwe.types.cwe.results import (\n    CweValidationResult, validate_cwe, batch_validate_cwes, get_cwe_validation_summary\n)\n\nvalidation = CweValidationResult()\n\nvalidation = validate_cwe(\n    validation,\n    \"CWE-79\",\n    {\"id\": \"CWE-79\", \"name\": \"XSS\", \"description\": \"Reflected XSS\"}\n)\n\n# Batch\ncwe_dict = {\n    \"CWE-79\": {\"id\": \"CWE-79\", \"name\": \"XSS\"},\n    \"CWE-89\": {\"id\": \"CWE-89\", \"name\": \"SQL Injection\"},\n}\nvalidation = batch_validate_cwes(validation, cwe_dict)\n\nprint(validation.validated_count)\nprint(validation.get_passed_cwes())\nprint(validation.get_failed_cwes())\n\nsummary = get_cwe_validation_summary(validation)\nprint(summary[\"success_rate_percent\"])\n</code></pre>"},{"location":"usage/#analyze-cwe-relationships","title":"Analyze CWE relationships","text":"<pre><code>from ci.transparency.cwe.types.cwe.results import (\n    CweRelationshipResult, analyze_relationships, get_relationship_summary\n)\n\nrels = CweRelationshipResult()\n\ncwe_dict = {\n    \"CWE-79\": {\"id\": \"CWE-79\", \"relationships\": [{\"cwe_id\": \"CWE-80\", \"type\": \"child\"}]},\n    \"CWE-80\": {\"id\": \"CWE-80\", \"relationships\": [{\"cwe_id\": \"CWE-79\", \"type\": \"parent\"}]},\n}\n\nrels = analyze_relationships(rels, cwe_dict)\n\nprint(rels.references.total_references_count)   # total relationships\nprint(rels.circular_dependency_count)           # cycles detected\nprint(rels.references.orphaned_item_count)      # CWEs with no edges\n\nsummary = get_relationship_summary(rels)\nprint(summary[\"relationship_types\"])\n</code></pre>"},{"location":"usage/#standards-domain","title":"Standards Domain","text":""},{"location":"usage/#load-standards","title":"Load standards","text":"<pre><code>from ci.transparency.cwe.types.standards.results import (\n    StandardsLoadingResult, add_standard, get_standards_loading_summary\n)\n\nstandards = StandardsLoadingResult()\n\nnist = {\n    \"id\": \"NIST-SP-800-53\",\n    \"name\": \"Security Controls\",\n    \"framework\": \"NIST\",\n    \"version\": \"Rev 5\",\n    \"controls\": [],\n}\nstandards = add_standard(standards, \"NIST-SP-800-53\", nist)\n\nprint(standards.standards_count)\nprint(standards.frameworks.framework_count)\n\nsummary = get_standards_loading_summary(standards)\nprint(summary[\"frameworks\"])\n</code></pre>"},{"location":"usage/#analyze-standards-mappings","title":"Analyze standards mappings","text":"<pre><code>from ci.transparency.cwe.types.standards.results import (\n    StandardsMappingResult, analyze_mappings, get_mapping_summary\n)\n\nmappings = StandardsMappingResult()\n\nstandards_dict = {\n    \"NIST-SP-800-53\": {\n        \"id\": \"NIST-SP-800-53\",\n        \"controls\": [\n            {\"id\": \"AC-1\", \"mappings\": [{\"target_id\": \"CWE-79\", \"mapping_type\": \"cwe\"}]},\n        ],\n    }\n}\n\nmappings = analyze_mappings(mappings, standards_dict)\nprint(mappings.total_mappings_count)\nprint(mappings.references.invalid_reference_count)\n\nsummary = get_mapping_summary(mappings)\nprint(summary[\"mapping_types\"])\n</code></pre>"},{"location":"usage/#cwe-schema-domain-specific-schema-results","title":"CWE Schema (Domain-specific schema results)","text":""},{"location":"usage/#load-schemas-set-metadata","title":"Load schemas &amp; set metadata","text":"<pre><code>from pathlib import Path\nfrom ci.transparency.cwe.types.cwe.schema.results import (\n    CweSchemaLoadingResult,\n    add_cwe_schema,\n    set_schema_metadata,\n    get_cwe_schema_loading_summary,\n)\n\nschemas = CweSchemaLoadingResult()\nschemas = set_schema_metadata(schemas, schema_name=\"cwe\", schema_version=\"1.0\")\n\nschema_item = {\n    \"schema_name\": \"cwe\",\n    \"schema_version\": \"1.0\",\n    \"schema_content\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"string\"}}},\n    \"source_path\": \"cwe.schema.json\",\n}\nschemas = add_cwe_schema(schemas, \"cwe-1.0\", schema_item, file_path=Path(\"cwe.schema.json\"))\n\nsummary = get_cwe_schema_loading_summary(schemas)\nprint(summary[\"schema_name\"], summary[\"file_types\"])\n</code></pre>"},{"location":"usage/#build-validation-results","title":"Build validation results","text":"<pre><code>from ci.transparency.cwe.types.cwe.schema.results import (\n    create_successful_validation,\n    create_failed_validation,\n    add_validation_error,\n    get_cwe_schema_validation_summary,\n)\n\nok = create_successful_validation(\n    schema_name=\"cwe\",\n    schema_version=\"1.0\",\n    cwe_id=\"CWE-79\",\n    field_path=\"id\",\n    info_message=\"ID matches pattern\",\n)\n\nbad = create_failed_validation(\n    schema_name=\"cwe\",\n    schema_version=\"1.0\",\n    cwe_id=\"CWE-79\",\n    field_path=\"id\",\n    error_messages=[\"Missing required: id\"],\n)\n\nbad = add_validation_error(bad, \"Unexpected field: foo\")\n\nprint(ok.is_successful)   # True\nprint(bad.is_successful)  # False\n\nprint(get_cwe_schema_validation_summary(bad)[\"errors\"])\n</code></pre>"},{"location":"usage/#tips","title":"Tips","text":"<ul> <li>Import from leaf modules:</li> <li><code>ci.transparency.cwe.types.cwe.results</code></li> <li><code>ci.transparency.cwe.types.standards.results</code></li> <li><code>ci.transparency.cwe.types.cwe.schema.results</code></li> <li><code>ci.transparency.cwe.types.base.messages</code> / <code>base.counts</code> / <code>base.collections</code></li> <li>All result types are frozen dataclasses; update via helper functions (which use <code>dataclasses.replace</code>).</li> <li>Summaries (<code>get_*_summary</code>) provide ready-to-serialize dictionaries for reporting/logging.</li> </ul> <p>See the API Reference for module-by-module documentation.</p>"},{"location":"api/base/","title":"Base Types","text":"<p>Base building blocks that other result types build on. These provide core functionality for tracking errors, warnings, loading operations, and validation results.</p>"},{"location":"api/base/#base-collections","title":"Base Collections","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections","title":"<code>ci.transparency.cwe.types.base.collections</code>","text":"<p>Collections for tracking files, categories, and duplicates in the civic transparency CWE types module.</p> <p>This module provides dataclasses for: - FileCollection: tracking processed, failed, and skipped files. - CategoryCollection: tracking category statistics. - DuplicateCollection: tracking duplicate IDs and their associated file paths.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.__all__","title":"<code>__all__ = ['FrameworkStatsDict', 'RelationshipMapDict', 'RelationshipDepthsDict', 'RelationshipTypesDict', 'CategoryCollection', 'DuplicateCollection', 'FileCollection', 'FrameworkCollection', 'ReferenceCollection']</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FrameworkStatsDict","title":"<code>FrameworkStatsDict = dict[str, int]</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.collections.RelationshipDepthsDict","title":"<code>RelationshipDepthsDict = dict[str, int]</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.collections.RelationshipMapDict","title":"<code>RelationshipMapDict = dict[str, list[str]]</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.collections.RelationshipTypesDict","title":"<code>RelationshipTypesDict = dict[str, int]</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.collections.CategoryCollection","title":"<code>CategoryCollection</code>  <code>dataclass</code>","text":"<p>Tracks statistics for categories.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.CategoryCollection--attributes","title":"Attributes","text":"<p>category_stats : dict[str, int]     Dictionary mapping category names to their counts.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.CategoryCollection.category_count","title":"<code>category_count</code>  <code>property</code>","text":"<p>Return the number of categories tracked in the collection.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.CategoryCollection.most_common_category","title":"<code>most_common_category</code>  <code>property</code>","text":"<p>Return the most common category based on the highest count.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.CategoryCollection.most_common_category--returns","title":"Returns","text":"<p>str or None     The category with the highest count, or None if there are no categories.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.DuplicateCollection","title":"<code>DuplicateCollection</code>  <code>dataclass</code>","text":"<p>Tracks duplicate IDs and their associated file paths.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.DuplicateCollection--attributes","title":"Attributes","text":"<p>duplicate_ids : dict[str, list[Path]]     Dictionary mapping duplicate IDs to lists of file paths where duplicates were found.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.DuplicateCollection.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Return the number of duplicate IDs tracked in the collection.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.DuplicateCollection.duplicate_count--returns","title":"Returns","text":"<p>int     The number of duplicate IDs.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.DuplicateCollection.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>Return True if there are any duplicate IDs, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FileCollection","title":"<code>FileCollection</code>  <code>dataclass</code>","text":"<p>Tracks processed, failed, and skipped files.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FileCollection--attributes","title":"Attributes","text":"<p>processed_files : list[Path]     list of files that have been processed. failed_files : list[Path]     list of files that failed to process. skipped_files : list[Path]     list of files that were skipped.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FileCollection.failed_file_count","title":"<code>failed_file_count</code>  <code>property</code>","text":"<p>Return the number of failed files.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FileCollection.processed_file_count","title":"<code>processed_file_count</code>  <code>property</code>","text":"<p>Return the number of processed files.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FileCollection.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Return the number of skipped files.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FileCollection.total_files","title":"<code>total_files</code>  <code>property</code>","text":"<p>Return the total number of files (processed, failed, skipped).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FrameworkCollection","title":"<code>FrameworkCollection</code>  <code>dataclass</code>","text":"<p>Tracks statistics for frameworks.</p> <p>Could be reused for any domain that categorizes by framework.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FrameworkCollection.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Return the number of frameworks tracked.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FrameworkCollection.most_common_framework","title":"<code>most_common_framework</code>  <code>property</code>","text":"<p>Return the most common framework based on highest count.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.FrameworkCollection.add_framework","title":"<code>add_framework(framework)</code>","text":"<p>Add or increment a framework count.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection","title":"<code>ReferenceCollection</code>  <code>dataclass</code>","text":"<p>Tracks references between items and their validity.</p> <p>Could be reused for any domain that has inter-item references.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.has_invalid_references","title":"<code>has_invalid_references</code>  <code>property</code>","text":"<p>True if there are invalid references.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.has_orphaned_items","title":"<code>has_orphaned_items</code>  <code>property</code>","text":"<p>True if there are orphaned items.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.invalid_reference_count","title":"<code>invalid_reference_count</code>  <code>property</code>","text":"<p>Number of invalid references.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.orphaned_item_count","title":"<code>orphaned_item_count</code>  <code>property</code>","text":"<p>Number of items with no references.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.total_references_count","title":"<code>total_references_count</code>  <code>property</code>","text":"<p>Total number of references tracked.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.add_invalid_reference","title":"<code>add_invalid_reference(reference_desc)</code>","text":"<p>Add an invalid reference.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.add_orphaned_item","title":"<code>add_orphaned_item(item_id)</code>","text":"<p>Add an orphaned item.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.collections.ReferenceCollection.add_reference","title":"<code>add_reference(from_item, to_item)</code>","text":"<p>Add a reference between items.</p>"},{"location":"api/base/#base-counts","title":"Base Counts","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts","title":"<code>ci.transparency.cwe.types.base.counts</code>","text":"<p>Core counting components for transparency CWE types.</p> <p>This module provides dataclasses for tracking counts of loaded, validated, and processed items: - LoadingCounts: Tracks successfully loaded and failed items. - ValidationCounts: Tracks passed and failed validations. - ProcessingCounts: Tracks processed and skipped items.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.__all__","title":"<code>__all__ = ['LoadingCounts', 'ProcessingCounts', 'ValidationCounts']</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.counts.LoadingCounts","title":"<code>LoadingCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of successfully loaded and failed items.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.LoadingCounts--attributes","title":"Attributes","text":"<p>loaded_count : int     Number of items successfully loaded. failed_count : int     Number of items that failed to load.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.LoadingCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.LoadingCounts.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Return the rate of successful loads as a float between 0 and 1.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.LoadingCounts.total_attempted","title":"<code>total_attempted</code>  <code>property</code>","text":"<p>Return the total number of attempted loads (successful + failed).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ProcessingCounts","title":"<code>ProcessingCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of processed and skipped items.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ProcessingCounts--attributes","title":"Attributes","text":"<p>processed_count : int     Number of items that have been processed. skipped_count : int     Number of items that have been skipped.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ProcessingCounts.total_encountered","title":"<code>total_encountered</code>  <code>property</code>","text":"<p>Return the total number of encountered items (processed + skipped).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ValidationCounts","title":"<code>ValidationCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of passed and failed validations.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ValidationCounts--attributes","title":"Attributes","text":"<p>passed_count : int     Number of items that passed validation. failed_count : int     Number of items that failed validation.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ValidationCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ValidationCounts.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Return the rate of passed validations as a float between 0 and 1.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.counts.ValidationCounts.total_validated","title":"<code>total_validated</code>  <code>property</code>","text":"<p>Return the total number of validated items (passed + failed).</p>"},{"location":"api/base/#base-errors","title":"Base Errors","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors","title":"<code>ci.transparency.cwe.types.base.errors</code>","text":"<p>Enhanced base error types for transparency operations.</p> <p>Provides comprehensive base exception classes that capture common patterns across all transparency domains (CWE, schema validation, standards processing).</p> Design principles <ul> <li>Flexible: supports optional context fields without requiring all errors to use them</li> <li>Contextual: captures progress, operations, resources, files, validation, and abort context</li> <li>Consistent: maintains uniform formatting with \" | \" separator</li> <li>Slotted: minimal memory overhead with slots</li> <li>Hierarchical: specific base classes for common operation types</li> </ul> Core error hierarchy <ul> <li>BaseTransparencyError: Root exception with flexible context support</li> <li>OperationError: Operations with progress tracking (batch, phase processing)</li> <li>ResourceError: Resource-constrained operations (timeouts, limits)</li> <li>ValidationError: Validation operations with rule/schema context</li> <li>FileError: File-based operations with path context</li> </ul> <p>All errors use consistent formatting: \"message | Context1: value | Context2: value\" Context is only included when relevant fields are populated.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.__all__","title":"<code>__all__ = ['BaseTransparencyError', 'OperationError', 'ResourceError', 'ValidationError', 'FileError', 'LoadingError', 'ParsingError', 'ConfigurationError', 'TransparencyTimeoutError', 'AbortedError', 'NetworkError']</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.errors.AbortedError","title":"<code>AbortedError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Operation was aborted before completion.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseTransparencyError","title":"<code>BaseTransparencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Enhanced base exception for all transparency operations.</p> <p>Provides flexible context tracking for common error patterns without requiring all errors to specify every possible context field.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseTransparencyError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Get contextual information parts for error formatting.</p> <p>Returns context in order of importance: 1. Operation identification (phase, operation, stage) 2. Progress information (processed/total counts) 3. Resource information (timeouts, limits) 4. File/item context 5. Validation context 6. Error flow context (abort reason, error code)</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of context strings (e.g., [\"Phase: validation\", \"Progress: 150/500\"])</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.ConfigurationError","title":"<code>ConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Configuration is invalid or incomplete.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.FileError","title":"<code>FileError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for file-based operations.</p> <p>Convenient base for file loading, parsing, and other file-related errors.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.LoadingError","title":"<code>LoadingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be loaded.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.NetworkError","title":"<code>NetworkError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Network operation failed.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.OperationError","title":"<code>OperationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for operations with progress tracking.</p> <p>Convenient base for batch processing, phase validation, and other operations that process multiple items with progress tracking.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.ParsingError","title":"<code>ParsingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be parsed.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.ResourceError","title":"<code>ResourceError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for resource-constrained operations.</p> <p>Convenient base for timeout, memory, disk space, and other resource-related errors.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.TransparencyTimeoutError","title":"<code>TransparencyTimeoutError</code>","text":"<p>               Bases: <code>ResourceError</code></p> <p>Operation timed out.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for validation operations.</p> <p>Convenient base for schema validation, rule checking, and other validation-related errors.</p>"},{"location":"api/base/#base-messages","title":"Base Messages","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages","title":"<code>ci.transparency.cwe.types.base.messages</code>","text":"<p>Define message collection classes for error, warning, and informational messages.</p> <p>It provides: - MessageCollection: a dataclass for collecting and counting error, warning, and info messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.__all__","title":"<code>__all__ = ['MessageCollection']</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.messages.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/base/#result-helpers","title":"Result Helpers","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers","title":"<code>ci.transparency.cwe.types.base.result_helpers</code>","text":"<p>Helpers for adding message methods to result classes.</p> <p>This module provides a decorator to add error, warning, and info message methods to result classes.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.T","title":"<code>T = TypeVar('T', bound=HasMessages)</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.__all__","title":"<code>__all__ = ['with_message_methods', 'HasMessages']</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.HasMessages","title":"<code>HasMessages</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for result types that have a messages field.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers._add_message_to_result","title":"<code>_add_message_to_result(result, level, message)</code>","text":"<p>Add a message to any result with MessageCollection.</p> <p>Internal helper that modifies the messages collection immutably.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.result_helpers.with_message_methods","title":"<code>with_message_methods(cls)</code>","text":"<p>Add message methods to result classes.</p> <p>Decorator that adds add_error(), add_warning(), and add_info() methods to any result class with a MessageCollection field.</p>"},{"location":"api/base/#schema","title":"Schema","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.schema","title":"<code>ci.transparency.cwe.types.base.schema</code>","text":"<p>Defines schema metadata and statistics tracking for civic transparency.</p> <p>This module provides: - FileTypeStatsDict: type alias for file type statistics. - SchemaCollection: dataclass for schema metadata and file type statistics.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.schema.__all__","title":"<code>__all__ = ['FileTypeStatsDict', 'SchemaCollection']</code>  <code>module-attribute</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.schema.FileTypeStatsDict","title":"<code>FileTypeStatsDict = dict[str, int]</code>","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.schema.SchemaCollection","title":"<code>SchemaCollection</code>  <code>dataclass</code>","text":"<p>Tracks schema metadata and statistics.</p> <p>Could be reused for any domain that works with schemas.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.schema.SchemaCollection.file_type_count","title":"<code>file_type_count</code>  <code>property</code>","text":"<p>Number of different file types processed.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.schema.SchemaCollection.has_schema_metadata","title":"<code>has_schema_metadata</code>  <code>property</code>","text":"<p>True if schema name and version are available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.schema.SchemaCollection.add_file_type","title":"<code>add_file_type(file_type)</code>","text":"<p>Add or increment a file type count.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.schema.SchemaCollection.with_metadata","title":"<code>with_metadata(schema_name, schema_version)</code>","text":"<p>Return new collection with updated schema metadata.</p>"},{"location":"api/cwe/","title":"CWE Domain","text":"<p>Types and operations for CWE (Common Weakness Enumeration) analysis, validation, and relationship tracking.</p>"},{"location":"api/cwe/#cwe-results","title":"CWE Results","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results","title":"<code>ci.transparency.cwe.types.cwe.results</code>","text":"<p>CWE domain result types and operations using composition.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.__all__","title":"<code>__all__ = ['CweLoadingResult', 'CweValidationResult', 'CweRelationshipResult', 'CweRelationshipDict', 'CweDataDict', 'CweItemDict', 'ValidationResultsDict', 'ValidationDetailsDict', 'SeverityCountsDict', 'ErrorSummaryDict', 'LoadingSummaryDict', 'ValidationSummaryDict', 'RelationshipStatisticsDict', 'RelationshipSummaryDict', 'add_cwe', 'track_invalid_file', 'track_skipped_cwe_file', 'validate_cwe', 'validate_cwe_field', 'batch_validate_cwes', 'analyze_relationships', 'get_cwe_loading_summary', 'get_cwe_validation_summary', 'get_relationship_summary', 'add_message', 'increment_loading_counts', 'increment_validation_counts', 'add_processed_file', 'add_failed_file', 'add_skipped_file', 'add_category', 'add_duplicate']</code>  <code>module-attribute</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweDataDict","title":"<code>CweDataDict = dict[str, CweItemDict]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipLike","title":"<code>CweRelationshipLike = CweRelationshipDict | str</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ErrorSummaryDict","title":"<code>ErrorSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.LoadingSummaryDict","title":"<code>LoadingSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.RelationshipDepthsDict","title":"<code>RelationshipDepthsDict = dict[str, int]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.RelationshipMapDict","title":"<code>RelationshipMapDict = dict[str, list[str]]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.RelationshipStatisticsDict","title":"<code>RelationshipStatisticsDict = dict[str, Any]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.RelationshipSummaryDict","title":"<code>RelationshipSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.RelationshipType","title":"<code>RelationshipType = Literal['related', 'parent', 'child', 'variant', 'requires', 'causes', 'consequence', 'unknown']</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.RelationshipTypesDict","title":"<code>RelationshipTypesDict = dict[str, int]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.SeverityCountsDict","title":"<code>SeverityCountsDict = dict[str, int]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationDetailsDict","title":"<code>ValidationDetailsDict = dict[str, list[str]]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationResultsDict","title":"<code>ValidationResultsDict = dict[str, bool]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationSummaryDict","title":"<code>ValidationSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CategoryCollection","title":"<code>CategoryCollection</code>  <code>dataclass</code>","text":"<p>Tracks statistics for categories.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CategoryCollection--attributes","title":"Attributes","text":"<p>category_stats : dict[str, int]     Dictionary mapping category names to their counts.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CategoryCollection.category_count","title":"<code>category_count</code>  <code>property</code>","text":"<p>Return the number of categories tracked in the collection.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CategoryCollection.most_common_category","title":"<code>most_common_category</code>  <code>property</code>","text":"<p>Return the most common category based on the highest count.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CategoryCollection.most_common_category--returns","title":"Returns","text":"<p>str or None     The category with the highest count, or None if there are no categories.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweItemDict","title":"<code>CweItemDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Minimal shape of a single CWE record (extend as needed).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult","title":"<code>CweLoadingResult</code>  <code>dataclass</code>","text":"<p>Represents the result of loading CWE data using composition.</p> <p>Composes base building blocks for clean separation of concerns.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult--attributes","title":"Attributes","text":"<p>cwes : CweDataDict     Dictionary of loaded CWE data. loading : LoadingCounts     Statistics about loading success and failures. messages : MessageCollection     Collection of error, warning, and info messages. files : FileCollection     Tracking of processed, failed, and skipped files. categories : CategoryCollection     Statistics for categories encountered. duplicates : DuplicateCollection     Tracking of duplicate IDs and their associated files.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.cwe_count","title":"<code>cwe_count</code>  <code>property</code>","text":"<p>Return the number of CWEs loaded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if loading is successful and there are no error messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.loaded_cwe_ids","title":"<code>loaded_cwe_ids</code>  <code>property</code>","text":"<p>All loaded CWE IDs (sorted for stable output).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.get_cwe","title":"<code>get_cwe(cwe_id)</code>","text":"<p>Get CWE data by ID.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.get_cwes_by_category","title":"<code>get_cwes_by_category(category)</code>","text":"<p>Get CWEs filtered by category.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.has_cwe","title":"<code>has_cwe(cwe_id)</code>","text":"<p>Check if a CWE ID was loaded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.search_cwes","title":"<code>search_cwes(search_term)</code>","text":"<p>Search CWEs by name or description.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipDict","title":"<code>CweRelationshipDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for CWE relationship data.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult","title":"<code>CweRelationshipResult</code>  <code>dataclass</code>","text":"<p>Result from CWE relationship validation and analysis using composition.</p> <p>Tracks CWE relationship consistency, circular dependency detection, and relationship graph analysis.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult--attributes","title":"Attributes","text":"<p>validation : ValidationCounts     Statistics about relationship validation. messages : MessageCollection     Collection of error, warning, and info messages. references : ReferenceCollection     Tracking of references between CWEs. relationship_depths : RelationshipDepthsDict     Depth of each CWE in the relationship graph. relationship_types : RelationshipTypesDict     Count of relationship types. circular_dependencies : list[str]     CWEs involved in circular dependencies.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.circular_dependency_count","title":"<code>circular_dependency_count</code>  <code>property</code>","text":"<p>Number of circular dependencies detected.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.has_circular_dependencies","title":"<code>has_circular_dependencies</code>  <code>property</code>","text":"<p>True if circular dependencies were detected.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if relationship analysis is successful.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.max_relationship_depth","title":"<code>max_relationship_depth</code>  <code>property</code>","text":"<p>Maximum relationship depth in the graph.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.find_relationship_path","title":"<code>find_relationship_path(from_cwe, to_cwe)</code>","text":"<p>Find shortest path between two CWEs.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.get_related_cwes","title":"<code>get_related_cwes(cwe_id, max_depth=1)</code>","text":"<p>Get all CWEs related to a given CWE up to max_depth.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.get_relationship_depth","title":"<code>get_relationship_depth(cwe_id)</code>","text":"<p>Get relationship depth for a specific CWE.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.get_relationship_statistics","title":"<code>get_relationship_statistics()</code>","text":"<p>Get comprehensive relationship statistics.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.get_relationships","title":"<code>get_relationships(cwe_id)</code>","text":"<p>Get all relationships for a specific CWE.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult","title":"<code>CweValidationResult</code>  <code>dataclass</code>","text":"<p>Represents the result of validating CWE data using composition.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult--attributes","title":"Attributes","text":"<p>validation_results : ValidationResultsDict     Dictionary of validation results for each CWE item. validation : ValidationCounts     Statistics about validation success and failures. messages : MessageCollection     Collection of error, warning, and info messages. field_errors : list[str]     Field-level validation errors. validation_details : ValidationDetailsDict     Detailed validation errors per CWE. severity_counts : SeverityCountsDict     Count of issues by severity level.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.field_error_count","title":"<code>field_error_count</code>  <code>property</code>","text":"<p>Number of field-level validation errors.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.has_field_errors","title":"<code>has_field_errors</code>  <code>property</code>","text":"<p>True if any field-level validation errors occurred.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if validation is successful and there are no error messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.validated_count","title":"<code>validated_count</code>  <code>property</code>","text":"<p>Return the number of items that have been validated.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.validation_rate","title":"<code>validation_rate</code>  <code>property</code>","text":"<p>Validation success rate (0.0 to 1.0).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_error_summary","title":"<code>get_error_summary()</code>","text":"<p>Get comprehensive error summary.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_failed_cwes","title":"<code>get_failed_cwes()</code>","text":"<p>Get list of CWE IDs that failed validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_most_common_errors","title":"<code>get_most_common_errors(limit=5)</code>","text":"<p>Get most common validation errors.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_passed_cwes","title":"<code>get_passed_cwes()</code>","text":"<p>Get list of CWE IDs that passed validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_validation_errors","title":"<code>get_validation_errors(cwe_id)</code>","text":"<p>Get validation errors for a specific CWE.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.DuplicateCollection","title":"<code>DuplicateCollection</code>  <code>dataclass</code>","text":"<p>Tracks duplicate IDs and their associated file paths.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.DuplicateCollection--attributes","title":"Attributes","text":"<p>duplicate_ids : dict[str, list[Path]]     Dictionary mapping duplicate IDs to lists of file paths where duplicates were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.DuplicateCollection.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Return the number of duplicate IDs tracked in the collection.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.DuplicateCollection.duplicate_count--returns","title":"Returns","text":"<p>int     The number of duplicate IDs.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.DuplicateCollection.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>Return True if there are any duplicate IDs, otherwise False.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.FileCollection","title":"<code>FileCollection</code>  <code>dataclass</code>","text":"<p>Tracks processed, failed, and skipped files.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.FileCollection--attributes","title":"Attributes","text":"<p>processed_files : list[Path]     list of files that have been processed. failed_files : list[Path]     list of files that failed to process. skipped_files : list[Path]     list of files that were skipped.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.FileCollection.failed_file_count","title":"<code>failed_file_count</code>  <code>property</code>","text":"<p>Return the number of failed files.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.FileCollection.processed_file_count","title":"<code>processed_file_count</code>  <code>property</code>","text":"<p>Return the number of processed files.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.FileCollection.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Return the number of skipped files.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.FileCollection.total_files","title":"<code>total_files</code>  <code>property</code>","text":"<p>Return the total number of files (processed, failed, skipped).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.LoadingCounts","title":"<code>LoadingCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of successfully loaded and failed items.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.LoadingCounts--attributes","title":"Attributes","text":"<p>loaded_count : int     Number of items successfully loaded. failed_count : int     Number of items that failed to load.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.LoadingCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.LoadingCounts.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Return the rate of successful loads as a float between 0 and 1.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.LoadingCounts.total_attempted","title":"<code>total_attempted</code>  <code>property</code>","text":"<p>Return the total number of attempted loads (successful + failed).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection","title":"<code>ReferenceCollection</code>  <code>dataclass</code>","text":"<p>Tracks references between items and their validity.</p> <p>Could be reused for any domain that has inter-item references.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.has_invalid_references","title":"<code>has_invalid_references</code>  <code>property</code>","text":"<p>True if there are invalid references.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.has_orphaned_items","title":"<code>has_orphaned_items</code>  <code>property</code>","text":"<p>True if there are orphaned items.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.invalid_reference_count","title":"<code>invalid_reference_count</code>  <code>property</code>","text":"<p>Number of invalid references.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.orphaned_item_count","title":"<code>orphaned_item_count</code>  <code>property</code>","text":"<p>Number of items with no references.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.total_references_count","title":"<code>total_references_count</code>  <code>property</code>","text":"<p>Total number of references tracked.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.add_invalid_reference","title":"<code>add_invalid_reference(reference_desc)</code>","text":"<p>Add an invalid reference.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.add_orphaned_item","title":"<code>add_orphaned_item(item_id)</code>","text":"<p>Add an orphaned item.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ReferenceCollection.add_reference","title":"<code>add_reference(from_item, to_item)</code>","text":"<p>Add a reference between items.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationCounts","title":"<code>ValidationCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of passed and failed validations.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationCounts--attributes","title":"Attributes","text":"<p>passed_count : int     Number of items that passed validation. failed_count : int     Number of items that failed validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationCounts.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Return the rate of passed validations as a float between 0 and 1.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.ValidationCounts.total_validated","title":"<code>total_validated</code>  <code>property</code>","text":"<p>Return the total number of validated items (passed + failed).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._build_relationship_map","title":"<code>_build_relationship_map(cwe_dict)</code>","text":"<p>Build relationship map and identify invalid references and orphaned items.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._calculate_relationship_depth","title":"<code>_calculate_relationship_depth(relationship_map, cwe_id, visited)</code>","text":"<p>Calculate relationship depth recursively with cycle detection.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._detect_circular_dependencies","title":"<code>_detect_circular_dependencies(relationship_map)</code>","text":"<p>Detect circular dependencies in relationship map using DFS.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._find_shortest_path","title":"<code>_find_shortest_path(relationship_map, start, end)</code>","text":"<p>Find shortest path between two CWEs using BFS.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._is_valid_category","title":"<code>_is_valid_category(category)</code>","text":"<p>Validate CWE category.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._is_valid_cwe_id","title":"<code>_is_valid_cwe_id(cwe_id)</code>","text":"<p>Validate CWE ID format.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._max_severity","title":"<code>_max_severity(*labels)</code>","text":"<p>Return the highest-severity label among the provided ones.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._process_relationship_item","title":"<code>_process_relationship_item(relationship, _relationship_types)</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._raise_severity","title":"<code>_raise_severity(current, candidate)</code>","text":"<p>Return the higher-severity label according to _severity_order().</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._severity_order","title":"<code>_severity_order(severity)</code>","text":"<p>Get severity order for comparison.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._validate_optional_fields","title":"<code>_validate_optional_fields(cwe_data)</code>","text":"<p>Validate optional-but-constrained fields: category.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._validate_relationships","title":"<code>_validate_relationships(cwe_data)</code>","text":"<p>Validate relationships: presence of cwe_id and its format.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results._validate_required_fields","title":"<code>_validate_required_fields(cwe_data)</code>","text":"<p>Validate required CWE fields: id, name, description (recommended).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_category","title":"<code>add_category(categories, category)</code>","text":"<p>Add or increment a category count.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_cwe","title":"<code>add_cwe(result, cwe_id, cwe_data, *, file_path=None)</code>","text":"<p>Add successfully loaded CWE to the result.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_duplicate","title":"<code>add_duplicate(duplicates, item_id, file_path)</code>","text":"<p>Add a duplicate ID with its file path.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_failed_file","title":"<code>add_failed_file(files, file_path)</code>","text":"<p>Add a failed file.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_message","title":"<code>add_message(messages, level, message)</code>","text":"<p>Add a message to the message collection.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_processed_file","title":"<code>add_processed_file(files, file_path)</code>","text":"<p>Add a processed file.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_skipped_file","title":"<code>add_skipped_file(files, file_path)</code>","text":"<p>Add a skipped file.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.analyze_relationships","title":"<code>analyze_relationships(result, cwe_dict)</code>","text":"<p>Analyze CWE relationships for consistency and detect issues.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.batch_validate_cwes","title":"<code>batch_validate_cwes(result, cwe_dict)</code>","text":"<p>Validate multiple CWEs in batch.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_cwe_loading_summary","title":"<code>get_cwe_loading_summary(result)</code>","text":"<p>Generate CWE loading summary.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_cwe_validation_summary","title":"<code>get_cwe_validation_summary(result)</code>","text":"<p>Generate CWE validation summary.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_relationship_summary","title":"<code>get_relationship_summary(result)</code>","text":"<p>Generate CWE relationship summary.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.increment_loading_counts","title":"<code>increment_loading_counts(counts, *, succeeded=0, failed=0)</code>","text":"<p>Increment loading counts.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.increment_validation_counts","title":"<code>increment_validation_counts(counts, *, passed=0, failed=0)</code>","text":"<p>Increment validation counts.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.track_invalid_file","title":"<code>track_invalid_file(result, file_path, reason)</code>","text":"<p>Track an invalid CWE file.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.track_skipped_cwe_file","title":"<code>track_skipped_cwe_file(result, file_path, reason)</code>","text":"<p>Track a skipped CWE file.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.validate_cwe","title":"<code>validate_cwe(result, cwe_id, cwe_data)</code>","text":"<p>Validate a CWE definition with comprehensive field validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.validate_cwe_field","title":"<code>validate_cwe_field(result, cwe_id, field_path, field_value, validation_rule)</code>","text":"<p>Validate a specific CWE field.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.with_message_methods","title":"<code>with_message_methods(cls)</code>","text":"<p>Add message methods to result classes.</p> <p>Decorator that adds add_error(), add_warning(), and add_info() methods to any result class with a MessageCollection field.</p>"},{"location":"api/cwe/#cwe-errors","title":"CWE Errors","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors","title":"<code>ci.transparency.cwe.types.cwe.errors</code>","text":"<p>CWE domain error types using enhanced base classes.</p> <p>Domain-specific error hierarchy for CWE operations. Each error inherits from exactly one enhanced base error class and leverages the flexible context system for CWE-specific information.</p> Design principles <ul> <li>Single inheritance: each error extends exactly one base error class</li> <li>Context-rich: uses the flexible context system for CWE details</li> <li>Consistent: maintains uniform error formatting across all errors</li> <li>Minimal: leverages base class functionality rather than duplicating code</li> </ul> Usage patterns <ul> <li>File operations \u2192 FileError, LoadingError, ParsingError</li> <li>Validation operations \u2192 ValidationError</li> <li>Processing operations \u2192 OperationError</li> <li>General operations \u2192 BaseTransparencyError</li> </ul> Typical usage <p>from ci.transparency.cwe.types.cwe import CweValidationError</p> <p>raise CweValidationError(     \"Field validation failed\",     item_id=\"CWE-79\",     field_path=\"relationships[0].id\",     validation_rule=\"required_field\",     file_path=\"cwe-79.yaml\" )</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors--output-field-validation-failed-item-cwe-79-field-relationships0id-rule-required_field-file-cwe-79yaml","title":"Output: \"Field validation failed | Item: CWE-79 | Field: relationships[0].id | Rule: required_field | File: cwe-79.yaml\"","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.__all__","title":"<code>__all__ = ['CweCircularRelationshipError', 'CweConfigurationError', 'CweConstraintViolationError', 'CweDuplicateError', 'CweFieldValidationError', 'CweFileNotFoundError', 'CweIntegrityError', 'CweInvalidFormatError', 'CweInvalidReferenceError', 'CweLoadingError', 'CweMissingFieldError', 'CweOrphanedError', 'CweParsingError', 'CweProcessingError', 'CweRelationshipError', 'CweSchemaValidationError', 'CweValidationError']</code>  <code>module-attribute</code>","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.BaseTransparencyError","title":"<code>BaseTransparencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Enhanced base exception for all transparency operations.</p> <p>Provides flexible context tracking for common error patterns without requiring all errors to specify every possible context field.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.BaseTransparencyError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Get contextual information parts for error formatting.</p> <p>Returns context in order of importance: 1. Operation identification (phase, operation, stage) 2. Progress information (processed/total counts) 3. Resource information (timeouts, limits) 4. File/item context 5. Validation context 6. Error flow context (abort reason, error code)</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of context strings (e.g., [\"Phase: validation\", \"Progress: 150/500\"])</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweCircularRelationshipError","title":"<code>CweCircularRelationshipError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Circular CWE relationship detected.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweConfigurationError","title":"<code>CweConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>CWE configuration error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweConstraintViolationError","title":"<code>CweConstraintViolationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE constraint validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweDuplicateError","title":"<code>CweDuplicateError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Duplicate CWE ID detected during loading.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweFieldValidationError","title":"<code>CweFieldValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE field-level validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweFileNotFoundError","title":"<code>CweFileNotFoundError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>CWE definition file could not be found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweIntegrityError","title":"<code>CweIntegrityError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE data integrity violation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweInvalidFormatError","title":"<code>CweInvalidFormatError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>CWE definition format is invalid or unsupported.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweInvalidReferenceError","title":"<code>CweInvalidReferenceError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE relationship references unknown CWE ID.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweLoadingError","title":"<code>CweLoadingError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Base CWE loading error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweMissingFieldError","title":"<code>CweMissingFieldError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Required CWE field is missing from definition.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweOrphanedError","title":"<code>CweOrphanedError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE has no valid relationships.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweParsingError","title":"<code>CweParsingError</code>","text":"<p>               Bases: <code>ParsingError</code></p> <p>CWE definition file could not be parsed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweProcessingError","title":"<code>CweProcessingError</code>","text":"<p>               Bases: <code>OperationError</code></p> <p>CWE processing operation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweRelationshipError","title":"<code>CweRelationshipError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE relationship validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweSchemaValidationError","title":"<code>CweSchemaValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE schema validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweValidationError","title":"<code>CweValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Base CWE validation error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.FileError","title":"<code>FileError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for file-based operations.</p> <p>Convenient base for file loading, parsing, and other file-related errors.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.LoadingError","title":"<code>LoadingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be loaded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.OperationError","title":"<code>OperationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for operations with progress tracking.</p> <p>Convenient base for batch processing, phase validation, and other operations that process multiple items with progress tracking.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.ParsingError","title":"<code>ParsingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be parsed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for validation operations.</p> <p>Convenient base for schema validation, rule checking, and other validation-related errors.</p>"},{"location":"api/cwe_schema/","title":"CWE Schema","text":"<p>Types and operations for CWE schema management, validation, and version control. Handles schema loading, constraint validation, and freeze operations for version locking.</p>"},{"location":"api/cwe_schema/#schema-results","title":"Schema Results","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results","title":"<code>ci.transparency.cwe.types.cwe.schema.results</code>","text":"<p>CWE schema result types for loading and validation using composition.</p> <p>Domain-specific result holders used by CWE schema loading/parsing and CWE instance-vs-schema validation. Built using composition of base building blocks for clean separation of concerns.</p> Design principles <ul> <li>Composition-based: uses base building blocks for reusable functionality</li> <li>Consistent shape across loading and validation operations</li> <li>Minimal memory footprint with frozen dataclasses</li> <li>Type-safe: follows Python 3.12+ and pyright strict conventions</li> <li>Friendly to functional updates and transformations</li> </ul> Core CWE schema results <ul> <li>CweSchemaLoadingResult: Outcome of loading/parsing CWE schemas</li> <li>CweSchemaValidationResult: Outcome of validating CWE data against a schema</li> </ul>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.__all__","title":"<code>__all__ = ['CweSchemaLoadingResult', 'CweSchemaValidationResult', 'CweSchemaItemDict', 'CweSchemaDataDict', 'LoadingSummaryDict', 'ValidationSummaryDict', 'SchemaCollection', 'add_cwe_schema', 'track_invalid_schema_file', 'track_skipped_schema_file', 'set_schema_metadata', 'create_successful_validation', 'create_failed_validation', 'add_validation_error', 'add_validation_warning', 'get_cwe_schema_loading_summary', 'get_cwe_schema_validation_summary', 'add_message', 'increment_loading_counts', 'increment_validation_counts', 'add_processed_file', 'add_failed_file', 'add_skipped_file', 'add_file_type', 'add_duplicate']</code>  <code>module-attribute</code>","text":""},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaDataDict","title":"<code>CweSchemaDataDict = dict[str, CweSchemaItemDict]</code>","text":""},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.LoadingSummaryDict","title":"<code>LoadingSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.ValidationSummaryDict","title":"<code>ValidationSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaItemDict","title":"<code>CweSchemaItemDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for CWE schema data.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult","title":"<code>CweSchemaLoadingResult</code>  <code>dataclass</code>","text":"<p>Result of loading/parsing CWE schemas using composition.</p> <p>Composes base building blocks for clean separation of concerns.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult--attributes","title":"Attributes","text":"<p>schemas : CweSchemaDataDict     Dictionary of loaded CWE schema data. loading : LoadingCounts     Statistics about loading success and failures. messages : MessageCollection     Collection of error, warning, and info messages. files : FileCollection     Tracking of processed, failed, and skipped files. schema_metadata : SchemaCollection     Schema-specific metadata and file type tracking. duplicates : DuplicateCollection     Tracking of duplicate schema IDs and their associated files.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if loading is successful and there are no error messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.loaded_schema_ids","title":"<code>loaded_schema_ids</code>  <code>property</code>","text":"<p>All loaded schema IDs (sorted for stable output).</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.schema_count","title":"<code>schema_count</code>  <code>property</code>","text":"<p>Return the number of schemas loaded.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.schema_name","title":"<code>schema_name</code>  <code>property</code>","text":"<p>Schema name from metadata.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.schema_version","title":"<code>schema_version</code>  <code>property</code>","text":"<p>Schema version from metadata.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.get_schema","title":"<code>get_schema(schema_id)</code>","text":"<p>Get schema data by ID.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.has_schema","title":"<code>has_schema(schema_id)</code>","text":"<p>Check if a schema ID was loaded.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult","title":"<code>CweSchemaValidationResult</code>  <code>dataclass</code>","text":"<p>Result of validating CWE data against a schema using composition.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult--attributes","title":"Attributes","text":"<p>validation : ValidationCounts     Statistics about validation success and failures. messages : MessageCollection     Collection of error, warning, and info messages. schema_metadata : SchemaCollection     Schema-specific metadata. cwe_id : str | None     CWE identifier being validated. field_path : str | None     Path to the field being validated. is_schema_valid : bool     Whether the validation passed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if validation is successful and there are no error messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.schema_name","title":"<code>schema_name</code>  <code>property</code>","text":"<p>Schema name from metadata.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.schema_version","title":"<code>schema_version</code>  <code>property</code>","text":"<p>Schema version from metadata.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.validation_target","title":"<code>validation_target</code>  <code>property</code>","text":"<p>Get a description of what was validated.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.DuplicateCollection","title":"<code>DuplicateCollection</code>  <code>dataclass</code>","text":"<p>Tracks duplicate IDs and their associated file paths.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.DuplicateCollection--attributes","title":"Attributes","text":"<p>duplicate_ids : dict[str, list[Path]]     Dictionary mapping duplicate IDs to lists of file paths where duplicates were found.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.DuplicateCollection.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Return the number of duplicate IDs tracked in the collection.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.DuplicateCollection.duplicate_count--returns","title":"Returns","text":"<p>int     The number of duplicate IDs.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.DuplicateCollection.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>Return True if there are any duplicate IDs, otherwise False.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.FileCollection","title":"<code>FileCollection</code>  <code>dataclass</code>","text":"<p>Tracks processed, failed, and skipped files.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.FileCollection--attributes","title":"Attributes","text":"<p>processed_files : list[Path]     list of files that have been processed. failed_files : list[Path]     list of files that failed to process. skipped_files : list[Path]     list of files that were skipped.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.FileCollection.failed_file_count","title":"<code>failed_file_count</code>  <code>property</code>","text":"<p>Return the number of failed files.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.FileCollection.processed_file_count","title":"<code>processed_file_count</code>  <code>property</code>","text":"<p>Return the number of processed files.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.FileCollection.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Return the number of skipped files.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.FileCollection.total_files","title":"<code>total_files</code>  <code>property</code>","text":"<p>Return the total number of files (processed, failed, skipped).</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.LoadingCounts","title":"<code>LoadingCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of successfully loaded and failed items.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.LoadingCounts--attributes","title":"Attributes","text":"<p>loaded_count : int     Number of items successfully loaded. failed_count : int     Number of items that failed to load.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.LoadingCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.LoadingCounts.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Return the rate of successful loads as a float between 0 and 1.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.LoadingCounts.total_attempted","title":"<code>total_attempted</code>  <code>property</code>","text":"<p>Return the total number of attempted loads (successful + failed).</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.SchemaCollection","title":"<code>SchemaCollection</code>  <code>dataclass</code>","text":"<p>Tracks schema metadata and statistics.</p> <p>Could be reused for any domain that works with schemas.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.SchemaCollection.file_type_count","title":"<code>file_type_count</code>  <code>property</code>","text":"<p>Number of different file types processed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.SchemaCollection.has_schema_metadata","title":"<code>has_schema_metadata</code>  <code>property</code>","text":"<p>True if schema name and version are available.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.SchemaCollection.add_file_type","title":"<code>add_file_type(file_type)</code>","text":"<p>Add or increment a file type count.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.SchemaCollection.with_metadata","title":"<code>with_metadata(schema_name, schema_version)</code>","text":"<p>Return new collection with updated schema metadata.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.ValidationCounts","title":"<code>ValidationCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of passed and failed validations.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.ValidationCounts--attributes","title":"Attributes","text":"<p>passed_count : int     Number of items that passed validation. failed_count : int     Number of items that failed validation.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.ValidationCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.ValidationCounts.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Return the rate of passed validations as a float between 0 and 1.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.ValidationCounts.total_validated","title":"<code>total_validated</code>  <code>property</code>","text":"<p>Return the total number of validated items (passed + failed).</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_cwe_schema","title":"<code>add_cwe_schema(result, schema_id, schema_data, *, file_path=None)</code>","text":"<p>Add successfully loaded CWE schema to the result.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_duplicate","title":"<code>add_duplicate(duplicates, item_id, file_path)</code>","text":"<p>Add a duplicate ID with its file path.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_failed_file","title":"<code>add_failed_file(files, file_path)</code>","text":"<p>Add a failed file.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_file_type","title":"<code>add_file_type(schema_metadata, file_type)</code>","text":"<p>Add or increment a file type count.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_message","title":"<code>add_message(messages, level, message)</code>","text":"<p>Add a message to the message collection.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_processed_file","title":"<code>add_processed_file(files, file_path)</code>","text":"<p>Add a processed file.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_skipped_file","title":"<code>add_skipped_file(files, file_path)</code>","text":"<p>Add a skipped file.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_validation_error","title":"<code>add_validation_error(result, error_message)</code>","text":"<p>Add an error to the validation result.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_validation_warning","title":"<code>add_validation_warning(result, warning_message)</code>","text":"<p>Add a warning to the validation result.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.create_failed_validation","title":"<code>create_failed_validation(*, error_messages=None, warning_messages=None, schema_name=None, schema_version=None, cwe_id=None, field_path=None)</code>","text":"<p>Create a failed validation result.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.create_successful_validation","title":"<code>create_successful_validation(*, schema_name=None, schema_version=None, cwe_id=None, field_path=None, info_message=None)</code>","text":"<p>Create a successful validation result.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.get_cwe_schema_loading_summary","title":"<code>get_cwe_schema_loading_summary(result)</code>","text":"<p>Generate CWE schema loading summary.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.get_cwe_schema_validation_summary","title":"<code>get_cwe_schema_validation_summary(result)</code>","text":"<p>Generate CWE schema validation summary.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.increment_loading_counts","title":"<code>increment_loading_counts(counts, *, succeeded=0, failed=0)</code>","text":"<p>Increment loading counts.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.increment_validation_counts","title":"<code>increment_validation_counts(counts, *, passed=0, failed=0)</code>","text":"<p>Increment validation counts.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.set_schema_metadata","title":"<code>set_schema_metadata(result, schema_name, schema_version)</code>","text":"<p>Set schema metadata for the loading result.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.track_invalid_schema_file","title":"<code>track_invalid_schema_file(result, file_path, reason)</code>","text":"<p>Track an invalid CWE schema file.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.track_skipped_schema_file","title":"<code>track_skipped_schema_file(result, file_path, reason)</code>","text":"<p>Track a skipped CWE schema file.</p>"},{"location":"api/cwe_schema/#schema-errors","title":"Schema Errors","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors","title":"<code>ci.transparency.cwe.types.cwe.schema.errors</code>","text":"<p>CWE schema error types using enhanced base classes.</p> <p>Domain-specific error hierarchy for CWE schema operations. Each error inherits from exactly one enhanced base error class and leverages the flexible context system for schema-specific information.</p> Design principles <ul> <li>Single inheritance: each error extends exactly one base error class</li> <li>Context-rich: uses the flexible context system for schema details</li> <li>Consistent: maintains uniform error formatting across all errors</li> <li>Minimal: leverages base class functionality rather than duplicating code</li> </ul> Usage patterns <ul> <li>File operations \u2192 FileError, LoadingError, ParsingError</li> <li>Validation operations \u2192 ValidationError</li> <li>General schema operations \u2192 BaseTransparencyError</li> </ul> Typical usage <p>from ci.transparency.cwe.types.cwe.schema import CweSchemaValidationError</p> <p>raise CweSchemaValidationError(     \"Schema validation failed\",     schema_name=\"cwe-v2.0\",     field_path=\"relationships[0].id\",     file_path=\"cwe-79.yaml\" )</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors--output-schema-validation-failed-schema-cwe-v20-field-relationships0id-file-cwe-79yaml","title":"Output: \"Schema validation failed | Schema: cwe-v2.0 | Field: relationships[0].id | File: cwe-79.yaml\"","text":""},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.__all__","title":"<code>__all__ = ['CweSchemaCircularReferenceError', 'CweSchemaConstraintError', 'CweSchemaDataValidationError', 'CweSchemaError', 'CweSchemaFieldValidationError', 'CweSchemaFormatError', 'CweSchemaLoadingError', 'CweSchemaNotFoundError', 'CweSchemaParsingError', 'CweSchemaReferenceError', 'CweSchemaValidationError', 'CweSchemaVersionError']</code>  <code>module-attribute</code>","text":""},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.BaseTransparencyError","title":"<code>BaseTransparencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Enhanced base exception for all transparency operations.</p> <p>Provides flexible context tracking for common error patterns without requiring all errors to specify every possible context field.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.BaseTransparencyError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Get contextual information parts for error formatting.</p> <p>Returns context in order of importance: 1. Operation identification (phase, operation, stage) 2. Progress information (processed/total counts) 3. Resource information (timeouts, limits) 4. File/item context 5. Validation context 6. Error flow context (abort reason, error code)</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of context strings (e.g., [\"Phase: validation\", \"Progress: 150/500\"])</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaCircularReferenceError","title":"<code>CweSchemaCircularReferenceError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE schema contains circular references.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaConstraintError","title":"<code>CweSchemaConstraintError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE schema constraint validation failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaDataValidationError","title":"<code>CweSchemaDataValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE data validation against schema failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaError","title":"<code>CweSchemaError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>General CWE schema error for operations that don't fit specific categories.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaFieldValidationError","title":"<code>CweSchemaFieldValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE field-level validation against schema failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaFormatError","title":"<code>CweSchemaFormatError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>CWE schema format is invalid or malformed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaLoadingError","title":"<code>CweSchemaLoadingError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>CWE schema loading operation failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaNotFoundError","title":"<code>CweSchemaNotFoundError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>CWE schema file could not be found.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaParsingError","title":"<code>CweSchemaParsingError</code>","text":"<p>               Bases: <code>ParsingError</code></p> <p>CWE schema file could not be parsed as valid JSON/YAML.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaReferenceError","title":"<code>CweSchemaReferenceError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>CWE schema reference could not be resolved.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaValidationError","title":"<code>CweSchemaValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Base CWE schema validation error.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaVersionError","title":"<code>CweSchemaVersionError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>CWE schema version is not supported or invalid.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.FileError","title":"<code>FileError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for file-based operations.</p> <p>Convenient base for file loading, parsing, and other file-related errors.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.LoadingError","title":"<code>LoadingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be loaded.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.ParsingError","title":"<code>ParsingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be parsed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for validation operations.</p> <p>Convenient base for schema validation, rule checking, and other validation-related errors.</p>"},{"location":"api/schema/","title":"Schema","text":"<p>Types and operations for domain-neutral JSON schema management, validation, and version control. Handles schema loading, constraint validation, and reference analysis.</p>"},{"location":"api/schema/#schema-results","title":"Schema Results","text":"<p>options:   show_source: false   show_signature: true   group_by_category: true   filters:     - \"!^*\"</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results","title":"<code>ci.transparency.cwe.types.schema.results</code>","text":"<p>Domain-neutral schema result types and operations using composition.</p> <p>Immutable dataclasses for tracking schema loading and validation. Mirrors the CWE/Standards shape (LoadingCounts, ValidationCounts, MessageCollection, FileCollection, DuplicateCollection), so higher-level workflows can consume a consistent interface.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.__all__","title":"<code>__all__ = ['SchemaLoadingResult', 'SchemaValidationResult', 'SchemaDocumentDict', 'SchemasDict', 'ValidationResultsDict', 'ValidationDetailsDict', 'SeverityCountsDict', 'LoadingSummaryDict', 'ValidationSummaryDict', 'add_schema', 'track_invalid_schema_file', 'track_skipped_schema_file', 'validate_schema_document', 'record_schema_validation', 'get_schema_loading_summary', 'get_schema_validation_summary', 'add_message', 'increment_loading', 'increment_validation', 'add_processed_file', 'add_failed_file', 'add_skipped_file', 'add_duplicate']</code>  <code>module-attribute</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.LoadingSummaryDict","title":"<code>LoadingSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemasDict","title":"<code>SchemasDict = dict[str, SchemaDocumentDict]</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SeverityCountsDict","title":"<code>SeverityCountsDict = dict[str, int]</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationDetailsDict","title":"<code>ValidationDetailsDict = dict[str, list[str]]</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationResultsDict","title":"<code>ValidationResultsDict = dict[str, bool]</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationSummaryDict","title":"<code>ValidationSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.DuplicateCollection","title":"<code>DuplicateCollection</code>  <code>dataclass</code>","text":"<p>Tracks duplicate IDs and their associated file paths.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.DuplicateCollection--attributes","title":"Attributes","text":"<p>duplicate_ids : dict[str, list[Path]]     Dictionary mapping duplicate IDs to lists of file paths where duplicates were found.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.DuplicateCollection.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Return the number of duplicate IDs tracked in the collection.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.DuplicateCollection.duplicate_count--returns","title":"Returns","text":"<p>int     The number of duplicate IDs.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.DuplicateCollection.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>Return True if there are any duplicate IDs, otherwise False.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.FileCollection","title":"<code>FileCollection</code>  <code>dataclass</code>","text":"<p>Tracks processed, failed, and skipped files.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.FileCollection--attributes","title":"Attributes","text":"<p>processed_files : list[Path]     list of files that have been processed. failed_files : list[Path]     list of files that failed to process. skipped_files : list[Path]     list of files that were skipped.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.FileCollection.failed_file_count","title":"<code>failed_file_count</code>  <code>property</code>","text":"<p>Return the number of failed files.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.FileCollection.processed_file_count","title":"<code>processed_file_count</code>  <code>property</code>","text":"<p>Return the number of processed files.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.FileCollection.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Return the number of skipped files.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.FileCollection.total_files","title":"<code>total_files</code>  <code>property</code>","text":"<p>Return the total number of files (processed, failed, skipped).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.LoadingCounts","title":"<code>LoadingCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of successfully loaded and failed items.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.LoadingCounts--attributes","title":"Attributes","text":"<p>loaded_count : int     Number of items successfully loaded. failed_count : int     Number of items that failed to load.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.LoadingCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.LoadingCounts.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Return the rate of successful loads as a float between 0 and 1.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.LoadingCounts.total_attempted","title":"<code>total_attempted</code>  <code>property</code>","text":"<p>Return the total number of attempted loads (successful + failed).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaDocumentDict","title":"<code>SchemaDocumentDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Minimal shape of a single schema document.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult","title":"<code>SchemaLoadingResult</code>  <code>dataclass</code>","text":"<p>Result of loading/parsing schema documents (batch-friendly).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if loading was successful and there are no error messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.is_successful--returns","title":"Returns","text":"<p>bool     True if loading was successful and there are no error messages, False otherwise.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.loaded_schema_ids","title":"<code>loaded_schema_ids</code>  <code>property</code>","text":"<p>Return a sorted list of loaded schema IDs.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.schema_count","title":"<code>schema_count</code>  <code>property</code>","text":"<p>Return the number of loaded schemas.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.get_schema","title":"<code>get_schema(schema_id)</code>","text":"<p>Return the schema document for the given schema_id, or None if not found.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.get_schema--parameters","title":"Parameters","text":"<p>schema_id : str     The identifier of the schema to retrieve.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.get_schema--returns","title":"Returns","text":"<p>SchemaDocumentDict or None     The schema document if found, otherwise None.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.has_schema","title":"<code>has_schema(schema_id)</code>","text":"<p>Check if a schema with the given ID exists in the loaded schemas.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.has_schema--parameters","title":"Parameters","text":"<p>schema_id : str     The identifier of the schema to check.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaLoadingResult.has_schema--returns","title":"Returns","text":"<p>bool     True if the schema exists, False otherwise.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult","title":"<code>SchemaValidationResult</code>  <code>dataclass</code>","text":"<p>Result of validating instances/documents against schemas.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if validation was successful and there are no error messages.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.is_successful--returns","title":"Returns","text":"<p>bool     True if validation was successful and there are no error messages, False otherwise.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.validated_count","title":"<code>validated_count</code>  <code>property</code>","text":"<p>Return the number of validated schemas.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.validation_rate","title":"<code>validation_rate</code>  <code>property</code>","text":"<p>Return the rate of successful validations as a float between 0 and 1.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.validation_rate--returns","title":"Returns","text":"<p>float     The fraction of schemas that passed validation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.get_failed","title":"<code>get_failed()</code>","text":"<p>Return a list of schema IDs that failed validation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.get_failed--returns","title":"Returns","text":"<p>list[str]     List of schema IDs where validation did not pass.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.get_passed","title":"<code>get_passed()</code>","text":"<p>Return a list of schema IDs that passed validation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.SchemaValidationResult.get_passed--returns","title":"Returns","text":"<p>list[str]     List of schema IDs where validation passed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationCounts","title":"<code>ValidationCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of passed and failed validations.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationCounts--attributes","title":"Attributes","text":"<p>passed_count : int     Number of items that passed validation. failed_count : int     Number of items that failed validation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationCounts.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Return the rate of passed validations as a float between 0 and 1.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.ValidationCounts.total_validated","title":"<code>total_validated</code>  <code>property</code>","text":"<p>Return the total number of validated items (passed + failed).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_duplicate","title":"<code>add_duplicate(duplicates, item_id, file_path)</code>","text":"<p>Add a duplicate item to the DuplicateCollection in an immutable fashion.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_duplicate--parameters","title":"Parameters","text":"<p>duplicates : DuplicateCollection     The current collection of duplicates. item_id : str     The identifier of the duplicate item. file_path : Path     The path of the file where the duplicate was found.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_duplicate--returns","title":"Returns","text":"<p>DuplicateCollection     A new DuplicateCollection with the duplicate item added.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_failed_file","title":"<code>add_failed_file(files, file_path)</code>","text":"<p>Add a failed file to the FileCollection in an immutable fashion.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_failed_file--parameters","title":"Parameters","text":"<p>files : FileCollection     The current collection of files. file_path : Path     The path of the file to add as failed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_failed_file--returns","title":"Returns","text":"<p>FileCollection     A new FileCollection with the failed file added.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_message","title":"<code>add_message(messages, level, message)</code>","text":"<p>Immutable message append.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_processed_file","title":"<code>add_processed_file(files, file_path)</code>","text":"<p>Add a processed file to the FileCollection in an immutable fashion.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_processed_file--parameters","title":"Parameters","text":"<p>files : FileCollection     The current collection of files. file_path : Path     The path of the file to add as processed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_processed_file--returns","title":"Returns","text":"<p>FileCollection     A new FileCollection with the processed file added.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_schema","title":"<code>add_schema(result, schema_id, schema_doc, *, file_path=None)</code>","text":"<p>Add a loaded schema (dedup, files, messages, counts).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_skipped_file","title":"<code>add_skipped_file(files, file_path)</code>","text":"<p>Add a skipped file to the FileCollection in an immutable fashion.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_skipped_file--parameters","title":"Parameters","text":"<p>files : FileCollection     The current collection of files. file_path : Path     The path of the file to add as skipped.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.add_skipped_file--returns","title":"Returns","text":"<p>FileCollection     A new FileCollection with the skipped file added.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.get_schema_loading_summary","title":"<code>get_schema_loading_summary(result)</code>","text":"<p>Generate a summary dictionary of schema loading results.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.get_schema_loading_summary--parameters","title":"Parameters","text":"<p>result : SchemaLoadingResult     The result object containing schema loading details.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.get_schema_loading_summary--returns","title":"Returns","text":"<p>LoadingSummaryDict     A dictionary summarizing loading statistics and outcomes.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.get_schema_validation_summary","title":"<code>get_schema_validation_summary(result)</code>","text":"<p>Generate a summary dictionary of schema validation results.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.get_schema_validation_summary--parameters","title":"Parameters","text":"<p>result : SchemaValidationResult     The result object containing validation details.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.get_schema_validation_summary--returns","title":"Returns","text":"<p>ValidationSummaryDict     A dictionary summarizing validation statistics and outcomes.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.increment_loading","title":"<code>increment_loading(counts, *, ok=0, failed=0)</code>","text":"<p>Increment the loading counts immutably by the specified ok and failed values.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.increment_loading--parameters","title":"Parameters","text":"<p>counts : LoadingCounts     The current loading counts. ok : int, optional     Number of successful loads to add (default is 0). failed : int, optional     Number of failed loads to add (default is 0).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.increment_loading--returns","title":"Returns","text":"<p>LoadingCounts     A new LoadingCounts instance with updated counts.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.increment_validation","title":"<code>increment_validation(counts, *, passed=0, failed=0)</code>","text":"<p>Increment the validation counts immutably by the specified passed and failed values.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.increment_validation--parameters","title":"Parameters","text":"<p>counts : ValidationCounts     The current validation counts. passed : int, optional     Number of successful validations to add (default is 0). failed : int, optional     Number of failed validations to add (default is 0).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.increment_validation--returns","title":"Returns","text":"<p>ValidationCounts     A new ValidationCounts instance with updated counts.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.record_schema_validation","title":"<code>record_schema_validation(result, schema_id, *, ok, errors=None, warnings=None, infos=None)</code>","text":"<p>Adapt external validator messages and push them in here without re-validating content.</p> <p>If an external validator already produced messages, push them in here without re-validating content.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.track_invalid_schema_file","title":"<code>track_invalid_schema_file(result, file_path, reason)</code>","text":"<p>Record a file that failed to load as a schema.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.track_skipped_schema_file","title":"<code>track_skipped_schema_file(result, file_path, reason)</code>","text":"<p>Record a file that was skipped during schema loading.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.validate_schema_document","title":"<code>validate_schema_document(result, schema_id, schema_doc)</code>","text":"<p>Minimal structural checks (domain-neutral).</p> <p>Designed so engines that call jsonschema, fastjsonschema, etc. can still pipe their messages into the same result container.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.results.with_message_methods","title":"<code>with_message_methods(cls)</code>","text":"<p>Add message methods to result classes.</p> <p>Decorator that adds add_error(), add_warning(), and add_info() methods to any result class with a MessageCollection field.</p>"},{"location":"api/schema/#schema-errors","title":"Schema Errors","text":"<p>options:   show_source: false   show_signature: true   group_by_category: true   filters:     - \"!^*\"</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors","title":"<code>ci.transparency.cwe.types.schema.errors</code>","text":"<p>Domain-neutral schema error types.</p> <p>Lightweight hierarchy that adds schema context (name/version/path) on top of base loading/validation errors. Keeps slots for low overhead and reuses your BaseLoadingError formatting contract.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.__all__","title":"<code>__all__ = ['SchemaCircularReferenceError', 'SchemaConstraintError', 'SchemaDataValidationError', 'SchemaError', 'SchemaFieldValidationError', 'SchemaFormatError', 'SchemaLoadingError', 'SchemaNotFoundError', 'SchemaParsingError', 'SchemaReferenceError', 'SchemaValidationError', 'SchemaVersionError']</code>  <code>module-attribute</code>","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.LoadingError","title":"<code>LoadingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be loaded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.ParsingError","title":"<code>ParsingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be parsed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaCircularReferenceError","title":"<code>SchemaCircularReferenceError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Schema contains circular references.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaCircularReferenceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the circular reference error.</p> <p>Includes the reference chain if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaConstraintError","title":"<code>SchemaConstraintError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Schema constraint validation failed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaConstraintError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the constraint error.</p> <p>Includes constraint name, expected value, and violated rule if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaDataValidationError","title":"<code>SchemaDataValidationError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Instance data validation against schema failed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaDataValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the data validation error.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaDataValidationError.get_context_parts--returns","title":"Returns","text":"<p>list[str]     List of context strings including validation path, expected type, and actual value if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaError","title":"<code>SchemaError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Base exception for schema operations with schema context.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the schema error.</p> <p>Includes schema name and version if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaFieldValidationError","title":"<code>SchemaFieldValidationError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Field-level validation against schema failed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaFieldValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the field validation error.</p> <p>Includes field path, field name, and constraint type if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaFormatError","title":"<code>SchemaFormatError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema format is invalid or malformed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaFormatError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the schema format error.</p> <p>Includes format issue details if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaLoadingError","title":"<code>SchemaLoadingError</code>","text":"<p>               Bases: <code>SchemaError</code></p> <p>Schema loading/parsing/format failures.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaNotFoundError","title":"<code>SchemaNotFoundError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema file/resource could not be found.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaParsingError","title":"<code>SchemaParsingError</code>","text":"<p>               Bases: <code>ParsingError</code></p> <p>Schema could not be parsed as valid JSON/YAML.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaReferenceError","title":"<code>SchemaReferenceError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Schema $ref could not be resolved.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaReferenceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the reference error.</p> <p>Includes reference path and target if available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaValidationError","title":"<code>SchemaValidationError</code>","text":"<p>               Bases: <code>SchemaError</code></p> <p>Base instance validation error against a schema.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaVersionError","title":"<code>SchemaVersionError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema version is not supported or invalid.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema.errors.SchemaVersionError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Return a list of context parts describing the schema version error.</p> <p>Includes supported versions if available.</p>"},{"location":"api/schema_evolution/","title":"Schema Evolution","text":"<p>Types and operations for domain-neutral schema-to-schema evolution checks, including freeze rule enforcement and backward-compatibility analysis. Provides result types for diff summaries and error types for violations and breaking changes.</p>"},{"location":"api/schema_evolution/#schema-evolution-results","title":"Schema Evolution Results","text":"<p>options:   show_source: false   show_signature: true   group_by_category: true   filters:     - \"!^*\"</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results","title":"<code>ci.transparency.cwe.types.schema_evolution.results</code>","text":"<p>Schema evolution result types and composable operations.</p> <p>This mirrors the Standards/CWE pattern: immutable dataclasses that compose base building blocks (ValidationCounts, MessageCollection) and helper functions that return new instances via dataclasses.replace.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.__all__","title":"<code>__all__ = ['SchemaDiff', 'SchemaEvolutionResult', 'set_versions', 'set_diff', 'record_violation', 'record_breaking_change', 'record_compat_issue', 'mark_check_passed', 'get_schema_evolution_summary']</code>  <code>module-attribute</code>","text":""},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaDiff","title":"<code>SchemaDiff</code>  <code>dataclass</code>","text":"<p>Structural diff between two schema versions.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaDiff.added_count","title":"<code>added_count</code>  <code>property</code>","text":"<p>Return the number of items added in the schema diff.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaDiff.changed_count","title":"<code>changed_count</code>  <code>property</code>","text":"<p>Return the number of items changed in the schema diff.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaDiff.removed_count","title":"<code>removed_count</code>  <code>property</code>","text":"<p>Return the number of items removed in the schema diff.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaDiff.total_changes","title":"<code>total_changes</code>  <code>property</code>","text":"<p>Return the total number of changes (added, removed, changed) in the schema diff.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult","title":"<code>SchemaEvolutionResult</code>  <code>dataclass</code>","text":"<p>Aggregate result of a schema evolution (freeze/compatibility) check.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult.breaking_change_count","title":"<code>breaking_change_count</code>  <code>property</code>","text":"<p>Return the number of breaking changes recorded in the schema evolution result.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult.compatibility_issue_count","title":"<code>compatibility_issue_count</code>  <code>property</code>","text":"<p>Return the number of compatibility issues recorded in the schema evolution result.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult.has_breaking_changes","title":"<code>has_breaking_changes</code>  <code>property</code>","text":"<p>Return True if there are any breaking changes recorded.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult.has_compat_issues","title":"<code>has_compat_issues</code>  <code>property</code>","text":"<p>Return True if there are any compatibility issues recorded.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>True if no validation failures and no error messages.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.SchemaEvolutionResult.violation_count","title":"<code>violation_count</code>  <code>property</code>","text":"<p>Return the number of violations recorded in the schema evolution result.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.ValidationCounts","title":"<code>ValidationCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of passed and failed validations.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.ValidationCounts--attributes","title":"Attributes","text":"<p>passed_count : int     Number of items that passed validation. failed_count : int     Number of items that failed validation.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.ValidationCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.ValidationCounts.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Return the rate of passed validations as a float between 0 and 1.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.ValidationCounts.total_validated","title":"<code>total_validated</code>  <code>property</code>","text":"<p>Return the total number of validated items (passed + failed).</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results._add_message","title":"<code>_add_message(messages, level, text)</code>","text":""},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results._inc_validation","title":"<code>_inc_validation(counts, *, passed=0, failed=0)</code>","text":""},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.get_schema_evolution_summary","title":"<code>get_schema_evolution_summary(result)</code>","text":"<p>Generate a summary dictionary of the schema evolution result.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.get_schema_evolution_summary--parameters","title":"Parameters","text":"<p>result : SchemaEvolutionResult     The schema evolution result to summarize.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.get_schema_evolution_summary--returns","title":"Returns","text":"<p>dict[str, object]     A dictionary containing summary statistics and details about the schema evolution.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.mark_check_passed","title":"<code>mark_check_passed(result, message=None)</code>","text":"<p>Increment 'passed' when a check succeeds.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.record_breaking_change","title":"<code>record_breaking_change(result, message)</code>","text":"<p>Record a breaking change; also a validation failure.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.record_compat_issue","title":"<code>record_compat_issue(result, message, *, treat_as_failure=False)</code>","text":"<p>Record a compatibility issue. By default it's a warning; can be hardened.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.record_violation","title":"<code>record_violation(result, message)</code>","text":"<p>Record a freeze-rule violation (may or may not be breaking).</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.set_diff","title":"<code>set_diff(result, diff)</code>","text":"<p>Set the schema diff in a SchemaEvolutionResult and add an info message summarizing the diff counts.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.set_diff--parameters","title":"Parameters","text":"<p>result : SchemaEvolutionResult     The schema evolution result to update. diff : SchemaDiff     The schema diff to set.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.set_diff--returns","title":"Returns","text":"<p>SchemaEvolutionResult     A new SchemaEvolutionResult instance with the updated diff and info message.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.set_versions","title":"<code>set_versions(result, *, old_version, new_version)</code>","text":"<p>Set the old and new version identifiers in a SchemaEvolutionResult.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.set_versions--parameters","title":"Parameters","text":"<p>result : SchemaEvolutionResult     The schema evolution result to update. old_version : str | None     The old version identifier. new_version : str | None     The new version identifier.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.set_versions--returns","title":"Returns","text":"<p>SchemaEvolutionResult     A new SchemaEvolutionResult instance with updated version fields.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.results.with_message_methods","title":"<code>with_message_methods(cls)</code>","text":"<p>Add message methods to result classes.</p> <p>Decorator that adds add_error(), add_warning(), and add_info() methods to any result class with a MessageCollection field.</p>"},{"location":"api/schema_evolution/#schema-evolution-errors","title":"Schema Evolution Errors","text":"<p>options:   show_source: false   show_signature: true   group_by_category: true   filters:     - \"!^*\"</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors","title":"<code>ci.transparency.cwe.types.schema_evolution.errors</code>","text":"<p>Schema evolution (freeze/compatibility) error types using enhanced base classes.</p> <p>These mirror our domain patterns (like CWE/Standards) and use the flatter base errors. We compose all evolution-specific details into the base fields (validation_rule, field_path, file_path) and a single validation_context string, so formatting stays consistent and stable across domains.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors.__all__","title":"<code>__all__ = ['SchemaFreezeError', 'SchemaFreezeViolationError', 'SchemaCompatibilityError', 'SchemaBreakingChangeError']</code>  <code>module-attribute</code>","text":""},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors.SchemaBreakingChangeError","title":"<code>SchemaBreakingChangeError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Breaking change detected between schema versions.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors.SchemaCompatibilityError","title":"<code>SchemaCompatibilityError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Backward-compatibility check failed.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors.SchemaFreezeError","title":"<code>SchemaFreezeError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Base schema evolution error comparing old vs new versions.</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors.SchemaFreezeViolationError","title":"<code>SchemaFreezeViolationError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Schema freeze rule violation detected (may or may not be breaking).</p>"},{"location":"api/schema_evolution/#ci.transparency.cwe.types.schema_evolution.errors.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for validation operations.</p> <p>Convenient base for schema validation, rule checking, and other validation-related errors.</p>"},{"location":"api/standards/","title":"Standards Domain","text":"<p>Types and operations for security standards processing, validation, and mapping to CWE. Supports multiple frameworks like NIST, ISO, COBIT, and custom standards.</p>"},{"location":"api/standards/#standards-results","title":"Standards Results","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results","title":"<code>ci.transparency.cwe.types.standards.results</code>","text":"<p>Standards domain result types and operations using composition.</p> <p>Immutable dataclasses for tracking standards loading, validation, and mapping analysis operations. Built using composition of base building blocks for clean separation of concerns.</p> Core types <ul> <li>StandardsLoadingResult: Tracks standards definition loading with framework detection</li> <li>StandardsValidationResult: Tracks standards validation with field and constraint checks</li> <li>StandardsMappingResult: Tracks standards mapping validation and analysis</li> </ul> Key operations <ul> <li>add_standard: Add successfully loaded standards definition</li> <li>validate_standard: Validate standards data with field checks</li> <li>analyze_mappings: Analyze standards mappings for consistency</li> </ul> Design principles <ul> <li>Immutable: uses dataclasses.replace for all modifications</li> <li>Composition-based: uses base building blocks for reusable functionality</li> <li>Standards-specific: tailored for standards definition requirements and patterns</li> <li>Type-safe: follows Python 3.12+ and pyright strict conventions</li> </ul>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.__all__","title":"<code>__all__ = ['StandardsLoadingResult', 'StandardsValidationResult', 'StandardsMappingResult', 'StandardsMappingDict', 'StandardsControlDict', 'StandardsItemDict', 'StandardsDataDict', 'ValidationResultsDict', 'ValidationDetailsDict', 'SeverityCountsDict', 'MappingResultsDict', 'MappingTypesDict', 'ErrorSummaryDict', 'LoadingSummaryDict', 'ValidationSummaryDict', 'MappingSummaryDict', 'FrameworkCollection', 'add_standard', 'track_invalid_standards_file', 'track_skipped_standards_file', 'validate_standard', 'validate_standards_field', 'batch_validate_standards', 'analyze_mappings', 'add_mapping', 'get_standards_loading_summary', 'get_standards_validation_summary', 'get_mapping_summary']</code>  <code>module-attribute</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ErrorSummaryDict","title":"<code>ErrorSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.LoadingSummaryDict","title":"<code>LoadingSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MappingResultsDict","title":"<code>MappingResultsDict = dict[str, list[str]]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MappingSummaryDict","title":"<code>MappingSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MappingTypesDict","title":"<code>MappingTypesDict = dict[str, int]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.SeverityCountsDict","title":"<code>SeverityCountsDict = dict[str, int]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsDataDict","title":"<code>StandardsDataDict = dict[str, StandardsItemDict]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationDetailsDict","title":"<code>ValidationDetailsDict = dict[str, list[str]]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationResultsDict","title":"<code>ValidationResultsDict = dict[str, bool]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationSummaryDict","title":"<code>ValidationSummaryDict = dict[str, Any]</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.DuplicateCollection","title":"<code>DuplicateCollection</code>  <code>dataclass</code>","text":"<p>Tracks duplicate IDs and their associated file paths.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.DuplicateCollection--attributes","title":"Attributes","text":"<p>duplicate_ids : dict[str, list[Path]]     Dictionary mapping duplicate IDs to lists of file paths where duplicates were found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.DuplicateCollection.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Return the number of duplicate IDs tracked in the collection.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.DuplicateCollection.duplicate_count--returns","title":"Returns","text":"<p>int     The number of duplicate IDs.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.DuplicateCollection.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>Return True if there are any duplicate IDs, otherwise False.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FileCollection","title":"<code>FileCollection</code>  <code>dataclass</code>","text":"<p>Tracks processed, failed, and skipped files.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FileCollection--attributes","title":"Attributes","text":"<p>processed_files : list[Path]     list of files that have been processed. failed_files : list[Path]     list of files that failed to process. skipped_files : list[Path]     list of files that were skipped.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FileCollection.failed_file_count","title":"<code>failed_file_count</code>  <code>property</code>","text":"<p>Return the number of failed files.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FileCollection.processed_file_count","title":"<code>processed_file_count</code>  <code>property</code>","text":"<p>Return the number of processed files.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FileCollection.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Return the number of skipped files.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FileCollection.total_files","title":"<code>total_files</code>  <code>property</code>","text":"<p>Return the total number of files (processed, failed, skipped).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FrameworkCollection","title":"<code>FrameworkCollection</code>  <code>dataclass</code>","text":"<p>Tracks statistics for frameworks.</p> <p>Could be reused for any domain that categorizes by framework.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FrameworkCollection.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Return the number of frameworks tracked.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FrameworkCollection.most_common_framework","title":"<code>most_common_framework</code>  <code>property</code>","text":"<p>Return the most common framework based on highest count.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.FrameworkCollection.add_framework","title":"<code>add_framework(framework)</code>","text":"<p>Add or increment a framework count.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.LoadingCounts","title":"<code>LoadingCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of successfully loaded and failed items.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.LoadingCounts--attributes","title":"Attributes","text":"<p>loaded_count : int     Number of items successfully loaded. failed_count : int     Number of items that failed to load.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.LoadingCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.LoadingCounts.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Return the rate of successful loads as a float between 0 and 1.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.LoadingCounts.total_attempted","title":"<code>total_attempted</code>  <code>property</code>","text":"<p>Return the total number of attempted loads (successful + failed).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection","title":"<code>MessageCollection</code>  <code>dataclass</code>","text":"<p>Collects error, warning, and info messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection--attributes","title":"Attributes","text":"<p>errors : list[str]     list of error messages. warnings : list[str]     list of warning messages. infos : list[str]     list of informational messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Return the number of error messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>Return True if there are any error messages, otherwise False.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>Return True if there are any warning messages, otherwise False.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Return the number of informational messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Return the total number of messages (errors, warnings, infos).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.MessageCollection.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Return the number of warning messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection","title":"<code>ReferenceCollection</code>  <code>dataclass</code>","text":"<p>Tracks references between items and their validity.</p> <p>Could be reused for any domain that has inter-item references.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.has_invalid_references","title":"<code>has_invalid_references</code>  <code>property</code>","text":"<p>True if there are invalid references.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.has_orphaned_items","title":"<code>has_orphaned_items</code>  <code>property</code>","text":"<p>True if there are orphaned items.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.invalid_reference_count","title":"<code>invalid_reference_count</code>  <code>property</code>","text":"<p>Number of invalid references.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.orphaned_item_count","title":"<code>orphaned_item_count</code>  <code>property</code>","text":"<p>Number of items with no references.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.total_references_count","title":"<code>total_references_count</code>  <code>property</code>","text":"<p>Total number of references tracked.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.add_invalid_reference","title":"<code>add_invalid_reference(reference_desc)</code>","text":"<p>Add an invalid reference.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.add_orphaned_item","title":"<code>add_orphaned_item(item_id)</code>","text":"<p>Add an orphaned item.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ReferenceCollection.add_reference","title":"<code>add_reference(from_item, to_item)</code>","text":"<p>Add a reference between items.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsControlDict","title":"<code>StandardsControlDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for standards control data.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsItemDict","title":"<code>StandardsItemDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for standards data.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult","title":"<code>StandardsLoadingResult</code>  <code>dataclass</code>","text":"<p>Represents the result of loading standards data using composition.</p> <p>Composes base building blocks for clean separation of concerns.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult--attributes","title":"Attributes","text":"<p>standards : StandardsDataDict     Dictionary of loaded standards data. loading : LoadingCounts     Statistics about loading success and failures. messages : MessageCollection     Collection of error, warning, and info messages. files : FileCollection     Tracking of processed, failed, and skipped files. frameworks : FrameworkCollection     Statistics for frameworks encountered. duplicates : DuplicateCollection     Tracking of duplicate IDs and their associated files. _format_breakdown : dict[str, int]     Tracks format usage breakdown.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if loading is successful and there are no error messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.loaded_standard_ids","title":"<code>loaded_standard_ids</code>  <code>property</code>","text":"<p>All loaded standard IDs (sorted for stable output).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.standards_count","title":"<code>standards_count</code>  <code>property</code>","text":"<p>Return the number of standards loaded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.add_format_info","title":"<code>add_format_info(format_version)</code>","text":"<p>Track format usage.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_control_count","title":"<code>get_control_count()</code>","text":"<p>Get total number of controls across all standards.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_standard","title":"<code>get_standard(standard_id)</code>","text":"<p>Get standards data by ID.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_standards_by_framework","title":"<code>get_standards_by_framework(framework)</code>","text":"<p>Return all standards loaded for a given framework.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_standards_by_framework--parameters","title":"Parameters","text":"<p>framework : str     The framework name to filter standards by.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_standards_by_framework--returns","title":"Returns","text":"<p>StandardsDataDict     Dictionary of standards data filtered by the specified framework.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.has_standard","title":"<code>has_standard(standard_id)</code>","text":"<p>Check if a standards ID was loaded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingDict","title":"<code>StandardsMappingDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for standards mapping data.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult","title":"<code>StandardsMappingResult</code>  <code>dataclass</code>","text":"<p>Result from standards mapping validation and analysis using composition.</p> <p>Tracks standards mapping consistency, invalid references detection, and mapping statistics analysis.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult--attributes","title":"Attributes","text":"<p>validation : ValidationCounts     Statistics about mapping validation. messages : MessageCollection     Collection of error, warning, and info messages. references : ReferenceCollection     Tracking of references between standards and targets. mapping_results : MappingResultsDict     Mapping of standards IDs to their target IDs. mapping_types : MappingTypesDict     Count of mapping types. duplicate_mappings : list[str]     Duplicate mappings detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.duplicate_mapping_count","title":"<code>duplicate_mapping_count</code>  <code>property</code>","text":"<p>Number of duplicate mappings detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.has_duplicate_mappings","title":"<code>has_duplicate_mappings</code>  <code>property</code>","text":"<p>True if duplicate mappings were detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if mapping analysis is successful.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.total_mappings_count","title":"<code>total_mappings_count</code>  <code>property</code>","text":"<p>Total number of mappings tracked.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.get_mapping_coverage_rate","title":"<code>get_mapping_coverage_rate()</code>","text":"<p>Calculate mapping coverage rate.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.get_mappings","title":"<code>get_mappings(standard_id)</code>","text":"<p>Get all mappings for a specific standard.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult","title":"<code>StandardsValidationResult</code>  <code>dataclass</code>","text":"<p>Represents the result of validating standards data using composition.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult--attributes","title":"Attributes","text":"<p>validation_results : ValidationResultsDict     Dictionary of validation results for each standards item. validation : ValidationCounts     Statistics about validation success and failures. messages : MessageCollection     Collection of error, warning, and info messages. field_errors : list[str]     Field-level validation errors. validation_details : ValidationDetailsDict     Detailed validation errors per standard. severity_counts : SeverityCountsDict     Count of issues by severity level. control_validation_count : int     Number of controls validated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.field_error_count","title":"<code>field_error_count</code>  <code>property</code>","text":"<p>Number of field-level validation errors.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.has_field_errors","title":"<code>has_field_errors</code>  <code>property</code>","text":"<p>True if any field-level validation errors occurred.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if validation is successful and there are no error messages.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.validated_count","title":"<code>validated_count</code>  <code>property</code>","text":"<p>Return the number of items that have been validated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.validation_rate","title":"<code>validation_rate</code>  <code>property</code>","text":"<p>Validation success rate (0.0 to 1.0).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.get_failed_standards","title":"<code>get_failed_standards()</code>","text":"<p>Get list of standards IDs that failed validation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.get_passed_standards","title":"<code>get_passed_standards()</code>","text":"<p>Get list of standards IDs that passed validation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.get_validation_errors","title":"<code>get_validation_errors(standard_id)</code>","text":"<p>Get validation errors for a specific standard.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationCounts","title":"<code>ValidationCounts</code>  <code>dataclass</code>","text":"<p>Tracks the number of passed and failed validations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationCounts--attributes","title":"Attributes","text":"<p>passed_count : int     Number of items that passed validation. failed_count : int     Number of items that failed validation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationCounts.is_successful","title":"<code>is_successful</code>  <code>property</code>","text":"<p>Return True if there are no failed validations, otherwise False.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationCounts.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Return the rate of passed validations as a float between 0 and 1.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.ValidationCounts.total_validated","title":"<code>total_validated</code>  <code>property</code>","text":"<p>Return the total number of validated items (passed + failed).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results._collect_control_mappings","title":"<code>_collect_control_mappings(standard_id, control, *, valid_targets, mapping_types, invalid_mappings, orphaned_controls)</code>","text":"<p>Collect target ids from a single control, updating counters and issues.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results._extract_control_id","title":"<code>_extract_control_id(control, unknown_index)</code>","text":"<p>Return a string control id or a stable 'unknown-{n}' fallback.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results._process_standard_mappings","title":"<code>_process_standard_mappings(standard_id, standards_data, valid_targets, mapping_types, invalid_mappings, orphaned_controls)</code>","text":"<p>Process mappings for a single standard.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_duplicate","title":"<code>add_duplicate(duplicates, item_id, file_path)</code>","text":"<p>Add a duplicate ID with its file path.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_failed_file","title":"<code>add_failed_file(files, file_path)</code>","text":"<p>Add a failed file.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_framework","title":"<code>add_framework(frameworks, framework)</code>","text":"<p>Add or increment a framework count.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_mapping","title":"<code>add_mapping(result, standard_id, target_id, mapping_type='mapped')</code>","text":"<p>Add a mapping between a standard and target.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_message","title":"<code>add_message(messages, level, message)</code>","text":"<p>Add a message to the message collection.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_processed_file","title":"<code>add_processed_file(files, file_path)</code>","text":"<p>Add a processed file.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_skipped_file","title":"<code>add_skipped_file(files, file_path)</code>","text":"<p>Add a skipped file.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_standard","title":"<code>add_standard(result, standard_id, standards_data, *, file_path=None)</code>","text":"<p>Add successfully loaded standards to the result.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.analyze_mappings","title":"<code>analyze_mappings(result, standards_dict, valid_targets=None)</code>","text":"<p>Analyze standards mappings for consistency and detect issues.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.batch_validate_standards","title":"<code>batch_validate_standards(result, standards_dict)</code>","text":"<p>Validate multiple standards in batch.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_mapping_summary","title":"<code>get_mapping_summary(result)</code>","text":"<p>Generate standards mapping summary.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_standards_loading_summary","title":"<code>get_standards_loading_summary(result)</code>","text":"<p>Generate standards loading summary.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_standards_validation_summary","title":"<code>get_standards_validation_summary(result)</code>","text":"<p>Generate standards validation summary.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.increment_loading_counts","title":"<code>increment_loading_counts(counts, *, succeeded=0, failed=0)</code>","text":"<p>Increment loading counts.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.increment_validation_counts","title":"<code>increment_validation_counts(counts, *, passed=0, failed=0)</code>","text":"<p>Increment validation counts.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.track_invalid_standards_file","title":"<code>track_invalid_standards_file(result, file_path, reason)</code>","text":"<p>Track an invalid standards file.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.track_skipped_standards_file","title":"<code>track_skipped_standards_file(result, file_path, reason)</code>","text":"<p>Track a skipped standards file.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.validate_standard","title":"<code>validate_standard(result, standard_id, standards_data)</code>","text":"<p>Validate a standards definition with comprehensive field validation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.validate_standards_field","title":"<code>validate_standards_field(result, standard_id, field_path, field_value, validation_rule)</code>","text":"<p>Validate a specific standards field.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.with_message_methods","title":"<code>with_message_methods(cls)</code>","text":"<p>Add message methods to result classes.</p> <p>Decorator that adds add_error(), add_warning(), and add_info() methods to any result class with a MessageCollection field.</p>"},{"location":"api/standards/#standards-errors","title":"Standards Errors","text":"<p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors","title":"<code>ci.transparency.cwe.types.standards.errors</code>","text":"<p>Standards domain error types using enhanced base classes.</p> <p>Domain-specific error hierarchy for standards operations. Each error inherits from exactly one enhanced base error class and leverages the flexible context system for standards-specific information.</p> Design principles <ul> <li>Single inheritance: each error extends exactly one base error class</li> <li>Context-rich: uses the flexible context system for standards details</li> <li>Consistent: maintains uniform error formatting across all errors</li> <li>Minimal: leverages base class functionality rather than duplicating code</li> </ul> Usage patterns <ul> <li>File operations \u2192 FileError, LoadingError, ParsingError</li> <li>Validation operations \u2192 ValidationError</li> <li>Processing operations \u2192 OperationError</li> <li>General operations \u2192 BaseTransparencyError</li> </ul> Typical usage <p>from ci.transparency.cwe.types.standards import StandardsValidationError</p> <p>raise StandardsValidationError(     \"Field validation failed\",     item_id=\"NIST-SP-800-53\",     field_path=\"controls[0].id\",     validation_rule=\"required_field\",     file_path=\"nist.yaml\" )</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors--output-field-validation-failed-item-nist-sp-800-53-field-controls0id-rule-required_field-file-nistyaml","title":"Output: \"Field validation failed | Item: NIST-SP-800-53 | Field: controls[0].id | Rule: required_field | File: nist.yaml\"","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.__all__","title":"<code>__all__ = ['StandardsConfigurationError', 'StandardsConstraintViolationError', 'StandardsDuplicateMappingError', 'StandardsFieldValidationError', 'StandardsFileNotFoundError', 'StandardsFormatError', 'StandardsIntegrityError', 'StandardsInvalidFormatError', 'StandardsInvalidMappingError', 'StandardsLoadingError', 'StandardsMappingError', 'StandardsMissingFieldError', 'StandardsParsingError', 'StandardsProcessingError', 'StandardsValidationError']</code>  <code>module-attribute</code>","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.BaseTransparencyError","title":"<code>BaseTransparencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Enhanced base exception for all transparency operations.</p> <p>Provides flexible context tracking for common error patterns without requiring all errors to specify every possible context field.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.BaseTransparencyError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Get contextual information parts for error formatting.</p> <p>Returns context in order of importance: 1. Operation identification (phase, operation, stage) 2. Progress information (processed/total counts) 3. Resource information (timeouts, limits) 4. File/item context 5. Validation context 6. Error flow context (abort reason, error code)</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of context strings (e.g., [\"Phase: validation\", \"Progress: 150/500\"])</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.FileError","title":"<code>FileError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for file-based operations.</p> <p>Convenient base for file loading, parsing, and other file-related errors.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.LoadingError","title":"<code>LoadingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be loaded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.OperationError","title":"<code>OperationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for operations with progress tracking.</p> <p>Convenient base for batch processing, phase validation, and other operations that process multiple items with progress tracking.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.ParsingError","title":"<code>ParsingError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>File could not be parsed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsConfigurationError","title":"<code>StandardsConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Standards configuration error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsConstraintViolationError","title":"<code>StandardsConstraintViolationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Standards constraint validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsDuplicateMappingError","title":"<code>StandardsDuplicateMappingError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Duplicate standards mapping detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFieldValidationError","title":"<code>StandardsFieldValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Standards field-level validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFileNotFoundError","title":"<code>StandardsFileNotFoundError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Standards definition file could not be found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFormatError","title":"<code>StandardsFormatError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>Standards formatting/serialization problem.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsIntegrityError","title":"<code>StandardsIntegrityError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Standards data integrity violation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsInvalidFormatError","title":"<code>StandardsInvalidFormatError</code>","text":"<p>               Bases: <code>FileError</code></p> <p>Standards definition format is invalid or unsupported.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsInvalidMappingError","title":"<code>StandardsInvalidMappingError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Standards mapping references unknown target ID.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsLoadingError","title":"<code>StandardsLoadingError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Base standards loading error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsMappingError","title":"<code>StandardsMappingError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Base standards mapping validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsMissingFieldError","title":"<code>StandardsMissingFieldError</code>","text":"<p>               Bases: <code>LoadingError</code></p> <p>Required standards field is missing from definition.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsParsingError","title":"<code>StandardsParsingError</code>","text":"<p>               Bases: <code>ParsingError</code></p> <p>Standards definition file could not be parsed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsProcessingError","title":"<code>StandardsProcessingError</code>","text":"<p>               Bases: <code>OperationError</code></p> <p>Standards processing operation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsValidationError","title":"<code>StandardsValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Base standards validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for validation operations.</p> <p>Convenient base for schema validation, rule checking, and other validation-related errors.</p>"}]}