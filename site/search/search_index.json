{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Transparency CWE Types","text":"<p>Welcome to the developer documentation for the Civic Transparency CWE Types package.</p> <p>This library provides typed result and error classes for Civic Interconnect projects. It is designed for clarity, immutability, and low-friction collaboration.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Strongly typed dataclasses for loading and validation results.</li> <li>Consistent error hierarchies for CWE, schema, and standards processing.</li> <li>Utility \u201ccommon_result_\u2026\u201d types for batch and multi-phase workflows.</li> </ul> <p>Use the left navigation to explore usage examples and API reference.</p>"},{"location":"usage/","title":"Usage","text":"<p>Install the package in editable (development) mode with uv:</p> <pre><code>uv venv .venv\nuv pip install -e \".[dev,docs]\"\n</code></pre> <p>Run tools without activating the venv:</p> <pre><code>uv run pytest\nuv run ruff check .\n</code></pre> <p>Or activate manually if you want an interactive shell:</p> <pre><code>source .venv/bin/activate       # Linux / macOS / WSL\n.\\.venv\\Scripts\\activate        # Windows PowerShell\n</code></pre>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#importing-types","title":"Importing Types","text":"<pre><code>from ci.transparency.cwe.types.cwe_result_loading import CweLoadingResult\nfrom ci.transparency.cwe.types.base_result import BaseResult, add_error, merge_results\n\nresult = CweLoadingResult()\nprint(result.success_rate)\n</code></pre>"},{"location":"usage/#working-with-base-results","title":"Working with Base Results","text":"<p>The types follow an immutable design - helper functions return new instances:</p> <pre><code>from ci.transparency.cwe.types.base_result import BaseResult, add_error, add_warning\n\n# Start with a clean result\nresult = BaseResult.ok()\nprint(result.has_errors)  # False\n\n# Add an error (returns a new instance)\nresult_with_error = add_error(result, \"Validation failed\")\nprint(result_with_error.has_errors)  # True\nprint(result.has_errors)  # Still False (original unchanged)\n\n# Chain operations\nfinal_result = add_warning(result_with_error, \"Minor issue detected\")\nprint(final_result.total_issues)  # 2 (1 error + 1 warning)\n</code></pre>"},{"location":"usage/#loading-results","title":"Loading Results","text":"<p>Track success/failure rates for batch operations:</p> <pre><code>from ci.transparency.cwe.types.base_result_loading import (\n    BaseLoadingResult, increment_loaded, increment_failed\n)\n\n# Start with empty loading result\nloading_result = BaseLoadingResult()\n\n# Process items (each call returns new instance)\nloading_result = increment_loaded(loading_result)\nloading_result = increment_loaded(loading_result)\nloading_result = increment_failed(loading_result)\n\nprint(f\"Success rate: {loading_result.success_rate}\")  # 0.67 (2/3)\nprint(f\"Total attempted: {loading_result.total_attempted}\")  # 3\n</code></pre>"},{"location":"usage/#validation-results","title":"Validation Results","text":"<p>Track pass/fail validation outcomes:</p> <pre><code>from ci.transparency.cwe.types.base_result_validation import (\n    BaseValidationResult, increment_validation_passed, increment_validation_failed\n)\n\nvalidation_result = BaseValidationResult()\nvalidation_result = increment_validation_passed(validation_result)\nvalidation_result = increment_validation_failed(validation_result)\n\nprint(f\"Pass rate: {validation_result.pass_rate}\")  # 0.5\nprint(f\"Processed: {validation_result.total_processed}\")  # 2\n</code></pre>"},{"location":"usage/#merging-results","title":"Merging Results","text":"<p>Combine multiple results for aggregation:</p> <pre><code>from ci.transparency.cwe.types.base_result import merge_results\n\nresult1 = add_error(BaseResult.ok(), \"Error 1\")\nresult2 = add_warning(BaseResult.ok(), \"Warning 1\")\n\ncombined = merge_results(result1, result2)\nprint(combined.error_count)    # 1\nprint(combined.warning_count)  # 1\nprint(combined.total_issues)   # 2\n</code></pre>"},{"location":"usage/#design-principles","title":"Design Principles","text":"<ul> <li>Immutable: All operations return new instances; originals never change</li> <li>Type-preserving: Helper functions maintain your subclass types</li> <li>Memory-efficient: Uses <code>__slots__</code> for better performance</li> <li>Truthiness: Results evaluate to <code>False</code> when they have errors</li> </ul> <pre><code>if result:\n    print(\"No errors found\")\nelse:\n    print(f\"Found {result.error_count} errors\")\n</code></pre> <p>See the API Reference for the complete list of classes and helper functions.</p>"},{"location":"api/base/","title":"Base Types","text":"<p>Base result types and immutable helpers for transparency operations.</p> <p>This module defines BaseResult, an immutable, slotted abstract class representing the outcome of an operation. It captures three message categories: errors, warnings, and infos, and provides helper functions for safe, functional-style manipulation.</p> <p>Key design points::</p> <pre><code>Immutable: all helpers return a new instance; original objects are never mutated.\nSlots: low memory overhead and faster attribute access.\nType-preserving: helpers use PEP 695 generics so subclasses keep their own type.\nConvenience: boolean properties such as has_errors and truthiness\n  (if result:) make common conditions easy to check.\n</code></pre> <p>Typical usage::</p> <pre><code>from ci.transparency.cwe.types.base_result import BaseResult, add_error\n\nclass MyResult(BaseResult):\n    @property\n    def success_rate(self) -&gt; float:\n        return 1.0 if not self.errors else 0.0\n\nr = MyResult.ok()\nr = add_error(r, \"missing field\")\nbool(r)              # False\nissues = r.total_issues   # 1\n</code></pre> <p>Subclasses implement success_rate to define their own notion of success while inheriting all immutable message-handling utilities.</p> <p>Base loading result types and helpers.</p> <p>This module defines BaseLoadingResult, an immutable, slotted dataclass that tracks the number of items successfully loaded or failed to load. It also provides pure functions for incrementing counts and merging results.</p> <p>Key design points::</p> <pre><code>Immutable: all helpers return a new instance; original objects are never mutated.\nSlots: low memory overhead and faster attribute access.\nType-preserving: helpers use PEP 695 generics so subclasses keep their own type.\nConvenience: boolean properties such as has_errors and truthiness\n  (if result:) make common conditions easy to check.\n</code></pre> <p>Typical usage::</p> <pre><code>from ci.transparency.cwe.types.base_loading_result import (\n    BaseLoadingResult,\n    increment_loaded,\n)\n\nr = BaseLoadingResult()\nr = increment_loaded(r)\nbool(r)               # True if no errors\nattempted = r.total_attempted\n</code></pre> <p>Base validation result types and helpers.</p> <p>This module defines <code>BaseValidationResult</code>, an immutable, slotted dataclass that tracks the number of items that passed or failed validation.  It also provides pure functions for incrementing counts and merging results.</p> <p>Key design points::</p> <pre><code>Immutable: all helpers return a new instance; original objects are never mutated.\nSlots: low memory overhead and faster attribute access.\nType-preserving: helpers use PEP 695 generics so subclasses keep their own type.\nConvenience: boolean properties such as has_errors and truthiness\n  (if result:) make common conditions easy to check.\n</code></pre> <p>Typical usage::</p> <pre><code>from ci.transparency.cwe.types.base_result import BaseResult, add_error\n\nclass MyResult(BaseResult):\n    @property\n    def success_rate(self) -&gt; float:\n        return 1.0 if not self.errors else 0.0\n\nr = MyResult.ok()\nr = add_error(r, \"missing field\")\nbool(r)            # False\nissues = r.total_issues   # 1\n</code></pre> <p>Subclasses implement success_rate to define their own notion of success while inheriting all immutable message-handling utilities.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult","title":"<code>BaseResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Immutable base result for operations.</p> Notes <ul> <li><code>total_issues</code> includes <code>errors</code> and <code>warnings</code>, and excludes <code>infos</code>.</li> </ul>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Number of errors.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>True if any errors are present.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.has_infos","title":"<code>has_infos</code>  <code>property</code>","text":"<p>True if any informational messages are present.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>True if any warnings are present.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Number of infos.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.success","title":"<code>success</code>  <code>property</code>","text":"<p>True if no errors occurred.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.success_rate","title":"<code>success_rate</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Ratio in [0, 1] indicating operation success (defined by subclasses).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.total_issues","title":"<code>total_issues</code>  <code>property</code>","text":"<p>Errors + warnings.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Errors + warnings + infos.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Number of warnings.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.BaseResult.ok","title":"<code>ok()</code>  <code>classmethod</code>","text":"<p>Return a successful result.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.add_error","title":"<code>add_error(result, error)</code>","text":"<p>Return a copy of <code>result</code> with <code>error</code> appended.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.add_info","title":"<code>add_info(result, info)</code>","text":"<p>Return a copy of <code>result</code> with <code>info</code> appended.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.add_warning","title":"<code>add_warning(result, warning)</code>","text":"<p>Return a copy of <code>result</code> with <code>warning</code> appended.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.extend_errors","title":"<code>extend_errors(result, *errors)</code>","text":"<p>Return a copy with all <code>errors</code> appended.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.extend_infos","title":"<code>extend_infos(result, *infos)</code>","text":"<p>Return a copy with all <code>infos</code> appended.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.extend_warnings","title":"<code>extend_warnings(result, *warnings)</code>","text":"<p>Return a copy with all <code>warnings</code> appended.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.merge_many","title":"<code>merge_many(first, *rest)</code>","text":"<p>Variadic merge; returns a single result of the same concrete type.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result.merge_results","title":"<code>merge_results(r1, r2)</code>","text":"<p>Return <code>r1</code> with messages merged from <code>r2</code>.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.BaseLoadingResult","title":"<code>BaseLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseResult</code></p> <p>Base for all loading operations.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.BaseLoadingResult.failure_rate","title":"<code>failure_rate</code>  <code>property</code>","text":"<p>Calculate loading failure rate.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.BaseLoadingResult.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Calculate loading success rate.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.BaseLoadingResult.total_attempted","title":"<code>total_attempted</code>  <code>property</code>","text":"<p>Total number of items attempted to load.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.BaseLoadingResult.from_counts","title":"<code>from_counts(loaded=0, failed=0)</code>  <code>classmethod</code>","text":"<p>Create a new result from counts.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.add_loading_counts","title":"<code>add_loading_counts(result, loaded, failed)</code>","text":"<p>Return a copy with both counts increased.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.increment_failed","title":"<code>increment_failed(result)</code>","text":"<p>Return a copy with failed_count += 1.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.increment_loaded","title":"<code>increment_loaded(result)</code>","text":"<p>Return a copy with loaded_count += 1.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.merge_loading","title":"<code>merge_loading(a, b)</code>","text":"<p>Return <code>a</code> with counts/messages merged from <code>b</code>.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_loading.merge_many_loading","title":"<code>merge_many_loading(first, *rest)</code>","text":"<p>Variadic merge; returns a single result of the same concrete type.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult","title":"<code>BaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseResult</code></p> <p>Base for all validation operations.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult.failure_rate","title":"<code>failure_rate</code>  <code>property</code>","text":"<p>Calculate validation failure rate.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Alias of success_rate.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Calculate validation success rate.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult.total_processed","title":"<code>total_processed</code>  <code>property</code>","text":"<p>Total number of items processed (passed and failed).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult.from_bools","title":"<code>from_bools(outcomes)</code>  <code>classmethod</code>","text":"<p>Create a new result from boolean outcomes.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.BaseValidationResult.from_counts","title":"<code>from_counts(passed=0, failed=0)</code>  <code>classmethod</code>","text":"<p>Create a new result from counts.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.add_validation_counts","title":"<code>add_validation_counts(result, passed, failed)</code>","text":"<p>Return a copy with both counts increased.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.increment_validation_failed","title":"<code>increment_validation_failed(result)</code>","text":"<p>Return a copy with failed_count += 1.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.increment_validation_passed","title":"<code>increment_validation_passed(result)</code>","text":"<p>Return a copy with passed_count += 1.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base_result_validation.merge_validation","title":"<code>merge_validation(a, b)</code>","text":"<p>Return <code>a</code> with counts/messages merged from <code>b</code>.</p>"},{"location":"api/common/","title":"Common Types","text":""},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch","title":"<code>ci.transparency.cwe.types.common_result_loading_batch</code>","text":"<p>Common batch loading result type.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.BatchLoadingResult","title":"<code>BatchLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Results from generic batch file loading operations.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.BatchLoadingResult.mapping_count","title":"<code>mapping_count</code>  <code>property</code>","text":"<p>Number of mappings successfully loaded.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.BatchLoadingResult.total_files_processed","title":"<code>total_files_processed</code>  <code>property</code>","text":"<p>Total number of files processed (loaded + skipped).</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.add_mapping","title":"<code>add_mapping(result, name, data, file_path=None)</code>","text":"<p>Return a copy with a successfully loaded mapping added.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.add_processed_file","title":"<code>add_processed_file(result, file_path)</code>","text":"<p>Return a copy with a processed file recorded (success or skip).</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.add_skipped_file","title":"<code>add_skipped_file(result, file_path, reason)</code>","text":"<p>Return a copy with a skipped file recorded and a warning appended.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.get_batch_loading_summary","title":"<code>get_batch_loading_summary(result)</code>","text":"<p>Summary of batch loading operation statistics.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.increment_file_type","title":"<code>increment_file_type(result, file_type)</code>","text":"<p>Return a copy with the count for a specific file type incremented.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_loading_batch.update_file_type_stats","title":"<code>update_file_type_stats(result, file_type, count)</code>","text":"<p>Return a copy with file type statistics updated.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase","title":"<code>ci.transparency.cwe.types.common_result_validation_multiphase</code>","text":"<p>Common multi-phase validation result type.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult","title":"<code>MultiPhaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from multi-phase validation operations.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult.failed_phases","title":"<code>failed_phases</code>  <code>property</code>","text":"<p>Names of phases that had failures.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult.phase_count","title":"<code>phase_count</code>  <code>property</code>","text":"<p>Number of validation phases executed.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult.successful_phases","title":"<code>successful_phases</code>  <code>property</code>","text":"<p>Names of phases that completed successfully.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.add_phase_result","title":"<code>add_phase_result(result, phase_result, phase_name='')</code>","text":"<p>Return a copy with a phase validation result added.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.get_multi_phase_summary","title":"<code>get_multi_phase_summary(result)</code>","text":"<p>Summary of multi-phase validation statistics.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.get_phase_by_name","title":"<code>get_phase_by_name(result, phase_name)</code>","text":"<p>Get a specific phase result by name.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.set_overall_stat","title":"<code>set_overall_stat(result, key, value)</code>","text":"<p>Return a copy with a specific overall statistic set.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.update_overall_stats","title":"<code>update_overall_stats(result, stats)</code>","text":"<p>Return a copy with overall validation statistics updated.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase","title":"<code>ci.transparency.cwe.types.common_result_validation_phase</code>","text":"<p>Common single phase validation result type.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.PhaseValidationResult","title":"<code>PhaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from a single validation phase.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.PhaseValidationResult.items_count","title":"<code>items_count</code>  <code>property</code>","text":"<p>Number of items processed in this phase.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.add_processed_item","title":"<code>add_processed_item(result, item_id)</code>","text":"<p>Return a copy with an item that was processed in this phase added.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.get_phase_summary","title":"<code>get_phase_summary(result)</code>","text":"<p>Summary of single-phase validation statistics.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.set_phase_detail","title":"<code>set_phase_detail(result, key, value)</code>","text":"<p>Return a copy with a specific phase detail set.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.set_phase_info","title":"<code>set_phase_info(result, phase_name, validation_type='')</code>","text":"<p>Return a copy with phase identification information set.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.update_phase_details","title":"<code>update_phase_details(result, details)</code>","text":"<p>Return a copy with phase-specific details updated.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase","title":"<code>ci.transparency.cwe.types.common_result_validation_phase</code>","text":"<p>Common single phase validation result type.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.PhaseValidationResult","title":"<code>PhaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from a single validation phase.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.PhaseValidationResult.items_count","title":"<code>items_count</code>  <code>property</code>","text":"<p>Number of items processed in this phase.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.add_processed_item","title":"<code>add_processed_item(result, item_id)</code>","text":"<p>Return a copy with an item that was processed in this phase added.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.get_phase_summary","title":"<code>get_phase_summary(result)</code>","text":"<p>Summary of single-phase validation statistics.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.set_phase_detail","title":"<code>set_phase_detail(result, key, value)</code>","text":"<p>Return a copy with a specific phase detail set.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.set_phase_info","title":"<code>set_phase_info(result, phase_name, validation_type='')</code>","text":"<p>Return a copy with phase identification information set.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_phase.update_phase_details","title":"<code>update_phase_details(result, details)</code>","text":"<p>Return a copy with phase-specific details updated.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase","title":"<code>ci.transparency.cwe.types.common_result_validation_multiphase</code>","text":"<p>Common multi-phase validation result type.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult","title":"<code>MultiPhaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from multi-phase validation operations.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult.failed_phases","title":"<code>failed_phases</code>  <code>property</code>","text":"<p>Names of phases that had failures.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult.phase_count","title":"<code>phase_count</code>  <code>property</code>","text":"<p>Number of validation phases executed.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.MultiPhaseValidationResult.successful_phases","title":"<code>successful_phases</code>  <code>property</code>","text":"<p>Names of phases that completed successfully.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.add_phase_result","title":"<code>add_phase_result(result, phase_result, phase_name='')</code>","text":"<p>Return a copy with a phase validation result added.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.get_multi_phase_summary","title":"<code>get_multi_phase_summary(result)</code>","text":"<p>Summary of multi-phase validation statistics.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.get_phase_by_name","title":"<code>get_phase_by_name(result, phase_name)</code>","text":"<p>Get a specific phase result by name.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.set_overall_stat","title":"<code>set_overall_stat(result, key, value)</code>","text":"<p>Return a copy with a specific overall statistic set.</p>"},{"location":"api/common/#ci.transparency.cwe.types.common_result_validation_multiphase.update_overall_stats","title":"<code>update_overall_stats(result, stats)</code>","text":"<p>Return a copy with overall validation statistics updated.</p>"},{"location":"api/cwe/","title":"CWE Types","text":""},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading","title":"<code>ci.transparency.cwe.types.cwe_error_loading</code>","text":"<p>CWE loading error types.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading.CweDuplicateIdError","title":"<code>CweDuplicateIdError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>Duplicate CWE ID found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading.CweFileNotFoundError","title":"<code>CweFileNotFoundError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>CWE file could not be found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading.CweInvalidIdError","title":"<code>CweInvalidIdError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>Invalid CWE ID format.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading.CweLoadingError","title":"<code>CweLoadingError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for CWE loading operations.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading.CweParsingError","title":"<code>CweParsingError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>CWE file could not be parsed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_loading.CweSchemaError","title":"<code>CweSchemaError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>CWE data does not match the expected schema.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation","title":"<code>ci.transparency.cwe.types.cwe_error_validation</code>","text":"<p>CWE validation error types.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweCircularReferenceError","title":"<code>CweCircularReferenceError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>Circular reference detected in CWE relationships.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweIntegrityError","title":"<code>CweIntegrityError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE data integrity violation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweMissingReferenceError","title":"<code>CweMissingReferenceError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>Referenced CWE does not exist.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweOrphanedError","title":"<code>CweOrphanedError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE has no parent relationships.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweRelationshipError","title":"<code>CweRelationshipError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE relationship validation error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweSchemaValidationError","title":"<code>CweSchemaValidationError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE data fails schema validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_error_validation.CweValidationError","title":"<code>CweValidationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for CWE validation operations.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading","title":"<code>ci.transparency.cwe.types.cwe_result_loading</code>","text":"<p>CWE loading result type.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.CweLoadingResult","title":"<code>CweLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Results from CWE definition loading operations.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.CweLoadingResult.cwe_count","title":"<code>cwe_count</code>  <code>property</code>","text":"<p>Number of CWEs successfully loaded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.CweLoadingResult.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>True if duplicate CWE IDs were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.CweLoadingResult.loaded_cwe_ids","title":"<code>loaded_cwe_ids</code>  <code>property</code>","text":"<p>All loaded CWE IDs.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.add_cwe","title":"<code>add_cwe(result, cwe_id, cwe_data)</code>","text":"<p>Return a copy with a successfully loaded CWE added.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.add_duplicate_id","title":"<code>add_duplicate_id(result, cwe_id)</code>","text":"<p>Return a copy with a duplicate CWE ID recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.add_invalid_file","title":"<code>add_invalid_file(result, file_path)</code>","text":"<p>Return a copy with an invalid file recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.add_skipped_file","title":"<code>add_skipped_file(result, file_path)</code>","text":"<p>Return a copy with a skipped file recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_loading.get_loading_summary","title":"<code>get_loading_summary(result)</code>","text":"<p>Summary of CWE loading statistics.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation","title":"<code>ci.transparency.cwe.types.cwe_result_validation</code>","text":"<p>CWE validation result type.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.CweValidationResult","title":"<code>CweValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from CWE definition validation operations.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.CweValidationResult.has_integrity_errors","title":"<code>has_integrity_errors</code>  <code>property</code>","text":"<p>True if integrity errors occurred.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.CweValidationResult.has_schema_errors","title":"<code>has_schema_errors</code>  <code>property</code>","text":"<p>True if schema validation errors occurred.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.add_integrity_error","title":"<code>add_integrity_error(result, error)</code>","text":"<p>Return a copy with an integrity validation error recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.add_invalid_cwe","title":"<code>add_invalid_cwe(result, cwe_id, error)</code>","text":"<p>Return a copy with an invalid CWE and error details recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.add_schema_error","title":"<code>add_schema_error(result, error)</code>","text":"<p>Return a copy with a schema validation error recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.add_validated_cwe","title":"<code>add_validated_cwe(result, cwe_id)</code>","text":"<p>Return a copy with a successfully validated CWE added.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation.get_validation_summary","title":"<code>get_validation_summary(result)</code>","text":"<p>Summary of validation statistics.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship","title":"<code>ci.transparency.cwe.types.cwe_result_validation_relationship</code>","text":"<p>CWE relationship validation result type.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.CweRelationshipValidationResult","title":"<code>CweRelationshipValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from CWE relationship validation operations.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.CweRelationshipValidationResult.has_broken_refs","title":"<code>has_broken_refs</code>  <code>property</code>","text":"<p>True if broken references were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.CweRelationshipValidationResult.has_circular_refs","title":"<code>has_circular_refs</code>  <code>property</code>","text":"<p>True if circular references were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.CweRelationshipValidationResult.has_orphaned_cwes","title":"<code>has_orphaned_cwes</code>  <code>property</code>","text":"<p>True if orphaned CWEs were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.CweRelationshipValidationResult.total_relationships","title":"<code>total_relationships</code>  <code>property</code>","text":"<p>Total number of relationships validated.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.add_broken_reference","title":"<code>add_broken_reference(result, parent_id, missing_child_id)</code>","text":"<p>Return a copy with a broken reference recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.add_circular_reference","title":"<code>add_circular_reference(result, cwe_id1, cwe_id2)</code>","text":"<p>Return a copy with a circular reference recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.add_orphaned_cwe","title":"<code>add_orphaned_cwe(result, cwe_id)</code>","text":"<p>Return a copy with an orphaned CWE recorded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.add_validated_relationship","title":"<code>add_validated_relationship(result, parent_id, child_id)</code>","text":"<p>Return a copy with a successfully validated relationship added.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.get_relationship_summary","title":"<code>get_relationship_summary(result)</code>","text":"<p>Summary of relationship validation statistics.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe_result_validation_relationship.update_relationship_stats","title":"<code>update_relationship_stats(result, stats)</code>","text":"<p>Return a copy with relationship statistics updated.</p>"},{"location":"api/schema/","title":"Schema Types","text":""},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze","title":"<code>ci.transparency.cwe.types.schema_error_freeze</code>","text":"<p>Schema freeze operation error types.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaFileNotFoundError","title":"<code>SchemaFileNotFoundError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Schema file not found during freeze operation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaFreezeError","title":"<code>SchemaFreezeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for schema freeze operations.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaHashError","title":"<code>SchemaHashError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Error computing schema file hash.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaIntegrityError","title":"<code>SchemaIntegrityError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Schema file integrity check failed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaPermissionError","title":"<code>SchemaPermissionError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Permission denied during schema freeze operation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaRepoDetectionError","title":"<code>SchemaRepoDetectionError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Could not detect repository root.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_freeze.SchemaSourceValidationError","title":"<code>SchemaSourceValidationError</code>","text":"<p>               Bases: <code>SchemaFreezeError</code></p> <p>Schema source validation failed.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading","title":"<code>ci.transparency.cwe.types.schema_error_loading</code>","text":"<p>Schema loading error types.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaBundleError","title":"<code>SchemaBundleError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Error working with schema bundle.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaConfigurationError","title":"<code>SchemaConfigurationError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema configuration is invalid.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaLoadingError","title":"<code>SchemaLoadingError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for schema loading operations.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaNotFoundError","title":"<code>SchemaNotFoundError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema file could not be found.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaParsingError","title":"<code>SchemaParsingError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema file could not be parsed as JSON.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaSearchError","title":"<code>SchemaSearchError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Error during schema file search.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_loading.SchemaVersionError","title":"<code>SchemaVersionError</code>","text":"<p>               Bases: <code>SchemaLoadingError</code></p> <p>Schema version not supported or invalid.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation","title":"<code>ci.transparency.cwe.types.schema_error_validation</code>","text":"<p>Schema validation error types.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.BatchValidationError","title":"<code>BatchValidationError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Error during batch validation operation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.DocumentValidationError","title":"<code>DocumentValidationError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Document fails schema validation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.SchemaCompilationError","title":"<code>SchemaCompilationError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Schema could not be compiled for validation.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.SchemaMetaValidationError","title":"<code>SchemaMetaValidationError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Schema itself is invalid (meta-validation failed).</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.SchemaUnavailableError","title":"<code>SchemaUnavailableError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Required schema is not available.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.SchemaValidationError","title":"<code>SchemaValidationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for schema validation operations.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_error_validation.ValidationContextError","title":"<code>ValidationContextError</code>","text":"<p>               Bases: <code>SchemaValidationError</code></p> <p>Error setting up validation context.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading","title":"<code>ci.transparency.cwe.types.schema_result_loading</code>","text":"<p>Schema loading result type.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.SchemaLoadingResult","title":"<code>SchemaLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Results from schema loading operations.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.SchemaLoadingResult.available_schemas","title":"<code>available_schemas</code>  <code>property</code>","text":"<p>Names of successfully loaded schemas.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.SchemaLoadingResult.has_cwe_schema","title":"<code>has_cwe_schema</code>  <code>property</code>","text":"<p>True if the CWE schema was loaded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.SchemaLoadingResult.has_mapping_schema","title":"<code>has_mapping_schema</code>  <code>property</code>","text":"<p>True if the mapping schema was loaded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.SchemaLoadingResult.schema_count","title":"<code>schema_count</code>  <code>property</code>","text":"<p>Number of schemas successfully loaded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.add_failed_schema","title":"<code>add_failed_schema(result, schema_name, error)</code>","text":"<p>Return a copy with a failed schema load recorded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.add_loaded_schema","title":"<code>add_loaded_schema(result, schema_name, schema_data, source_path)</code>","text":"<p>Return a copy with a successfully loaded schema added.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.add_search_path","title":"<code>add_search_path(result, path)</code>","text":"<p>Return a copy with a searched path recorded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.get_schema_loading_summary","title":"<code>get_schema_loading_summary(result)</code>","text":"<p>Summary of schema loading statistics.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_loading.set_catalog_version","title":"<code>set_catalog_version(result, version)</code>","text":"<p>Return a copy with the catalog version set.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation","title":"<code>ci.transparency.cwe.types.schema_result_validation</code>","text":"<p>Schema validation result type.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.SchemaValidationResult","title":"<code>SchemaValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from schema validation operations.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.SchemaValidationResult.document_count","title":"<code>document_count</code>  <code>property</code>","text":"<p>Total number of documents validated.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.SchemaValidationResult.has_schema_errors","title":"<code>has_schema_errors</code>  <code>property</code>","text":"<p>True if schema-level errors occurred.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.add_invalid_document","title":"<code>add_invalid_document(result, document_path, error)</code>","text":"<p>Return a copy with an invalid document and error details recorded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.add_schema_error","title":"<code>add_schema_error(result, error)</code>","text":"<p>Return a copy with a schema-level error recorded.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.add_validated_document","title":"<code>add_validated_document(result, document_path)</code>","text":"<p>Return a copy with a successfully validated document added.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.get_schema_validation_statistics","title":"<code>get_schema_validation_statistics(result)</code>","text":"<p>Summary of schema validation statistics.</p>"},{"location":"api/schema/#ci.transparency.cwe.types.schema_result_validation.set_schema_name","title":"<code>set_schema_name(result, schema_name)</code>","text":"<p>Return a copy with the schema name set.</p>"},{"location":"api/standards/","title":"Standards Types","text":""},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format","title":"<code>ci.transparency.cwe.types.standards_error_format</code>","text":"<p>Standards format error types.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.FormatCompatibilityError","title":"<code>FormatCompatibilityError</code>","text":"<p>               Bases: <code>StandardsFormatError</code></p> <p>Format compatibility check failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.FormatDetectionError","title":"<code>FormatDetectionError</code>","text":"<p>               Bases: <code>StandardsFormatError</code></p> <p>Could not detect standards mapping format.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.FormatNormalizationError","title":"<code>FormatNormalizationError</code>","text":"<p>               Bases: <code>StandardsFormatError</code></p> <p>Error normalizing standards format.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.FormatStructureError","title":"<code>FormatStructureError</code>","text":"<p>               Bases: <code>StandardsFormatError</code></p> <p>Standards mapping has invalid structure for format.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.FormatValidationError","title":"<code>FormatValidationError</code>","text":"<p>               Bases: <code>StandardsFormatError</code></p> <p>Standards mapping format validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.StandardsFormatError","title":"<code>StandardsFormatError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for standards format operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_format.UnsupportedFormatError","title":"<code>UnsupportedFormatError</code>","text":"<p>               Bases: <code>StandardsFormatError</code></p> <p>Standards mapping format is not supported.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading","title":"<code>ci.transparency.cwe.types.standards_error_loading</code>","text":"<p>Standards loading error types.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.FrameworkNotFoundError","title":"<code>FrameworkNotFoundError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Required standards framework not found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.InvalidMappingStructureError","title":"<code>InvalidMappingStructureError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards mapping has invalid structure.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.MappingFileNotFoundError","title":"<code>MappingFileNotFoundError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards mapping file could not be found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.MappingMetadataError","title":"<code>MappingMetadataError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Error with standards mapping metadata.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.MappingParsingError","title":"<code>MappingParsingError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards mapping file could not be parsed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.MappingValidationError","title":"<code>MappingValidationError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards mapping validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_loading.StandardsLoadingError","title":"<code>StandardsLoadingError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for standards loading operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation","title":"<code>ci.transparency.cwe.types.standards_error_validation</code>","text":"<p>Standards validation error types.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.CodeValidationError","title":"<code>CodeValidationError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards code format validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.CompletenessError","title":"<code>CompletenessError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards completeness check failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.CoverageError","title":"<code>CoverageError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards coverage validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.CrossReferenceError","title":"<code>CrossReferenceError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards cross-reference validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.FrameworkValidationError","title":"<code>FrameworkValidationError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards framework validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.MappingConsistencyError","title":"<code>MappingConsistencyError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards mapping consistency error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation.StandardsValidationError","title":"<code>StandardsValidationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for standards validation operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping","title":"<code>ci.transparency.cwe.types.standards_error_validation_mapping</code>","text":"<p>Standards mapping validation error types.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.FrameworkNameError","title":"<code>FrameworkNameError</code>","text":"<p>               Bases: <code>MappingValidationError</code></p> <p>Framework name validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.ListValidationError","title":"<code>ListValidationError</code>","text":"<p>               Bases: <code>MappingValidationError</code></p> <p>List-based mapping validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.MappingAnalysisError","title":"<code>MappingAnalysisError</code>","text":"<p>               Bases: <code>MappingValidationError</code></p> <p>Mapping analysis operation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.MappingDataConsistencyError","title":"<code>MappingDataConsistencyError</code>","text":"<p>               Bases: <code>MappingValidationError</code></p> <p>Mapping consistency check failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.MappingFormatError","title":"<code>MappingFormatError</code>","text":"<p>               Bases: <code>MappingValidationError</code></p> <p>Mapping format validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.MappingStructureError","title":"<code>MappingStructureError</code>","text":"<p>               Bases: <code>MappingValidationError</code></p> <p>Mapping structure is invalid.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_error_validation_mapping.MappingValidationError","title":"<code>MappingValidationError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Base exception for mapping validation operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping","title":"<code>ci.transparency.cwe.types.standards_result_analysis_mapping</code>","text":"<p>Standards mapping analysis result type.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.MappingAnalysisResult","title":"<code>MappingAnalysisResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseResult</code></p> <p>Results from standards mapping analysis operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.MappingAnalysisResult.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Number of frameworks analyzed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.MappingAnalysisResult.has_inconsistencies","title":"<code>has_inconsistencies</code>  <code>property</code>","text":"<p>True if mapping inconsistencies were found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.MappingAnalysisResult.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Calculate analysis success rate.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.add_framework_with_lists","title":"<code>add_framework_with_lists(result, framework)</code>","text":"<p>Return a copy with a framework that has list-based mappings added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.add_framework_with_nonempty_lists","title":"<code>add_framework_with_nonempty_lists(result, framework)</code>","text":"<p>Return a copy with a framework that has non-empty list-based mappings added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.get_analysis_summary","title":"<code>get_analysis_summary(result)</code>","text":"<p>Summary of mapping analysis statistics.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.get_frameworks_with_lists","title":"<code>get_frameworks_with_lists(result)</code>","text":"<p>Frameworks that have list-based mappings.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.get_frameworks_with_nonempty_lists","title":"<code>get_frameworks_with_nonempty_lists(result)</code>","text":"<p>Frameworks that have non-empty list-based mappings.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.increment_analysis_stat","title":"<code>increment_analysis_stat(result, stat_name, increment=1)</code>","text":"<p>Return a copy with a specific analysis statistic incremented.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.update_analysis_stats","title":"<code>update_analysis_stats(result, stats)</code>","text":"<p>Return a copy with analysis statistics updated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.update_consistency_results","title":"<code>update_consistency_results(result, cwe_id, is_consistent)</code>","text":"<p>Return a copy with consistency results updated for a CWE mapping.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_analysis_mapping.update_mapping_structure_analysis","title":"<code>update_mapping_structure_analysis(result, cwe_id, analysis)</code>","text":"<p>Return a copy with mapping structure analysis updated for a CWE.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction","title":"<code>ci.transparency.cwe.types.standards_result_extraction</code>","text":"<p>Standards extraction result type.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.ExtractionResult","title":"<code>ExtractionResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseResult</code></p> <p>Results from standards code extraction operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.ExtractionResult.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Number of frameworks processed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.ExtractionResult.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Calculate extraction success rate.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.ExtractionResult.total_codes_extracted","title":"<code>total_codes_extracted</code>  <code>property</code>","text":"<p>Total number of codes extracted across all frameworks.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.add_extracted_codes","title":"<code>add_extracted_codes(result, framework, codes, framework_type=None, data_format=None)</code>","text":"<p>Return a copy with extracted codes for a framework added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.detect_data_format","title":"<code>detect_data_format(result, framework, data_format)</code>","text":"<p>Return a copy with the detected data format recorded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.detect_framework_type","title":"<code>detect_framework_type(result, framework, framework_type)</code>","text":"<p>Return a copy with the detected framework type recorded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.get_extraction_summary","title":"<code>get_extraction_summary(result)</code>","text":"<p>Summary of extraction operation statistics.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.increment_extraction_stat","title":"<code>increment_extraction_stat(result, stat_name, increment=1)</code>","text":"<p>Return a copy with a specific extraction statistic incremented.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_extraction.update_extraction_stats","title":"<code>update_extraction_stats(result, stats)</code>","text":"<p>Return a copy with extraction statistics updated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading","title":"<code>ci.transparency.cwe.types.standards_result_loading</code>","text":"<p>Standards loading result type.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.StandardsLoadingResult","title":"<code>StandardsLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Results from standards mapping loading operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.StandardsLoadingResult.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Number of frameworks with mappings.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.StandardsLoadingResult.mapping_count","title":"<code>mapping_count</code>  <code>property</code>","text":"<p>Number of mappings successfully loaded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.StandardsLoadingResult.total_framework_mappings","title":"<code>total_framework_mappings</code>  <code>property</code>","text":"<p>Total number of framework mappings across all frameworks.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.add_failed_file","title":"<code>add_failed_file(result, file_path, error)</code>","text":"<p>Return a copy with a failed file load recorded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.add_mapping","title":"<code>add_mapping(result, mapping_name, mapping_data, file_path)</code>","text":"<p>Return a copy with a successfully loaded mapping added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.get_mapping_statistics","title":"<code>get_mapping_statistics(result)</code>","text":"<p>Return mapping loading statistics.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.get_standards_loading_summary","title":"<code>get_standards_loading_summary(result)</code>","text":"<p>Human-readable summary of loading results.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.update_format_distribution","title":"<code>update_format_distribution(result, format_name, count)</code>","text":"<p>Return a copy with format distribution updated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_loading.update_framework_coverage","title":"<code>update_framework_coverage(result, framework, count)</code>","text":"<p>Return a copy with framework coverage updated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation","title":"<code>ci.transparency.cwe.types.standards_result_validation</code>","text":"<p>Standards validation result type.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.StandardsValidationResult","title":"<code>StandardsValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Results from standards mapping validation operations.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.StandardsValidationResult.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Number of frameworks validated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.StandardsValidationResult.has_coverage_gaps","title":"<code>has_coverage_gaps</code>  <code>property</code>","text":"<p>True if coverage gaps were found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.StandardsValidationResult.has_cross_reference_errors","title":"<code>has_cross_reference_errors</code>  <code>property</code>","text":"<p>True if cross-reference errors were found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.add_coverage_gap","title":"<code>add_coverage_gap(result, framework, missing_codes)</code>","text":"<p>Return a copy with a coverage gap for a framework recorded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.add_cross_reference_error","title":"<code>add_cross_reference_error(result, error)</code>","text":"<p>Return a copy with a cross-reference error recorded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.add_invalid_code","title":"<code>add_invalid_code(result, code)</code>","text":"<p>Return a copy with an invalid code added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.add_invalid_framework","title":"<code>add_invalid_framework(result, framework, error)</code>","text":"<p>Return a copy with an invalid framework and error details recorded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.add_validated_code","title":"<code>add_validated_code(result, code)</code>","text":"<p>Return a copy with a successfully validated code added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.add_validated_framework","title":"<code>add_validated_framework(result, framework)</code>","text":"<p>Return a copy with a successfully validated framework added.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.get_standards_coverage_statistics","title":"<code>get_standards_coverage_statistics(result)</code>","text":"<p>Standards coverage statistics.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards_result_validation.get_validation_summary_report","title":"<code>get_validation_summary_report(result)</code>","text":"<p>Human-readable validation summary.</p>"}]}
