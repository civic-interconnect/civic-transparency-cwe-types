{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Usage Guide","text":"<p>This guide covers common patterns for using the Civic Transparency CWE Types library.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install civic-transparency-cwe-types\n</code></pre> <p>For development:</p> <pre><code>pip install \"civic-transparency-cwe-types[dev]\"\n</code></pre>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#immutability","title":"Immutability","text":"<p>All operations return new instances - originals are never modified:</p> <pre><code>from ci.transparency.cwe.types.base import BaseResult, add_error\n\noriginal = BaseResult()\nwith_error = add_error(original, \"Failed validation\")\n\nprint(original.has_errors)    # False\nprint(with_error.has_errors)  # True\n</code></pre>"},{"location":"#type-preservation","title":"Type Preservation","text":"<p>Helper functions maintain your specific result types:</p> <pre><code>from ci.transparency.cwe.types.cwe import CweLoadingResult, add_cwe\n\n# CweLoadingResult stays CweLoadingResult\ncwe_result = CweLoadingResult()\nupdated = add_cwe(cwe_result, \"CWE-79\", {\"id\": \"CWE-79\", \"name\": \"XSS\"})\nprint(type(updated))  #\n</code></pre>"},{"location":"#working-with-base-types","title":"Working with Base Types","text":""},{"location":"#basic-result-operations","title":"Basic Result Operations","text":"<pre><code>from ci.transparency.cwe.types.base import (\n    BaseResult, add_error, add_warning, add_info\n)\n\n# Start clean\nresult = BaseResult()\n\n# Add different message types\nresult = add_error(result, \"Critical failure\")\nresult = add_warning(result, \"Potential issue\")\nresult = add_info(result, \"Processing complete\")\n\n# Check status\nprint(f\"Errors: {result.error_count}\")\nprint(f\"Warnings: {result.warning_count}\")\nprint(f\"Total issues: {result.total_issues}\")\nprint(f\"Has problems: {not bool(result)}\")  # Results are falsy when they have errors\n</code></pre>"},{"location":"#loading-operations","title":"Loading Operations","text":"<pre><code>from ci.transparency.cwe.types.base import BaseLoadingResult\n\n# Track loading progress\nloading = BaseLoadingResult()\nloading = loading.increment_loaded()  # Or use helper functions\nloading = loading.increment_loaded()\nloading = loading.increment_failed()\n\nprint(f\"Success rate: {loading.success_rate:.2%}\")\nprint(f\"Total attempted: {loading.total_attempted}\")\n</code></pre>"},{"location":"#validation-operations","title":"Validation Operations","text":"<pre><code>from ci.transparency.cwe.types.base import BaseValidationResult\n\nvalidation = BaseValidationResult()\nvalidation = validation.increment_passed()\nvalidation = validation.increment_failed()\n\nprint(f\"Pass rate: {validation.success_rate:.2%}\")\nprint(f\"Total validated: {validation.total_processed}\")\n</code></pre>"},{"location":"#cwe-domain-operations","title":"CWE Domain Operations","text":""},{"location":"#loading-cwe-data","title":"Loading CWE Data","text":"<pre><code>from ci.transparency.cwe.types.cwe import (\n    CweLoadingResult, add_cwe, track_duplicate_cwe\n)\nfrom pathlib import Path\n\nresult = CweLoadingResult()\n\n# Add CWE definitions\ncwe_data = {\n    \"id\": \"CWE-79\",\n    \"name\": \"Cross-site Scripting\",\n    \"category\": \"injection\",\n    \"relationships\": [\n        {\"cwe_id\": \"CWE-80\", \"type\": \"ChildOf\"}\n    ]\n}\nresult = add_cwe(result, \"CWE-79\", cwe_data, file_path=Path(\"cwe-79.yaml\"))\n\n# Handle duplicates\nresult = track_duplicate_cwe(result, \"CWE-79\", Path(\"duplicate.yaml\"))\n\n# Check results\nprint(f\"CWEs loaded: {result.cwe_count}\")\nprint(f\"Duplicates found: {result.duplicate_count}\")\nprint(f\"Has CWE-79: {result.has_cwe('CWE-79')}\")\n</code></pre>"},{"location":"#cwe-validation","title":"CWE Validation","text":"<pre><code>from ci.transparency.cwe.types.cwe import (\n    CweValidationResult, validate_cwe, batch_validate_cwes\n)\n\nvalidation = CweValidationResult()\n\n# Validate individual CWE\ncwe_data = {\"id\": \"CWE-79\", \"name\": \"XSS\", \"category\": \"injection\"}\nvalidation = validate_cwe(validation, \"CWE-79\", cwe_data)\n\n# Batch validation\ncwe_dict = {\n    \"CWE-79\": {\"id\": \"CWE-79\", \"name\": \"XSS\"},\n    \"CWE-89\": {\"id\": \"CWE-89\", \"name\": \"SQL Injection\"}\n}\nvalidation = batch_validate_cwes(validation, cwe_dict)\n\nprint(f\"Validated: {validation.validated_count}\")\nprint(f\"Passed: {len(validation.get_passed_cwes())}\")\nprint(f\"Failed: {len(validation.get_failed_cwes())}\")\n</code></pre>"},{"location":"#cwe-relationships","title":"CWE Relationships","text":"<pre><code>from ci.transparency.cwe.types.cwe import (\n    CweRelationshipResult, analyze_relationships\n)\n\nrelationships = CweRelationshipResult()\n\n# Analyze CWE relationships\ncwe_dict = {\n    \"CWE-79\": {\n        \"id\": \"CWE-79\",\n        \"relationships\": [{\"cwe_id\": \"CWE-80\", \"type\": \"ChildOf\"}]\n    },\n    \"CWE-80\": {\n        \"id\": \"CWE-80\",\n        \"relationships\": [{\"cwe_id\": \"CWE-79\", \"type\": \"ParentOf\"}]\n    }\n}\n\nrelationships = analyze_relationships(relationships, cwe_dict)\n\nprint(f\"Total relationships: {relationships.total_relationships}\")\nprint(f\"Circular dependencies: {relationships.circular_dependency_count}\")\nprint(f\"Orphaned CWEs: {relationships.orphaned_cwe_count}\")\n</code></pre>"},{"location":"#batch-processing","title":"Batch Processing","text":""},{"location":"#basic-batch-operations","title":"Basic Batch Operations","text":"<pre><code>from ci.transparency.cwe.types.batch import (\n    BatchResult, add_mapping, skip_file, track_invalid_file\n)\nfrom pathlib import Path\n\nbatch = BatchResult()\n\n# Process items\nbatch = add_mapping(batch, \"item1\", {\"data\": \"value1\"})\nbatch = add_mapping(batch, \"item2\", {\"data\": \"value2\"})\n\n# Handle skipped files\nbatch = skip_file(batch, Path(\"README.md\"), \"Not a data file\")\n\n# Track errors\nbatch = track_invalid_file(batch, Path(\"corrupt.yaml\"), \"Malformed YAML\")\n\nprint(f\"Items processed: {batch.total_items}\")\nprint(f\"Success rate: {batch.success_rate:.2%}\")\nprint(f\"Skipped files: {batch.skipped_file_count}\")\n</code></pre>"},{"location":"#standards-processing","title":"Standards Processing","text":""},{"location":"#loading-standards","title":"Loading Standards","text":"<pre><code>from ci.transparency.cwe.types.standards import (\n    StandardsLoadingResult, add_standard\n)\n\nstandards = StandardsLoadingResult()\n\n# Add standards\nnist_data = {\n    \"id\": \"NIST-SP-800-53\",\n    \"name\": \"Security Controls\",\n    \"framework\": \"NIST\",\n    \"version\": \"Rev 5\"\n}\nstandards = add_standard(standards, \"NIST-SP-800-53\", nist_data)\n\nprint(f\"Standards loaded: {standards.standards_count}\")\nprint(f\"Frameworks: {standards.framework_count}\")\nprint(f\"Has NIST: {standards.has_standard('NIST-SP-800-53')}\")\n</code></pre>"},{"location":"#standards-mapping","title":"Standards Mapping","text":"<pre><code>from ci.transparency.cwe.types.standards import (\n    StandardsMappingResult, analyze_mappings\n)\n\nmappings = StandardsMappingResult()\n\n# Analyze control mappings\nstandards_dict = {\n    \"NIST-SP-800-53\": {\n        \"id\": \"NIST-SP-800-53\",\n        \"controls\": [\n            {\n                \"id\": \"AC-1\",\n                \"mappings\": [\n                    {\"target_id\": \"CWE-79\", \"mapping_type\": \"cwe\"}\n                ]\n            }\n        ]\n    }\n}\n\nmappings = analyze_mappings(mappings, standards_dict)\n\nprint(f\"Total mappings: {mappings.total_mappings}\")\nprint(f\"Invalid mappings: {mappings.invalid_mapping_count}\")\n</code></pre>"},{"location":"#phase-based-validation","title":"Phase-Based Validation","text":""},{"location":"#single-phase-tracking","title":"Single Phase Tracking","text":"<pre><code>from ci.transparency.cwe.types.validation.phase import (\n    PhaseValidationResult, add_processed_item, set_phase_detail\n)\n\nphase = PhaseValidationResult(phase_name=\"cwe-loading\")\nphase = add_processed_item(phase, \"CWE-79\")\nphase = add_processed_item(phase, \"CWE-89\")\nphase = set_phase_detail(phase, \"processing_time\", 45.2)\n\nprint(f\"Phase: {phase.phase_name}\")\nprint(f\"Items processed: {phase.items_count}\")\nprint(f\"Processing time: {phase.get_detail('processing_time')}ms\")\n</code></pre>"},{"location":"#multi-phase-workflows","title":"Multi-Phase Workflows","text":"<pre><code>from ci.transparency.cwe.types.validation.phase import (\n    MultiPhaseValidationResult, add_phase, set_current_phase,\n    add_item_to_phase, annotate_phase\n)\n\n# Create workflow\nworkflow = MultiPhaseValidationResult()\n\n# Add phases\nloading_phase = PhaseValidationResult(phase_name=\"loading\")\nworkflow = add_phase(workflow, loading_phase, set_current=True)\n\n# Work with phases by name\nworkflow = add_item_to_phase(workflow, \"validation\", \"CWE-79\")\nworkflow = annotate_phase(workflow, \"validation\",\n                         rules_checked=[\"required_fields\", \"format\"])\n\nprint(f\"Phases: {workflow.phase_count}\")\nprint(f\"Current: {workflow.current_phase}\")\nprint(f\"Total items: {workflow.items_processed_total}\")\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<p>All result types include rich error context:</p> <pre><code>from ci.transparency.cwe.types.cwe import CweLoadingResult, track_invalid_file\nfrom pathlib import Path\n\nresult = CweLoadingResult()\nresult = track_invalid_file(result, Path(\"bad.yaml\"), \"Invalid YAML syntax\")\n\nif result.has_errors:\n    print(\"Errors occurred:\")\n    for error in result.errors:\n        print(f\"  - {error}\")\n\n    print(f\"Error count: {result.error_count}\")\n    print(f\"Failed operations: {result.failed}\")\n</code></pre>"},{"location":"#conversion-between-types","title":"Conversion Between Types","text":"<pre><code>from ci.transparency.cwe.types.batch import BatchResult\nfrom ci.transparency.cwe.types.cwe import CweLoadingResult\n\n# Convert batch result to CWE result\nbatch_data = {\n    \"CWE-79\": {\"id\": \"CWE-79\", \"name\": \"XSS\"},\n    \"CWE-89\": {\"id\": \"CWE-89\", \"name\": \"SQLi\"}\n}\nbatch = BatchResult(mappings=batch_data, loaded=2)\n\ncwe_result = CweLoadingResult.from_batch(batch)\nprint(f\"Converted CWEs: {cwe_result.cwe_count}\")\n</code></pre> <p>See the API Reference for complete documentation of all classes and functions.</p>"},{"location":"usage/","title":"Usage","text":"<p>Install the package in editable (development) mode with uv:</p> <pre><code>uv venv .venv\nuv pip install -e \".[dev,docs]\"\n</code></pre> <p>Run tools without activating the venv:</p> <pre><code>uv run pytest\nuv run ruff check .\n</code></pre> <p>Or activate manually if you want an interactive shell:</p> <pre><code>source .venv/bin/activate       # Linux / macOS / WSL\n.\\.venv\\Scripts\\activate        # Windows PowerShell\n</code></pre>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#importing-types","title":"Importing Types","text":"<pre><code>from ci.transparency.cwe.types.cwe_result_loading import CweLoadingResult\nfrom ci.transparency.cwe.types.base import BaseResult, add_error, merge_results\n\nresult = CweLoadingResult()\nprint(result.success_rate)\n</code></pre>"},{"location":"usage/#working-with-base-results","title":"Working with Base Results","text":"<p>The types follow an immutable design - helper functions return new instances:</p> <pre><code>from ci.transparency.cwe.types.base import BaseResult, add_error, add_warning\n\n# Start with a clean result\nresult = BaseResult.ok()\nprint(result.has_errors)  # False\n\n# Add an error (returns a new instance)\nresult_with_error = add_error(result, \"Validation failed\")\nprint(result_with_error.has_errors)  # True\nprint(result.has_errors)  # Still False (original unchanged)\n\n# Chain operations\nfinal_result = add_warning(result_with_error, \"Minor issue detected\")\nprint(final_result.total_issues)  # 2 (1 error + 1 warning)\n</code></pre>"},{"location":"usage/#loading-results","title":"Loading Results","text":"<p>Track success/failure rates for batch operations:</p> <pre><code>from ci.transparency.cwe.types.loading import (\n    BaseLoadingResult, increment_loaded, increment_failed\n)\n\n# Start with empty loading result\nloading_result = BaseLoadingResult()\n\n# Process items (each call returns new instance)\nloading_result = increment_loaded(loading_result)\nloading_result = increment_loaded(loading_result)\nloading_result = increment_failed(loading_result)\n\nprint(f\"Success rate: {loading_result.success_rate}\")  # 0.67 (2/3)\nprint(f\"Total attempted: {loading_result.total_attempted}\")  # 3\n</code></pre>"},{"location":"usage/#validation-results","title":"Validation Results","text":"<p>Track pass/fail validation outcomes:</p> <pre><code>from ci.transparency.cwe.types.validation import (\n    BaseValidationResult, increment_validation_passed, increment_validation_failed\n)\n\nvalidation_result = BaseValidationResult()\nvalidation_result = increment_validation_passed(validation_result)\nvalidation_result = increment_validation_failed(validation_result)\n\nprint(f\"Pass rate: {validation_result.pass_rate}\")  # 0.5\nprint(f\"Processed: {validation_result.total_processed}\")  # 2\n</code></pre>"},{"location":"usage/#merging-results","title":"Merging Results","text":"<p>Combine multiple results for aggregation:</p> <pre><code>from ci.transparency.cwe.types.base import merge_results\n\nresult1 = add_error(BaseResult.ok(), \"Error 1\")\nresult2 = add_warning(BaseResult.ok(), \"Warning 1\")\n\ncombined = merge_results(result1, result2)\nprint(combined.error_count)    # 1\nprint(combined.warning_count)  # 1\nprint(combined.total_issues)   # 2\n</code></pre>"},{"location":"usage/#design-principles","title":"Design Principles","text":"<ul> <li>Immutable: All operations return new instances; originals never change</li> <li>Type-preserving: Helper functions maintain your subclass types</li> <li>Memory-efficient: Uses <code>__slots__</code> for better performance</li> <li>Truthiness: Results evaluate to <code>False</code> when they have errors</li> </ul> <pre><code>if result:\n    print(\"No errors found\")\nelse:\n    print(f\"Found {result.error_count} errors\")\n</code></pre> <p>See the API Reference for the complete list of classes and helper functions.</p>"},{"location":"api/base/","title":"Base Types","text":"<p>Foundation types that all other result types build upon. These provide core functionality for tracking errors, warnings, loading operations, and validation results.</p>"},{"location":"api/base/#base-results","title":"Base Results","text":"<p>Base result types and helpers for transparency operations.</p> <p>This module contains all foundational result types and their functional helpers. Combines BaseResult, BaseLoadingResult, and BaseValidationResult with their combined set of immutable operations.</p> Core types <ul> <li>BaseResult: Abstract base for all operation results</li> <li>BaseLoadingResult: Base for loading operations (loaded/failed tracking)</li> <li>BaseValidationResult: Base for validation operations (passed/failed tracking)</li> </ul> <p>All helpers follow functional, immutable patterns with type preservation.</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult","title":"<code>BaseLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseResult</code></p> <p>Base result for all loading operations.</p> <p>Tracks counts of successfully loaded items versus failed attempts. Provides conversion methods for creating domain-specific result types from generic loading results.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.failure_rate","title":"<code>failure_rate</code>  <code>property</code>","text":"<p>Ratio of failed loads to total attempts.</p> <p>Returns:</p> Type Description <code>float</code> <p>Float in [0, 1]. With zero attempts, returns 0.0 (vacuous success).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.has_attempts","title":"<code>has_attempts</code>  <code>property</code>","text":"<p>True if any loading attempts were made.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Ratio of successful loads to total attempts.</p> <p>Returns:</p> Type Description <code>float</code> <p>Float in [0, 1]. With zero attempts, returns 1.0 (vacuous success).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.total_processed","title":"<code>total_processed</code>  <code>property</code>","text":"<p>Total number of items processed (loaded + failed).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.from_counts","title":"<code>from_counts(loaded=0, failed=0)</code>  <code>classmethod</code>","text":"<p>Create a result from explicit counts.</p> <p>Parameters:</p> Name Type Description Default <code>loaded</code> <code>int</code> <p>Number of successfully loaded items</p> <code>0</code> <code>failed</code> <code>int</code> <p>Number of failed loading attempts</p> <code>0</code> <p>Returns:</p> Type Description <code>Self</code> <p>New loading result with the specified counts</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If either count is negative</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.from_result","title":"<code>from_result(base, **extra_fields)</code>  <code>classmethod</code>","text":"<p>Convert any BaseLoadingResult to a specific subtype.</p> <p>This is the general conversion protocol that all domain-specific loading results can use to convert from generic batch results to their specialized types.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>BaseLoadingResult</code> <p>The base loading result to convert from</p> required <code>**extra_fields</code> <code>Any</code> <p>Additional fields specific to the target type</p> <code>{}</code> <p>Returns:</p> Type Description <code>T</code> <p>New instance of the target type with base fields copied</p> Example <p>batch_result = BatchResult() cwe_result = CweLoadingResult.from_result(     batch_result,     cwes=batch_result.mappings,     duplicate_ids=() )</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseLoadingResult.to_subtype","title":"<code>to_subtype(target_class, **extra_fields)</code>","text":"<p>Convert this result to a specific subtype.</p> <p>Parameters:</p> Name Type Description Default <code>target_class</code> <code>type[T]</code> <p>The target result type</p> required <code>**extra_fields</code> <code>Any</code> <p>Additional fields for the target type</p> <code>{}</code> <p>Returns:</p> Type Description <code>T</code> <p>New instance of target_class with this result's data</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult","title":"<code>BaseResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Immutable base result for operations.</p> <p>All operations return results that track errors, warnings, and informational messages. Results are immutable and provide boolean properties for easy condition checking.</p> Notes <ul> <li>total_issues = errors + warnings (infos excluded)</li> <li>Truthiness: bool(result) is True iff no errors</li> </ul>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.error_count","title":"<code>error_count</code>  <code>property</code>","text":"<p>Number of error messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.has_errors","title":"<code>has_errors</code>  <code>property</code>","text":"<p>True if any errors are present.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.has_infos","title":"<code>has_infos</code>  <code>property</code>","text":"<p>True if any informational messages are present.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.has_warnings","title":"<code>has_warnings</code>  <code>property</code>","text":"<p>True if any warnings are present.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.info_count","title":"<code>info_count</code>  <code>property</code>","text":"<p>Number of informational messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.success","title":"<code>success</code>  <code>property</code>","text":"<p>True if no errors occurred.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.success_rate","title":"<code>success_rate</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Ratio in [0, 1] indicating operation success.</p> <p>Defined by subclasses based on their specific success criteria. For example, loading operations might use loaded/(loaded+failed), while validation operations might use passed/(passed+failed).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.total_issues","title":"<code>total_issues</code>  <code>property</code>","text":"<p>Total number of issues (errors + warnings).</p> <p>Note: Informational messages are not considered issues.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.total_messages","title":"<code>total_messages</code>  <code>property</code>","text":"<p>Total number of all messages (errors + warnings + infos).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.warning_count","title":"<code>warning_count</code>  <code>property</code>","text":"<p>Number of warning messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.from_exception","title":"<code>from_exception(exc, context='')</code>  <code>classmethod</code>","text":"<p>Create a result from an exception.</p> <p>Parameters:</p> Name Type Description Default <code>exc</code> <code>Exception</code> <p>The exception to convert to a result</p> required <code>context</code> <code>str</code> <p>Optional context string (e.g., \"File processing\")</p> <code>''</code> <p>Returns:</p> Type Description <code>Self</code> <p>New result with the exception recorded as an error</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseResult.ok","title":"<code>ok()</code>  <code>classmethod</code>","text":"<p>Return a successful result with no messages.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult","title":"<code>BaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseResult</code></p> <p>Base result for all validation operations.</p> <p>Tracks counts of validation passes versus failures. Provides conversion methods for creating domain-specific validation result types from generic validation results.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.failure_rate","title":"<code>failure_rate</code>  <code>property</code>","text":"<p>Ratio of validation failures to total validations.</p> <p>Returns:</p> Type Description <code>float</code> <p>Float in [0, 1]. With zero validations, returns 0.0 (vacuous success).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.has_validations","title":"<code>has_validations</code>  <code>property</code>","text":"<p>True if any validation attempts were made.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.pass_rate","title":"<code>pass_rate</code>  <code>property</code>","text":"<p>Alias for success_rate - ratio of passed validations.</p> <p>Returns:</p> Type Description <code>float</code> <p>Float in [0, 1]. Identical to success_rate.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.success_rate","title":"<code>success_rate</code>  <code>property</code>","text":"<p>Ratio of validation passes to total validations.</p> <p>Returns:</p> Type Description <code>float</code> <p>Float in [0, 1]. With zero validations, returns 1.0 (vacuous success).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.total_processed","title":"<code>total_processed</code>  <code>property</code>","text":"<p>Total number of items validated (passed + failed).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.from_bools","title":"<code>from_bools(outcomes)</code>  <code>classmethod</code>","text":"<p>Create a result from a sequence of boolean validation outcomes.</p> <p>Parameters:</p> Name Type Description Default <code>outcomes</code> <code>Sequence[bool]</code> <p>Sequence of validation results (True=passed, False=failed)</p> required <p>Returns:</p> Type Description <code>Self</code> <p>New validation result with counts derived from the boolean outcomes</p> Example <p>results = [True, True, False, True] validation_result = BaseValidationResult.from_bools(results)</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.from_bools--validation_resultpassed-3-validation_resultfailed-1","title":"validation_result.passed == 3, validation_result.failed == 1","text":""},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.from_counts","title":"<code>from_counts(passed=0, failed=0)</code>  <code>classmethod</code>","text":"<p>Create a result from explicit counts.</p> <p>Parameters:</p> Name Type Description Default <code>passed</code> <code>int</code> <p>Number of validations that passed</p> <code>0</code> <code>failed</code> <code>int</code> <p>Number of validations that failed</p> <code>0</code> <p>Returns:</p> Type Description <code>Self</code> <p>New validation result with the specified counts</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If either count is negative</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.from_result","title":"<code>from_result(base, **extra_fields)</code>  <code>classmethod</code>","text":"<p>Convert any BaseValidationResult to a specific subtype.</p> <p>This is the general conversion protocol that all domain-specific validation results can use to convert from generic validation results to their specialized types.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>BaseValidationResult</code> <p>The base validation result to convert from</p> required <code>**extra_fields</code> <code>Any</code> <p>Additional fields specific to the target type</p> <code>{}</code> <p>Returns:</p> Type Description <code>V</code> <p>New instance of the target type with base fields copied</p> Example <p>generic_result = BaseValidationResult(passed=5, failed=2) cwe_result = CweValidationResult.from_result(     generic_result,     invalid_relationships=(),     schema_errors=() )</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.BaseValidationResult.to_subtype","title":"<code>to_subtype(target_class, **extra_fields)</code>","text":"<p>Convert this result to a specific subtype.</p> <p>Parameters:</p> Name Type Description Default <code>target_class</code> <code>type[V]</code> <p>The target result type</p> required <code>**extra_fields</code> <code>Any</code> <p>Additional fields for the target type</p> <code>{}</code> <p>Returns:</p> Type Description <code>V</code> <p>New instance of target_class with this result's data</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.add_counts","title":"<code>add_counts(result, loaded, failed)</code>","text":"<p>Add multiple counts to the result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <code>loaded</code> <code>int</code> <p>Number of successful loads to add</p> required <code>failed</code> <code>int</code> <p>Number of failed loads to add</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with counts increased by the specified amounts</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If either count is negative</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.add_error","title":"<code>add_error(result, error)</code>","text":"<p>Return a copy of result with error appended.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to add an error to</p> required <code>error</code> <code>str</code> <p>The error message to append</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with error appended to errors tuple</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.add_info","title":"<code>add_info(result, info)</code>","text":"<p>Return a copy of result with info appended.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to add an info message to</p> required <code>info</code> <code>str</code> <p>The informational message to append</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with info appended to infos tuple</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.add_validation_counts","title":"<code>add_validation_counts(result, passed, failed)</code>","text":"<p>Add multiple validation counts to the result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>passed</code> <code>int</code> <p>Number of validation passes to add</p> required <code>failed</code> <code>int</code> <p>Number of validation failures to add</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with counts increased by the specified amounts</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If either count is negative</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.add_warning","title":"<code>add_warning(result, warning)</code>","text":"<p>Return a copy of result with warning appended.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to add a warning to</p> required <code>warning</code> <code>str</code> <p>The warning message to append</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with warning appended to warnings tuple</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.extend_errors","title":"<code>extend_errors(result, *errors)</code>","text":"<p>Return a copy with all errors appended.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to extend</p> required <code>*errors</code> <code>str</code> <p>Variable number of error messages to append</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with all error messages appended</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.extend_infos","title":"<code>extend_infos(result, *infos)</code>","text":"<p>Return a copy with all infos appended.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to extend</p> required <code>*infos</code> <code>str</code> <p>Variable number of info messages to append</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with all info messages appended</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.extend_warnings","title":"<code>extend_warnings(result, *warnings)</code>","text":"<p>Return a copy with all warnings appended.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to extend</p> required <code>*warnings</code> <code>str</code> <p>Variable number of warning messages to append</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with all warning messages appended</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.merge_loading","title":"<code>merge_loading(a, b)</code>","text":"<p>Merge two loading results of the same type.</p> <p>Combines counts and messages from both results while preserving the concrete type of the first result.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>R</code> <p>The primary result (type is preserved)</p> required <code>b</code> <code>R</code> <p>The result to merge from</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result of type R with combined counts and messages</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.merge_many","title":"<code>merge_many(first, *rest)</code>","text":"<p>Merge multiple results into one.</p> <p>Parameters:</p> Name Type Description Default <code>first</code> <code>R</code> <p>The first result (determines return type)</p> required <code>*rest</code> <code>R</code> <p>Additional results to merge</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>Single result of first's type with all messages merged</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.merge_many_loading","title":"<code>merge_many_loading(first, *rest)</code>","text":"<p>Merge multiple loading results into one.</p> <p>Parameters:</p> Name Type Description Default <code>first</code> <code>R</code> <p>The first result (determines return type)</p> required <code>*rest</code> <code>R</code> <p>Additional results to merge</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>Single result of first's type with all counts and messages combined</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.merge_many_validation","title":"<code>merge_many_validation(first, *rest)</code>","text":"<p>Merge multiple validation results into one.</p> <p>Parameters:</p> Name Type Description Default <code>first</code> <code>R</code> <p>The first result (determines return type)</p> required <code>*rest</code> <code>R</code> <p>Additional results to merge</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>Single result of first's type with all counts and messages combined</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.merge_results","title":"<code>merge_results(r1, r2)</code>","text":"<p>Return r1 with all messages merged from r2.</p> <p>Parameters:</p> Name Type Description Default <code>r1</code> <code>R</code> <p>The primary result (type is preserved)</p> required <code>r2</code> <code>R</code> <p>The result to merge messages from</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result of r1's type with messages from both results</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.merge_validation","title":"<code>merge_validation(a, b)</code>","text":"<p>Merge two validation results of the same type.</p> <p>Combines counts and messages from both results while preserving the concrete type of the first result.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>R</code> <p>The primary result (type is preserved)</p> required <code>b</code> <code>R</code> <p>The result to merge from</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result of type R with combined counts and messages</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.process_validation_batch","title":"<code>process_validation_batch(result, outcomes)</code>","text":"<p>Process a batch of validation outcomes.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>outcomes</code> <code>Sequence[bool]</code> <p>Sequence of validation results (True=passed, False=failed)</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with counts updated based on the outcomes</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_exception","title":"<code>record_exception(result, exc, context='')</code>","text":"<p>Record an exception as an error and increment failed count.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <code>exc</code> <code>Exception</code> <p>The exception to record</p> required <code>context</code> <code>str</code> <p>Optional context string (e.g., file path)</p> <code>''</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with exception recorded as error and failed count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_fail","title":"<code>record_fail(result)</code>","text":"<p>Alias for record_validation_failed - records a validation failure.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with failed count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_failed","title":"<code>record_failed(result)</code>","text":"<p>Record a failed load by incrementing the failed count.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with failed count incremented by 1</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_failure","title":"<code>record_failure(result, reason='')</code>","text":"<p>Record a failure with optional reason.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <code>reason</code> <code>str</code> <p>Optional reason for failure (recorded as error if provided)</p> <code>''</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with failed count incremented and optional error message</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_loaded","title":"<code>record_loaded(result)</code>","text":"<p>Record a successful load by incrementing the loaded count.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with loaded count incremented by 1</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_pass","title":"<code>record_pass(result)</code>","text":"<p>Alias for record_passed - records a validation success.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with passed count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_passed","title":"<code>record_passed(result)</code>","text":"<p>Record a validation pass by incrementing the passed count.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with passed count incremented by 1</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_skip","title":"<code>record_skip(result, reason)</code>","text":"<p>Record a skip with warning and increment failed count.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <code>reason</code> <code>str</code> <p>Reason for skipping (recorded as warning)</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with warning added and failed count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_success","title":"<code>record_success(result)</code>","text":"<p>Alias for record_loaded - records a successful operation.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The loading result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with loaded count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_validation_error","title":"<code>record_validation_error(result, error_msg, increment_failed=True)</code>","text":"<p>Record a validation error with optional failure count increment.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>error_msg</code> <code>str</code> <p>The validation error message</p> required <code>increment_failed</code> <code>bool</code> <p>Whether to increment the failed count (default: True)</p> <code>True</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with error recorded and optionally failed count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_validation_failed","title":"<code>record_validation_failed(result)</code>","text":"<p>Record a validation failure by incrementing the failed count.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with failed count incremented by 1</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.record_validation_warning","title":"<code>record_validation_warning(result, warning_msg, increment_failed=False)</code>","text":"<p>Record a validation warning with optional failure count increment.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>warning_msg</code> <code>str</code> <p>The validation warning message</p> required <code>increment_failed</code> <code>bool</code> <p>Whether to increment the failed count (default: False)</p> <code>False</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with warning recorded and optionally failed count incremented</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.results.with_exception","title":"<code>with_exception(result, exc, context='')</code>","text":"<p>Return a copy with exception added as error.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The result to add exception to</p> required <code>exc</code> <code>Exception</code> <p>The exception to record</p> required <code>context</code> <code>str</code> <p>Optional context string for the error</p> <code>''</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with exception recorded as an error message</p>"},{"location":"api/base/#base-errors","title":"Base Errors","text":"<p>Base error types for transparency operations.</p> <p>Provides base exception classes with contextual information and consistent formatting patterns. Domain-specific error hierarchies extend these base types to provide rich error context and structured error handling.</p> Design principles <ul> <li>Contextual: errors capture relevant context (file paths, IDs, frameworks)</li> <li>Consistent: all errors follow the same str formatting pattern</li> <li>Slotted: minimal memory overhead with slots</li> <li>Hierarchical: base classes allow generic error handling</li> </ul> Core error hierarchy <ul> <li>BaseTransparencyError: Root exception for all transparency operations</li> <li>BaseLoadingError: Loading operations (adds file_path context)</li> <li>BaseValidationError: Validation operations (adds validation_context)</li> </ul> Common error types <ul> <li>FileNotFoundError: File could not be found during loading</li> <li>ParsingError: File could not be parsed (YAML, JSON, etc.)</li> <li>ValidationError: File content failed validation checks</li> <li>ConfigurationError: Configuration is invalid or incomplete</li> </ul> <p>All errors use consistent formatting: \"message | Context1: value | Context2: value\"</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.AbortedError","title":"<code>AbortedError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Operation was aborted before completion.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.AbortedError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add abort reason to context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseLoadingError","title":"<code>BaseLoadingError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for loading operations.</p> <p>Adds file path context that's common to all loading operations.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseLoadingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add file path to context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseProcessingError","title":"<code>BaseProcessingError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for processing operations.</p> <p>Adds processing context for operations that transform or analyze data.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseProcessingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add processing context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseTransparencyError","title":"<code>BaseTransparencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all transparency operations.</p> <p>Provides consistent error formatting and context tracking across all transparency-related exceptions.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseTransparencyError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Get contextual information parts for error formatting.</p> <p>Subclasses override this to add their own contextual information.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of context strings (e.g., [\"File: path.yaml\", \"ID: CWE-123\"])</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseValidationError","title":"<code>BaseValidationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Base exception for validation operations.</p> <p>Can be extended by domain-specific validation errors to add validation-specific context.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.BaseValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.ConfigurationError","title":"<code>ConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Configuration is invalid or incomplete.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.ConfigurationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add configuration context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.LoadingFileNotFoundError","title":"<code>LoadingFileNotFoundError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>File could not be found during loading operation.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.LoadingParsingError","title":"<code>LoadingParsingError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>File could not be parsed (YAML, JSON, etc.).</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.LoadingParsingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add parser type to context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.LoadingValidationError","title":"<code>LoadingValidationError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>File content failed validation checks.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.LoadingValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation rule to context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.NetworkError","title":"<code>NetworkError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Network operation failed.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.NetworkError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add network context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.SchemaError","title":"<code>SchemaError</code>","text":"<p>               Bases: <code>BaseValidationError</code></p> <p>Schema validation failed.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.SchemaError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add schema context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.TransparencyTimeoutError","title":"<code>TransparencyTimeoutError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Operation timed out.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.TransparencyTimeoutError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add timeout context if available.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.VersionError","title":"<code>VersionError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Version compatibility or format error.</p>"},{"location":"api/base/#ci.transparency.cwe.types.base.errors.VersionError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add version information to context if available.</p>"},{"location":"api/batch/","title":"Batch Processing","text":"<p>Types and operations for batch file processing workflows. Handles file-level tracking, skipping, and error management for bulk operations.</p>"},{"location":"api/batch/#batch-results","title":"Batch Results","text":"<p>Batch loading result types and operations.</p> <p>Immutable, slotted dataclass for tracking batch file loading with items, processed files, and file type statistics. Built on BaseLoadingResult for count tracking and error handling.</p> Core type <ul> <li>BatchResult: Tracks batch loading with items, file statistics, and processing details</li> </ul> Key operations <ul> <li>store_item: Add successfully loaded item to batch result</li> <li>skip_file: Skip a file with warning and tracking</li> <li>record_file_error: Record file processing error</li> <li>track_file_type: Track file extension statistics</li> </ul> Design principles <ul> <li>Immutable: uses dataclasses.replace for all modifications</li> <li>Generic: works with any file loading operation that produces key-value items</li> <li>Type-aware: tracks file types and processing statistics</li> <li>Conversion-ready: easily converts to domain-specific result types</li> </ul> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult","title":"<code>BatchResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Result from generic batch file loading operations.</p> <p>Tracks loaded items, processed files, and file type statistics. Serves as the foundation for domain-specific loading operations. Extends BaseLoadingResult to provide loaded/failed counts and conversion protocol.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.file_type_count","title":"<code>file_type_count</code>  <code>property</code>","text":"<p>Number of distinct file types encountered.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.has_items","title":"<code>has_items</code>  <code>property</code>","text":"<p>True if any items were successfully loaded.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.item_count","title":"<code>item_count</code>  <code>property</code>","text":"<p>Number of key-value items successfully loaded.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.items_stored","title":"<code>items_stored</code>  <code>property</code>","text":"<p>Return the number of items stored.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.processed_file_count","title":"<code>processed_file_count</code>  <code>property</code>","text":"<p>Number of files successfully processed.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Number of files that were skipped.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.total_files_processed","title":"<code>total_files_processed</code>  <code>property</code>","text":"<p>Total number of files encountered (processed + skipped).</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_file_type_distribution","title":"<code>get_file_type_distribution()</code>","text":"<p>Get percentage distribution of file types.</p> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>Dictionary mapping file type to percentage (0.0 to 100.0)</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_files_by_type","title":"<code>get_files_by_type(file_type)</code>","text":"<p>Get count of files processed for a specific type.</p> <p>Parameters:</p> Name Type Description Default <code>file_type</code> <code>str</code> <p>File extension (e.g., \"yaml\", \"json\")</p> required <p>Returns:</p> Type Description <code>int</code> <p>Number of files of that type processed</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_item_by_key","title":"<code>get_item_by_key(key)</code>","text":"<p>Get a specific item by its key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to look up</p> required <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>The item data, or None if key not found</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_item_for_file","title":"<code>get_item_for_file(file_path)</code>","text":"<p>Get the item that was loaded from a specific file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>Path to the source file</p> required <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>The item data, or None if file wasn't processed or no item found</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_item_keys","title":"<code>get_item_keys()</code>","text":"<p>Get all item keys.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of all keys in items dictionary</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_item_values","title":"<code>get_item_values()</code>","text":"<p>Get all item values.</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of all values in items dictionary</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_items","title":"<code>get_items()</code>","text":"<p>Get a copy of all items.</p> <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>Copy of the items dictionary</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.get_most_common_file_type","title":"<code>get_most_common_file_type()</code>","text":"<p>Get the most commonly processed file type.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Most common file extension, or None if no files processed</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.has_item_key","title":"<code>has_item_key(key)</code>","text":"<p>Check if a specific key exists in items.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key exists</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.was_file_processed","title":"<code>was_file_processed(file_path)</code>","text":"<p>Check if a specific file was successfully processed.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>Path to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was processed successfully</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.BatchResult.was_file_skipped","title":"<code>was_file_skipped(file_path)</code>","text":"<p>Check if a specific file was skipped.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>Path to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was skipped</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.analyze_batch_performance","title":"<code>analyze_batch_performance(result)</code>","text":"<p>Analyze batch processing performance metrics.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>The batch result to analyze</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with performance analysis</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.clear_items","title":"<code>clear_items(result)</code>","text":"<p>Remove all items from the batch result.</p> <p>Useful for creating a fresh result while preserving file statistics.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The batch result to clear</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with empty items dictionary</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.filter_items","title":"<code>filter_items(result, predicate)</code>","text":"<p>Filter items based on a predicate function.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The batch result to filter</p> required <code>predicate</code> <code>Callable[[str, dict[str, Any]], bool]</code> <p>Function that takes (key, data) and returns True to keep the item</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with filtered items</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.find_items_by_pattern","title":"<code>find_items_by_pattern(result, key_pattern)</code>","text":"<p>Find items whose keys match a pattern.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>BatchResult to search</p> required <code>key_pattern</code> <code>str</code> <p>Pattern to match (simple string contains)</p> required <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>Dictionary of matching items</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.get_all_item_keys","title":"<code>get_all_item_keys(result)</code>","text":"<p>Get all item keys as a list.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.get_batch_summary","title":"<code>get_batch_summary(result)</code>","text":"<p>Generate batch processing summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>The batch result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed batch statistics</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.get_item_count","title":"<code>get_item_count(result)</code>","text":"<p>Get the number of items stored.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.get_items_with_field","title":"<code>get_items_with_field(result, field_name)</code>","text":"<p>Get items that contain a specific field.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>BatchResult to search</p> required <code>field_name</code> <code>str</code> <p>Field name to look for</p> required <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>Dictionary of items that contain the field</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.has_any_items","title":"<code>has_any_items(result)</code>","text":"<p>Check if result has any items.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.initialize_batch_with_file_types","title":"<code>initialize_batch_with_file_types(file_paths)</code>","text":"<p>Initialize a batch result with file type counts from a file list.</p> <p>Parameters:</p> Name Type Description Default <code>file_paths</code> <code>list[Path]</code> <p>List of files that will be processed</p> required <p>Returns:</p> Type Description <code>BatchResult</code> <p>New BatchResult with file type statistics pre-populated</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.mark_processed","title":"<code>mark_processed(result, file_path)</code>","text":"<p>Mark a file as processed (successful or skipped).</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The batch result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the processed file</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with file added to processed list</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.merge_batch_results","title":"<code>merge_batch_results(primary, *others)</code>","text":"<p>Merge multiple batch results into one.</p> <p>Parameters:</p> Name Type Description Default <code>primary</code> <code>R</code> <p>The primary result (type is preserved)</p> required <code>*others</code> <code>R</code> <p>Additional batch results to merge</p> <code>()</code> <p>Returns:</p> Type Description <code>R</code> <p>New result of primary's type with all data merged</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.process_file_result","title":"<code>process_file_result(result, file_path, file_result, context)</code>","text":"<p>Process a file processing result (success or error).</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>The batch result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the file that was processed</p> required <code>file_result</code> <code>tuple[str, Any] | None</code> <p>Either a (key, value) tuple for success or None for error</p> required <code>context</code> <code>str</code> <p>Context string (error message if file_result is None)</p> required <p>Returns:</p> Type Description <code>BatchResult</code> <p>New result with file result processed</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.record_file_error","title":"<code>record_file_error(result, file_path, error)</code>","text":"<p>Record a file processing error.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>The batch result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the file that had an error</p> required <code>error</code> <code>Exception</code> <p>The exception that occurred</p> required <p>Returns:</p> Type Description <code>BatchResult</code> <p>New result with error recorded</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.skip_file","title":"<code>skip_file(result, file_path, reason)</code>","text":"<p>Record a skipped file with reason.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>The batch result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the skipped file</p> required <code>reason</code> <code>str</code> <p>Reason the file was skipped</p> required <p>Returns:</p> Type Description <code>BatchResult</code> <p>New result with skipped file recorded</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.store_item","title":"<code>store_item(result, key, value, *, file_path=None)</code>","text":"<p>Store an item in the batch result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>BatchResult</code> <p>The batch result to update</p> required <code>key</code> <code>str</code> <p>Key to store the item under</p> required <code>value</code> <code>Any</code> <p>Value to store</p> required <code>file_path</code> <code>Path | None</code> <p>Optional file path to track</p> <code>None</code> <p>Returns:</p> Type Description <code>BatchResult</code> <p>New result with item stored</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.track_file_type","title":"<code>track_file_type(result, file_type)</code>","text":"<p>Increment the count for a specific file type.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The batch result to update</p> required <code>file_type</code> <code>str</code> <p>File extension (e.g., \"yaml\", \"json\", \"txt\")</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with file type count incremented</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.results.update_file_type_stats","title":"<code>update_file_type_stats(result, file_type, count)</code>","text":"<p>Set the count for a specific file type (replaces existing count).</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The batch result to update</p> required <code>file_type</code> <code>str</code> <p>File extension to update</p> required <code>count</code> <code>int</code> <p>New count for this file type</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with file type count set to the specified value</p>"},{"location":"api/batch/#batch-errors","title":"Batch Errors","text":"<p>Batch processing error types with batch-specific context.</p> <p>Domain-specific error hierarchy for batch file processing operations. Extends base loading errors to provide batch-specific context like file counts, batch sizes, and processing statistics.</p> Design principles <ul> <li>Inherits consistent formatting from BaseLoadingError</li> <li>Adds batch-specific context (file counts, batch sizes, processing stats)</li> <li>Provides specific exception types for different batch failure scenarios</li> <li>Maintains minimal memory overhead with slots</li> </ul> Core batch errors <ul> <li>BatchError: Base batch processing error</li> <li>BatchAbortedError: Batch operation was aborted before completion</li> <li>BatchValidationError: Batch validation failed</li> <li>BatchResourceError: Batch ran out of system resources</li> </ul> Typical usage <p>from ci.transparency.cwe.types.batch import BatchAbortedError</p> <p>try:     process_large_batch(files) except BatchAbortedError as e:     # Rich context: \"Batch aborted | Files: 1000/5000 | Reason: memory limit\"     logger.error(f\"Batch processing failed: {e}\")</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchAbortedError","title":"<code>BatchAbortedError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch operation was aborted before completion.</p> <p>Used when a batch processing operation needs to be terminated early due to critical errors, resource constraints, or user intervention.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchAbortedError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add abort reason to context parts.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchConfigurationError","title":"<code>BatchConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Batch configuration is invalid or incomplete.</p> <p>Used when batch processing configuration parameters are invalid, missing, or incompatible.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchConfigurationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add configuration context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchDependencyError","title":"<code>BatchDependencyError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch dependency resolution failed.</p> <p>Used when batch processing fails due to missing dependencies between files or external systems.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchDependencyError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add dependency context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchError","title":"<code>BatchError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>Base exception for batch processing operations.</p> <p>Extends BaseLoadingError to add batch-specific context like file counts and processing statistics.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add batch processing context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchFileNotFoundError","title":"<code>BatchFileNotFoundError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Required batch file could not be found.</p> <p>Used when specific files required for batch processing are missing. Different from individual file not found errors because it affects the entire batch operation.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchFileNotFoundError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add missing files context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchIntegrityError","title":"<code>BatchIntegrityError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch data integrity compromised.</p> <p>Used when batch processing detects data corruption, inconsistencies, or integrity violations across the batch.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchIntegrityError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add integrity context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchParsingError","title":"<code>BatchParsingError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch file parsing failed.</p> <p>Used when parsing errors affect the batch operation as a whole, such as when too many individual files fail to parse.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchParsingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add parsing context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchResourceError","title":"<code>BatchResourceError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch operation ran out of system resources.</p> <p>Used when batch processing fails due to memory limits, disk space, file handle limits, or other system resource constraints.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchResourceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add resource context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchTimeoutError","title":"<code>BatchTimeoutError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch operation timed out.</p> <p>Used when batch processing takes longer than the configured timeout and needs to be terminated.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchTimeoutError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add timeout context to error message.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchValidationError","title":"<code>BatchValidationError</code>","text":"<p>               Bases: <code>BatchError</code></p> <p>Batch validation failed.</p> <p>Used when batch-level validation (as opposed to individual file validation) fails due to inconsistencies, missing dependencies, or constraint violations.</p>"},{"location":"api/batch/#ci.transparency.cwe.types.batch.errors.BatchValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation context to error message.</p>"},{"location":"api/cwe/","title":"CWE Domain","text":"<p>Types and operations for CWE (Common Weakness Enumeration) analysis, validation, and relationship tracking.</p>"},{"location":"api/cwe/#cwe-results","title":"CWE Results","text":"<p>CWE domain result types and operations.</p> <p>Immutable, slotted dataclasses for tracking CWE loading, validation, and relationship analysis operations. Built on base result types with CWE-specific functionality and conversion protocols.</p> Core types <ul> <li>CweLoadingResult: Tracks CWE definition loading with duplicate detection</li> <li>CweValidationResult: Tracks CWE validation with field and schema checks</li> <li>CweRelationshipResult: Tracks CWE relationship validation and analysis</li> </ul> Key operations <ul> <li>add_cwe: Add successfully loaded CWE definition</li> <li>validate_cwe: Validate CWE data with field checks</li> <li>analyze_relationships: Analyze CWE relationships for consistency</li> </ul> Design principles <ul> <li>Immutable: uses dataclasses.replace for all modifications</li> <li>CWE-specific: tailored for CWE definition requirements and patterns</li> <li>Conversion-friendly: integrates with batch processing via from_result</li> <li>Relationship-aware: CWE relationship tracking and validation</li> </ul> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweDataDict","title":"<code>CweDataDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for CWE data.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult","title":"<code>CweLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Result from CWE definition loading operations.</p> <p>Tracks loaded CWE definitions, duplicate detection, file processing, and provides conversion from batch operations. Extends BaseLoadingResult with CWE-specific tracking and analysis capabilities.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.cwe_count","title":"<code>cwe_count</code>  <code>property</code>","text":"<p>Number of CWEs successfully loaded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Number of duplicate CWE IDs found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>True if duplicate CWE IDs were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.invalid_file_count","title":"<code>invalid_file_count</code>  <code>property</code>","text":"<p>Number of invalid files encountered.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.loaded_cwe_ids","title":"<code>loaded_cwe_ids</code>  <code>property</code>","text":"<p>All loaded CWE IDs.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Number of files that were skipped.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.from_batch","title":"<code>from_batch(batch_result)</code>  <code>classmethod</code>","text":"<p>Create CweLoadingResult from BatchResult.</p> <p>Parameters:</p> Name Type Description Default <code>batch_result</code> <code>BatchResult</code> <p>Batch loading result to convert</p> required <p>Returns:</p> Type Description <code>CweLoadingResult</code> <p>CweLoadingResult with batch data mapped to CWE fields</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.get_cwe","title":"<code>get_cwe(cwe_id)</code>","text":"<p>Get CWE data by ID.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweLoadingResult.has_cwe","title":"<code>has_cwe(cwe_id)</code>","text":"<p>Check if a CWE ID was loaded.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipDict","title":"<code>CweRelationshipDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for CWE relationship data.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult","title":"<code>CweRelationshipResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from CWE relationship validation and analysis.</p> <p>Tracks CWE relationship consistency, circular dependency detection, and relationship graph analysis.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.circular_dependency_count","title":"<code>circular_dependency_count</code>  <code>property</code>","text":"<p>Number of circular dependencies detected.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.has_circular_dependencies","title":"<code>has_circular_dependencies</code>  <code>property</code>","text":"<p>True if circular dependencies were detected.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.has_orphaned_cwes","title":"<code>has_orphaned_cwes</code>  <code>property</code>","text":"<p>True if orphaned CWEs were found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.invalid_reference_count","title":"<code>invalid_reference_count</code>  <code>property</code>","text":"<p>Number of invalid relationship references.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.orphaned_cwe_count","title":"<code>orphaned_cwe_count</code>  <code>property</code>","text":"<p>Number of orphaned CWEs (no relationships).</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.total_relationships","title":"<code>total_relationships</code>  <code>property</code>","text":"<p>Total number of relationships tracked.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweRelationshipResult.get_relationships","title":"<code>get_relationships(cwe_id)</code>","text":"<p>Get all relationships for a specific CWE.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult","title":"<code>CweValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from CWE validation operations.</p> <p>Tracks CWE validation results including field validation, schema validation, and validation metadata. Provides detailed tracking of validation outcomes.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.field_error_count","title":"<code>field_error_count</code>  <code>property</code>","text":"<p>Number of field-level validation errors.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.has_field_errors","title":"<code>has_field_errors</code>  <code>property</code>","text":"<p>True if any field-level validation errors occurred.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.validated_count","title":"<code>validated_count</code>  <code>property</code>","text":"<p>Number of CWEs that were validated.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_failed_cwes","title":"<code>get_failed_cwes()</code>","text":"<p>Get list of CWE IDs that failed validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.CweValidationResult.get_passed_cwes","title":"<code>get_passed_cwes()</code>","text":"<p>Get list of CWE IDs that passed validation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_cwe","title":"<code>add_cwe(result, cwe_id, cwe_data, *, file_path=None)</code>","text":"<p>Add successfully loaded CWE to the result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweLoadingResult</code> <p>The CWE loading result to update</p> required <code>cwe_id</code> <code>str</code> <p>CWE identifier</p> required <code>cwe_data</code> <code>CweDataDict</code> <p>CWE definition data</p> required <code>file_path</code> <code>Path | None</code> <p>Optional source file path</p> <code>None</code> <p>Returns:</p> Type Description <code>CweLoadingResult</code> <p>New result with CWE added</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.add_relationship","title":"<code>add_relationship(result, from_cwe, to_cwe, relationship_type='related')</code>","text":"<p>Add a relationship between two CWEs.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweRelationshipResult</code> <p>The relationship result to update</p> required <code>from_cwe</code> <code>str</code> <p>Source CWE ID</p> required <code>to_cwe</code> <code>str</code> <p>Target CWE ID</p> required <code>relationship_type</code> <code>str</code> <p>Type of relationship</p> <code>'related'</code> <p>Returns:</p> Type Description <code>CweRelationshipResult</code> <p>New result with relationship added</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.analyze_relationships","title":"<code>analyze_relationships(result, cwe_dict)</code>","text":"<p>Analyze CWE relationships for consistency and detect issues.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweRelationshipResult</code> <p>The relationship result to update</p> required <code>cwe_dict</code> <code>dict[str, CweDataDict]</code> <p>Dictionary of CWE ID -&gt; CWE data</p> required <p>Returns:</p> Type Description <code>CweRelationshipResult</code> <p>New result with relationship analysis performed</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.batch_validate_cwes","title":"<code>batch_validate_cwes(result, cwe_dict)</code>","text":"<p>Validate multiple CWEs in batch.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweValidationResult</code> <p>The validation result to update</p> required <code>cwe_dict</code> <code>dict[str, CweDataDict]</code> <p>Dictionary of CWE ID -&gt; CWE data</p> required <p>Returns:</p> Type Description <code>CweValidationResult</code> <p>New result with all CWEs validated</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_cwe_loading_summary","title":"<code>get_cwe_loading_summary(result)</code>","text":"<p>Generate CWE loading summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweLoadingResult</code> <p>The CWE loading result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed CWE loading statistics</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_cwe_validation_summary","title":"<code>get_cwe_validation_summary(result)</code>","text":"<p>Generate CWE validation summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweValidationResult</code> <p>The CWE validation result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed validation statistics</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_cwes_by_category","title":"<code>get_cwes_by_category(result, category)</code>","text":"<p>Get CWEs filtered by category.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweLoadingResult</code> <p>The CWE loading result containing CWE data</p> required <code>category</code> <code>str</code> <p>Category to filter by</p> required <p>Returns:</p> Type Description <code>dict[str, CweDataDict]</code> <p>Dictionary of CWE ID -&gt; CWE data for matching category</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_relationship_depth","title":"<code>get_relationship_depth(result, cwe_id)</code>","text":"<p>Get maximum relationship depth for a CWE.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweRelationshipResult</code> <p>The relationship result containing relationship data</p> required <code>cwe_id</code> <code>str</code> <p>CWE ID to analyze</p> required <p>Returns:</p> Type Description <code>int</code> <p>Maximum depth in the relationship graph</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.get_relationship_summary","title":"<code>get_relationship_summary(result)</code>","text":"<p>Generate CWE relationship summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweRelationshipResult</code> <p>The CWE relationship result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed relationship analysis</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.track_duplicate_cwe","title":"<code>track_duplicate_cwe(result, cwe_id, file_path)</code>","text":"<p>Track a duplicate CWE ID.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweLoadingResult</code> <p>The CWE loading result to update</p> required <code>cwe_id</code> <code>str</code> <p>Duplicate CWE ID</p> required <code>file_path</code> <code>Path</code> <p>File where duplicate was found</p> required <p>Returns:</p> Type Description <code>CweLoadingResult</code> <p>New result with duplicate tracked</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.track_invalid_file","title":"<code>track_invalid_file(result, file_path, reason)</code>","text":"<p>Track an invalid CWE file.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweLoadingResult</code> <p>The CWE loading result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the invalid file</p> required <code>reason</code> <code>str</code> <p>Reason the file is invalid</p> required <p>Returns:</p> Type Description <code>CweLoadingResult</code> <p>New result with invalid file tracked</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.track_skipped_cwe_file","title":"<code>track_skipped_cwe_file(result, file_path, reason)</code>","text":"<p>Track a skipped CWE file.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweLoadingResult</code> <p>The CWE loading result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the skipped file</p> required <code>reason</code> <code>str</code> <p>Reason the file was skipped</p> required <p>Returns:</p> Type Description <code>CweLoadingResult</code> <p>New result with skipped file tracked</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.validate_cwe","title":"<code>validate_cwe(result, cwe_id, cwe_data)</code>","text":"<p>Validate a CWE definition with basic field validation.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweValidationResult</code> <p>The validation result to update</p> required <code>cwe_id</code> <code>str</code> <p>CWE ID being validated</p> required <code>cwe_data</code> <code>CweDataDict</code> <p>CWE data to validate</p> required <p>Returns:</p> Type Description <code>CweValidationResult</code> <p>New result with validation performed</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.results.validate_cwe_field","title":"<code>validate_cwe_field(result, cwe_id, field_path, field_value, validation_rule)</code>","text":"<p>Validate a specific CWE field.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweValidationResult</code> <p>The validation result to update</p> required <code>cwe_id</code> <code>str</code> <p>CWE ID being validated</p> required <code>field_path</code> <code>str</code> <p>Path to the field being validated</p> required <code>field_value</code> <code>Any</code> <p>Value of the field</p> required <code>validation_rule</code> <code>str</code> <p>Description of the validation rule</p> required <p>Returns:</p> Type Description <code>CweValidationResult</code> <p>New result with field validation recorded</p>"},{"location":"api/cwe/#cwe-errors","title":"CWE Errors","text":"<p>CWE domain error types with rich context.</p> <p>Domain-specific error hierarchy for CWE operations. Extends base error types to provide CWE-specific context like CWE IDs, relationship information, and validation details.</p> Design principles <ul> <li>Inherits consistent formatting from base error types</li> <li>Adds CWE-specific context (CWE IDs, relationships, categories)</li> <li>Provides specific exception types for different CWE failure scenarios</li> <li>Maintains minimal memory overhead with slots</li> </ul> Core CWE errors <ul> <li>CweError: Base CWE error with CWE ID context</li> <li>CweLoadingError: CWE definition loading failures</li> <li>CweValidationError: CWE validation failures</li> <li>CweRelationshipError: CWE relationship validation failures</li> </ul> Typical usage <p>from ci.transparency.cwe.types.cwe import CweValidationError</p> <p>try:     validate_cwe_definition(cwe_data) except CweValidationError as e:     # Rich context: \"Validation failed | CWE: CWE-79 | Field: relationships[0] | File: cwe-79.yaml\"     logger.error(f\"CWE validation failed: {e}\")</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweCircularRelationshipError","title":"<code>CweCircularRelationshipError</code>","text":"<p>               Bases: <code>CweRelationshipError</code></p> <p>Circular CWE relationship detected.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweCircularRelationshipError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add relationship chain to context.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweConfigurationError","title":"<code>CweConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>CWE configuration error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweConfigurationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add configuration context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweConstraintViolationError","title":"<code>CweConstraintViolationError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE constraint validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweConstraintViolationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add constraint details to context.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweDuplicateError","title":"<code>CweDuplicateError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>Duplicate CWE ID detected during loading.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweDuplicateError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add duplicate file context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweError","title":"<code>CweError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>Base exception for CWE operations.</p> <p>Extends BaseLoadingError to add CWE-specific context like CWE identifiers and categories.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add CWE context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweFieldValidationError","title":"<code>CweFieldValidationError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE field-level validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweFieldValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add field validation details to context.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweFileNotFoundError","title":"<code>CweFileNotFoundError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>CWE definition file could not be found.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweIntegrityError","title":"<code>CweIntegrityError</code>","text":"<p>               Bases: <code>CweError</code></p> <p>CWE data integrity violation.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweIntegrityError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add integrity check details to context.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweInvalidFormatError","title":"<code>CweInvalidFormatError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>CWE definition format is invalid or unsupported.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweInvalidFormatError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add format context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweInvalidReferenceError","title":"<code>CweInvalidReferenceError</code>","text":"<p>               Bases: <code>CweRelationshipError</code></p> <p>CWE relationship references unknown CWE ID.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweInvalidReferenceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add reference source to context.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweLoadingError","title":"<code>CweLoadingError</code>","text":"<p>               Bases: <code>CweError</code></p> <p>Base CWE loading error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweMissingFieldError","title":"<code>CweMissingFieldError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>Required CWE field is missing from definition.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweMissingFieldError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add missing field context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweOrphanedError","title":"<code>CweOrphanedError</code>","text":"<p>               Bases: <code>CweRelationshipError</code></p> <p>CWE has no valid relationships.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweOrphanedError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add category to context for orphaned CWEs.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweParsingError","title":"<code>CweParsingError</code>","text":"<p>               Bases: <code>CweLoadingError</code></p> <p>CWE definition file could not be parsed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweParsingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add parsing context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweProcessingError","title":"<code>CweProcessingError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>CWE processing operation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweProcessingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add processing context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweRelationshipError","title":"<code>CweRelationshipError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE relationship validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweRelationshipError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add relationship context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweSchemaValidationError","title":"<code>CweSchemaValidationError</code>","text":"<p>               Bases: <code>CweValidationError</code></p> <p>CWE schema validation failed.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweSchemaValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add schema validation context to error message.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweValidationError","title":"<code>CweValidationError</code>","text":"<p>               Bases: <code>CweError</code></p> <p>Base CWE validation error.</p>"},{"location":"api/cwe/#ci.transparency.cwe.types.cwe.errors.CweValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation type to context.</p>"},{"location":"api/cwe_schema/","title":"CWE Schema","text":"<p>Types and operations for CWE schema management, validation, and version control. Handles schema loading, constraint validation, and freeze operations for version locking.</p>"},{"location":"api/cwe_schema/#schema-results","title":"Schema Results","text":"<p>CWE schema result types and operations.</p> <p>Immutable, slotted dataclasses for tracking CWE schema loading, validation, and freeze detection operations. Built on base result types for consistent count tracking and error handling.</p> Core types <ul> <li>CweSchemaLoadingResult: Tracks CWE schema loading with version info</li> <li>CweSchemaValidationResult: Tracks CWE data validation against schemas</li> <li>CweSchemaFreezeResult: Tracks schema freeze violations and compatibility</li> </ul> Key operations <ul> <li>load_cwe_schema: Load CWE schema with version detection</li> <li>validate_cwe_data: Validate CWE data against loaded schemas</li> <li>detect_schema_freeze: Detect breaking changes in schema updates</li> </ul> Design principles <ul> <li>Immutable: uses dataclasses.replace for all modifications</li> <li>CWE-specific: tailored for CWE schema requirements and patterns</li> <li>Version-aware: tracks schema versions and compatibility</li> <li>Validation-focused: CWE data validation tracking</li> </ul> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult","title":"<code>CweSchemaFreezeResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from CWE schema freeze detection.</p> <p>Tracks schema freeze violations, breaking changes, and compatibility analysis between schema versions.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.breaking_change_count","title":"<code>breaking_change_count</code>  <code>property</code>","text":"<p>Number of breaking changes detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.compatible_change_count","title":"<code>compatible_change_count</code>  <code>property</code>","text":"<p>Number of compatible changes detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.has_breaking_changes","title":"<code>has_breaking_changes</code>  <code>property</code>","text":"<p>True if any breaking changes were detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.has_violations","title":"<code>has_violations</code>  <code>property</code>","text":"<p>True if any schema freeze violations were detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.is_compatible","title":"<code>is_compatible</code>  <code>property</code>","text":"<p>True if schema changes are backward compatible.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.violation_count","title":"<code>violation_count</code>  <code>property</code>","text":"<p>Number of schema freeze violations detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.get_compatibility_summary","title":"<code>get_compatibility_summary()</code>","text":"<p>Get summary of schema compatibility analysis.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with compatibility analysis results</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaFreezeResult.get_overall_assessment","title":"<code>get_overall_assessment()</code>","text":"<p>Get overall assessment of schema changes.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult","title":"<code>CweSchemaLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Result from CWE schema loading operations.</p> <p>Tracks loaded CWE schemas, version information, and schema-specific metadata. Extends BaseLoadingResult to provide loaded/failed counts and conversion protocol.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.has_schemas","title":"<code>has_schemas</code>  <code>property</code>","text":"<p>True if any schemas were successfully loaded.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.has_unsupported_versions","title":"<code>has_unsupported_versions</code>  <code>property</code>","text":"<p>True if any unsupported schema versions were encountered.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.schema_count","title":"<code>schema_count</code>  <code>property</code>","text":"<p>Number of schemas successfully loaded.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.version_count","title":"<code>version_count</code>  <code>property</code>","text":"<p>Number of distinct schema versions loaded.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.get_latest_version","title":"<code>get_latest_version()</code>","text":"<p>Get the latest schema version loaded.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Latest schema version string, or None if no schemas loaded</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.get_schemas_by_version","title":"<code>get_schemas_by_version(version)</code>","text":"<p>Get schema names for a specific version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>Schema version to filter by</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List of schema names using the specified version</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaLoadingResult.has_schema","title":"<code>has_schema(schema_name)</code>","text":"<p>Check if a specific schema was loaded.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>Name of the schema to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the schema was successfully loaded</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult","title":"<code>CweSchemaValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from CWE data validation against schemas.</p> <p>Tracks CWE validation results, field-level errors, and validation statistics. Extends BaseValidationResult for passed/failed counts.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.field_error_count","title":"<code>field_error_count</code>  <code>property</code>","text":"<p>Number of field-level validation errors.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.has_field_errors","title":"<code>has_field_errors</code>  <code>property</code>","text":"<p>True if any field-level validation errors occurred.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.validated_count","title":"<code>validated_count</code>  <code>property</code>","text":"<p>Number of CWEs that were validated.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.get_failed_cwes","title":"<code>get_failed_cwes()</code>","text":"<p>Get list of CWE IDs that failed validation.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of CWE IDs that failed schema validation</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.get_passed_cwes","title":"<code>get_passed_cwes()</code>","text":"<p>Get list of CWE IDs that passed validation.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of CWE IDs that passed schema validation</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.CweSchemaValidationResult.get_validation_rate_by_schema","title":"<code>get_validation_rate_by_schema()</code>","text":"<p>Get validation success rate for this schema.</p> <p>Returns:</p> Type Description <code>float</code> <p>Float in [0, 1] representing validation success rate</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.add_schema_version","title":"<code>add_schema_version(result, schema_name, version)</code>","text":"<p>Add or update schema version information.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The schema loading result to update</p> required <code>schema_name</code> <code>str</code> <p>Name of the schema</p> required <code>version</code> <code>str</code> <p>Version string to associate with the schema</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with version information updated</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.analyze_schema_changes","title":"<code>analyze_schema_changes(result, old_schema, new_schema)</code>","text":"<p>Perform analysis of schema changes.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The freeze result to update</p> required <code>old_schema</code> <code>dict[str, Any]</code> <p>Previous schema version</p> required <code>new_schema</code> <code>dict[str, Any]</code> <p>New schema version</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with change analysis</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.batch_validate_cwes","title":"<code>batch_validate_cwes(result, cwe_data_dict, schema, schema_name='')</code>","text":"<p>Validate multiple CWEs against a schema in batch.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>cwe_data_dict</code> <code>dict[str, dict[str, Any]]</code> <p>Dictionary of CWE ID -&gt; CWE data</p> required <code>schema</code> <code>dict[str, Any]</code> <p>JSON schema to validate against</p> required <code>schema_name</code> <code>str</code> <p>Optional name of the schema being used</p> <code>''</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with all validation outcomes recorded</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.check_schema_compatibility","title":"<code>check_schema_compatibility(result, schema1, schema2)</code>","text":"<p>Check compatibility between two schemas.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The freeze result to update</p> required <code>schema1</code> <code>dict[str, Any]</code> <p>First schema to compare</p> required <code>schema2</code> <code>dict[str, Any]</code> <p>Second schema to compare</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with compatibility analysis performed</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.detect_schema_freeze","title":"<code>detect_schema_freeze(result, old_schema, new_schema, old_version='', new_version='')</code>","text":"<p>Detect schema freeze violations between two schema versions.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The freeze result to update</p> required <code>old_schema</code> <code>dict[str, Any]</code> <p>Previous schema version</p> required <code>new_schema</code> <code>dict[str, Any]</code> <p>New schema version</p> required <code>old_version</code> <code>str</code> <p>Optional version string for old schema</p> <code>''</code> <code>new_version</code> <code>str</code> <p>Optional version string for new schema</p> <code>''</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with freeze analysis performed</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.get_freeze_analysis","title":"<code>get_freeze_analysis(result)</code>","text":"<p>Generate freeze analysis summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweSchemaFreezeResult</code> <p>The freeze result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed freeze analysis</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.get_schema_loading_summary","title":"<code>get_schema_loading_summary(result)</code>","text":"<p>Generate schema loading summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweSchemaLoadingResult</code> <p>The schema loading result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed schema loading statistics</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.get_validation_summary","title":"<code>get_validation_summary(result)</code>","text":"<p>Generate validation summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CweSchemaValidationResult</code> <p>The validation result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed validation statistics</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.load_cwe_schema","title":"<code>load_cwe_schema(result, schema_name, schema_data, *, file_path, version=None)</code>","text":"<p>Load a CWE schema with version detection.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The schema loading result to update</p> required <code>schema_name</code> <code>str</code> <p>Name/identifier for the schema</p> required <code>schema_data</code> <code>dict[str, Any]</code> <p>The parsed schema data</p> required <code>file_path</code> <code>Path</code> <p>Path to the schema file</p> required <code>version</code> <code>str | None</code> <p>Optional explicit version (detected if not provided)</p> <code>None</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with schema loaded and metadata updated</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.track_schema_usage","title":"<code>track_schema_usage(result, schema_name)</code>","text":"<p>Track usage of a loaded schema.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The schema loading result to update</p> required <code>schema_name</code> <code>str</code> <p>Name of the schema being used</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with usage information updated (could track usage counts in future)</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.track_unsupported_version","title":"<code>track_unsupported_version(result, version, reason)</code>","text":"<p>Track an unsupported schema version.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The schema loading result to update</p> required <code>version</code> <code>str</code> <p>The unsupported version</p> required <code>reason</code> <code>str</code> <p>Reason why the version is unsupported</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with unsupported version tracked and warning added</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.validate_cwe_data","title":"<code>validate_cwe_data(result, cwe_id, cwe_data, schema, schema_name='')</code>","text":"<p>Validate CWE data against a schema.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>cwe_id</code> <code>str</code> <p>ID of the CWE being validated</p> required <code>cwe_data</code> <code>dict[str, Any]</code> <p>CWE data to validate</p> required <code>schema</code> <code>dict[str, Any]</code> <p>JSON schema to validate against</p> required <code>schema_name</code> <code>str</code> <p>Optional name of the schema being used</p> <code>''</code> <p>Returns:</p> Type Description <code>R</code> <p>New result with validation outcome recorded</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.results.validate_cwe_field","title":"<code>validate_cwe_field(result, field_path, field_value, field_schema)</code>","text":"<p>Validate a specific CWE field against its schema.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>R</code> <p>The validation result to update</p> required <code>field_path</code> <code>str</code> <p>Path to the field (e.g., \"relationships[0].id\")</p> required <code>field_value</code> <code>Any</code> <p>Value of the field</p> required <code>field_schema</code> <code>dict[str, Any]</code> <p>Schema for the specific field</p> required <p>Returns:</p> Type Description <code>R</code> <p>New result with field validation outcome recorded</p>"},{"location":"api/cwe_schema/#schema-errors","title":"Schema Errors","text":"<p>CWE schema error types with rich schema context.</p> <p>Domain-specific error hierarchy for CWE schema operations. Extends base error types to provide CWE schema-specific context like schema names, versions, validation paths, and freeze violation details.</p> Design principles <ul> <li>Inherits consistent formatting from base error types</li> <li>Adds CWE schema-specific context (schema names, versions, field paths)</li> <li>Provides specific exception types for different schema failure scenarios</li> <li>Maintains minimal memory overhead with slots</li> </ul> Core CWE schema errors <ul> <li>CweSchemaError: Base CWE schema error with schema context</li> <li>CweSchemaLoadingError: CWE schema loading/parsing failures</li> <li>CweSchemaValidationError: CWE data validation against schema failures</li> <li>CweSchemaFreezeError: CWE schema freeze/compatibility violations</li> </ul> Typical usage <p>from ci.transparency.cwe.types.cwe.schema import CweSchemaValidationError</p> <p>try:     validate_cwe_against_schema(cwe_data, schema) except CweSchemaValidationError as e:     # Rich context: \"Validation failed | Schema: cwe-v2.0 | Field: relationships[0].id | CWE: CWE-A001\"     logger.error(f\"CWE schema error: {e}\")</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweBreakingChangeError","title":"<code>CweBreakingChangeError</code>","text":"<p>               Bases: <code>CweSchemaFreezeError</code></p> <p>CWE schema breaking change detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweBreakingChangeError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add breaking change details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweDataValidationError","title":"<code>CweDataValidationError</code>","text":"<p>               Bases: <code>CweSchemaValidationError</code></p> <p>CWE data validation against schema failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweDataValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweFieldValidationError","title":"<code>CweFieldValidationError</code>","text":"<p>               Bases: <code>CweSchemaValidationError</code></p> <p>CWE field-level validation against schema failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweFieldValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add field validation details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweFreezeViolationError","title":"<code>CweFreezeViolationError</code>","text":"<p>               Bases: <code>CweSchemaFreezeError</code></p> <p>CWE schema freeze rule violation detected.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweFreezeViolationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add violation details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaCircularReferenceError","title":"<code>CweSchemaCircularReferenceError</code>","text":"<p>               Bases: <code>CweSchemaValidationError</code></p> <p>CWE schema contains circular references.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaCircularReferenceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add circular reference details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaCompatibilityError","title":"<code>CweSchemaCompatibilityError</code>","text":"<p>               Bases: <code>CweSchemaFreezeError</code></p> <p>CWE schema compatibility check failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaCompatibilityError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add compatibility details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaConstraintError","title":"<code>CweSchemaConstraintError</code>","text":"<p>               Bases: <code>CweSchemaValidationError</code></p> <p>CWE schema constraint validation failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaConstraintError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add constraint details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaError","title":"<code>CweSchemaError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>Base exception for CWE schema operations.</p> <p>Extends BaseLoadingError to add CWE schema-specific context like schema names, versions, and CWE identifiers.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add CWE schema context to error message.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaFormatError","title":"<code>CweSchemaFormatError</code>","text":"<p>               Bases: <code>CweSchemaLoadingError</code></p> <p>CWE schema format is invalid or malformed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaFormatError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add format issue details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaFreezeError","title":"<code>CweSchemaFreezeError</code>","text":"<p>               Bases: <code>BaseValidationError</code></p> <p>Base CWE schema freeze violation error.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaFreezeError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add freeze violation details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaLoadingError","title":"<code>CweSchemaLoadingError</code>","text":"<p>               Bases: <code>CweSchemaError</code></p> <p>CWE schema loading operation failed.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaNotFoundError","title":"<code>CweSchemaNotFoundError</code>","text":"<p>               Bases: <code>CweSchemaLoadingError</code></p> <p>CWE schema file could not be found.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaParsingError","title":"<code>CweSchemaParsingError</code>","text":"<p>               Bases: <code>CweSchemaLoadingError</code></p> <p>CWE schema file could not be parsed as valid JSON.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaParsingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add parsing error details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaReferenceError","title":"<code>CweSchemaReferenceError</code>","text":"<p>               Bases: <code>CweSchemaValidationError</code></p> <p>CWE schema reference could not be resolved.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaReferenceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add reference details to context.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaValidationError","title":"<code>CweSchemaValidationError</code>","text":"<p>               Bases: <code>CweSchemaError</code></p> <p>Base CWE schema validation error.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaVersionError","title":"<code>CweSchemaVersionError</code>","text":"<p>               Bases: <code>CweSchemaLoadingError</code></p> <p>CWE schema version is not supported or invalid.</p>"},{"location":"api/cwe_schema/#ci.transparency.cwe.types.cwe.schema.errors.CweSchemaVersionError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add supported versions to context.</p>"},{"location":"api/standards/","title":"Standards Domain","text":"<p>Types and operations for security standards processing, validation, and mapping to CWE. Supports multiple frameworks like NIST, ISO, COBIT, and custom standards.</p>"},{"location":"api/standards/#standards-results","title":"Standards Results","text":"<p>Standards domain result types and operations.</p> <p>Immutable, slotted dataclasses for tracking standards loading, validation, and mapping analysis operations. Built on base result types with standards-specific functionality and conversion protocols.</p> Core types <ul> <li>StandardsLoadingResult: Tracks standards definition loading with framework detection</li> <li>StandardsValidationResult: Tracks standards validation with field and constraint checks</li> <li>StandardsMappingResult: Tracks standards mapping validation and analysis</li> </ul> Key operations <ul> <li>add_standard: Add successfully loaded standards definition</li> <li>validate_standard: Validate standards data with field checks</li> <li>analyze_mappings: Analyze standards mappings for consistency</li> </ul> Design principles <ul> <li>Immutable: uses dataclasses.replace for all modifications</li> <li>Standards-specific: tailored for standards definition requirements and patterns</li> <li>Conversion-friendly: integrates with batch processing via from_result</li> <li>Mapping-aware: standards mapping tracking and validation</li> </ul> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsControlDict","title":"<code>StandardsControlDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for standards control data.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsDataDict","title":"<code>StandardsDataDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for standards data.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult","title":"<code>StandardsLoadingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLoadingResult</code></p> <p>Result from standards definition loading operations.</p> <p>Tracks loaded standards definitions, framework detection, file processing, and provides conversion from batch operations. Extends BaseLoadingResult with standards-specific tracking and analysis capabilities.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.duplicate_count","title":"<code>duplicate_count</code>  <code>property</code>","text":"<p>Number of duplicate standards found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.framework_count","title":"<code>framework_count</code>  <code>property</code>","text":"<p>Number of different frameworks detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.has_duplicates","title":"<code>has_duplicates</code>  <code>property</code>","text":"<p>True if duplicate standards were found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.invalid_file_count","title":"<code>invalid_file_count</code>  <code>property</code>","text":"<p>Number of invalid files encountered.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.loaded_standard_ids","title":"<code>loaded_standard_ids</code>  <code>property</code>","text":"<p>All loaded standards IDs.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.skipped_file_count","title":"<code>skipped_file_count</code>  <code>property</code>","text":"<p>Number of files that were skipped.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.standards_count","title":"<code>standards_count</code>  <code>property</code>","text":"<p>Number of standards successfully loaded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.from_batch","title":"<code>from_batch(batch_result)</code>  <code>classmethod</code>","text":"<p>Create StandardsLoadingResult from BatchResult.</p> <p>Parameters:</p> Name Type Description Default <code>batch_result</code> <code>BatchResult</code> <p>Batch loading result to convert</p> required <p>Returns:</p> Type Description <code>StandardsLoadingResult</code> <p>StandardsLoadingResult with batch data mapped to standards fields</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_frameworks","title":"<code>get_frameworks()</code>","text":"<p>Get list of all detected frameworks.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.get_standard","title":"<code>get_standard(standard_id)</code>","text":"<p>Get standards data by ID.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsLoadingResult.has_standard","title":"<code>has_standard(standard_id)</code>","text":"<p>Check if a standards ID was loaded.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingDict","title":"<code>StandardsMappingDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Typed structure for standards mapping data.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult","title":"<code>StandardsMappingResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from standards mapping validation and analysis.</p> <p>Tracks standards mapping consistency, invalid references detection, and mapping statistics analysis.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.duplicate_mapping_count","title":"<code>duplicate_mapping_count</code>  <code>property</code>","text":"<p>Number of duplicate mappings detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.has_invalid_mappings","title":"<code>has_invalid_mappings</code>  <code>property</code>","text":"<p>True if invalid mappings were detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.has_orphaned_controls","title":"<code>has_orphaned_controls</code>  <code>property</code>","text":"<p>True if orphaned controls were found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.invalid_mapping_count","title":"<code>invalid_mapping_count</code>  <code>property</code>","text":"<p>Number of invalid mappings detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.orphaned_control_count","title":"<code>orphaned_control_count</code>  <code>property</code>","text":"<p>Number of orphaned controls (no mappings).</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.total_mappings","title":"<code>total_mappings</code>  <code>property</code>","text":"<p>Total number of mappings tracked.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsMappingResult.get_mappings","title":"<code>get_mappings(standard_id)</code>","text":"<p>Get all mappings for a specific standard.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult","title":"<code>StandardsValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from standards validation operations.</p> <p>Tracks standards validation results including field validation, constraint checks, and validation metadata. Provides detailed tracking of validation outcomes.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.constraint_violation_count","title":"<code>constraint_violation_count</code>  <code>property</code>","text":"<p>Number of constraint violations detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.field_error_count","title":"<code>field_error_count</code>  <code>property</code>","text":"<p>Number of field-level validation errors.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.has_constraint_violations","title":"<code>has_constraint_violations</code>  <code>property</code>","text":"<p>True if any constraint violations occurred.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.has_field_errors","title":"<code>has_field_errors</code>  <code>property</code>","text":"<p>True if any field-level validation errors occurred.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.validated_count","title":"<code>validated_count</code>  <code>property</code>","text":"<p>Number of standards that were validated.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.get_failed_standards","title":"<code>get_failed_standards()</code>","text":"<p>Get list of standards IDs that failed validation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.StandardsValidationResult.get_passed_standards","title":"<code>get_passed_standards()</code>","text":"<p>Get list of standards IDs that passed validation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_mapping","title":"<code>add_mapping(result, standard_id, target_id, mapping_type='mapped')</code>","text":"<p>Add a mapping between a standard and target.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsMappingResult</code> <p>The mapping result to update</p> required <code>standard_id</code> <code>str</code> <p>Source standards ID</p> required <code>target_id</code> <code>str</code> <p>Target ID (e.g., CWE ID)</p> required <code>mapping_type</code> <code>str</code> <p>Type of mapping</p> <code>'mapped'</code> <p>Returns:</p> Type Description <code>StandardsMappingResult</code> <p>New result with mapping added</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.add_standard","title":"<code>add_standard(result, standard_id, standards_data, *, file_path=None)</code>","text":"<p>Add successfully loaded standards to the result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result to update</p> required <code>standard_id</code> <code>str</code> <p>Standards identifier</p> required <code>standards_data</code> <code>StandardsDataDict</code> <p>Standards definition data</p> required <code>file_path</code> <code>Path | None</code> <p>Optional source file path</p> <code>None</code> <p>Returns:</p> Type Description <code>StandardsLoadingResult</code> <p>New result with standards added</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.analyze_mappings","title":"<code>analyze_mappings(result, standards_dict, valid_targets=None)</code>","text":"<p>Analyze standards mappings for consistency and detect issues.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsMappingResult</code> <p>The mapping result to update</p> required <code>standards_dict</code> <code>dict[str, StandardsDataDict]</code> <p>Dictionary of standards ID -&gt; standards data</p> required <code>valid_targets</code> <code>set[str] | None</code> <p>Optional set of valid target IDs for validation</p> <code>None</code> <p>Returns:</p> Type Description <code>StandardsMappingResult</code> <p>New result with mapping analysis performed</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.batch_validate_standards","title":"<code>batch_validate_standards(result, standards_dict)</code>","text":"<p>Validate multiple standards in batch.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsValidationResult</code> <p>The validation result to update</p> required <code>standards_dict</code> <code>dict[str, StandardsDataDict]</code> <p>Dictionary of standards ID -&gt; standards data</p> required <p>Returns:</p> Type Description <code>StandardsValidationResult</code> <p>New result with all standards validated</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_control_count","title":"<code>get_control_count(result)</code>","text":"<p>Get total number of controls across all standards.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result containing standards data</p> required <p>Returns:</p> Type Description <code>int</code> <p>Total count of controls</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_mapping_coverage","title":"<code>get_mapping_coverage(result)</code>","text":"<p>Calculate mapping coverage rate.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsMappingResult</code> <p>The mapping result containing mapping analysis</p> required <p>Returns:</p> Type Description <code>float</code> <p>Coverage rate as float in [0, 1]</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_mapping_summary","title":"<code>get_mapping_summary(result)</code>","text":"<p>Generate standards mapping summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsMappingResult</code> <p>The standards mapping result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed mapping analysis</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_standards_by_framework","title":"<code>get_standards_by_framework(result, framework)</code>","text":"<p>Get standards filtered by framework.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result containing standards data</p> required <code>framework</code> <code>str</code> <p>Framework to filter by</p> required <p>Returns:</p> Type Description <code>dict[str, StandardsDataDict]</code> <p>Dictionary of standards ID -&gt; standards data for matching framework</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_standards_loading_summary","title":"<code>get_standards_loading_summary(result)</code>","text":"<p>Generate standards loading summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed standards loading statistics</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.get_standards_validation_summary","title":"<code>get_standards_validation_summary(result)</code>","text":"<p>Generate standards validation summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsValidationResult</code> <p>The standards validation result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed validation statistics</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.track_duplicate_standard","title":"<code>track_duplicate_standard(result, standard_id, reason)</code>","text":"<p>Track a duplicate standards ID.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result to update</p> required <code>standard_id</code> <code>str</code> <p>Duplicate standards ID</p> required <code>reason</code> <code>str</code> <p>Reason for the duplicate</p> required <p>Returns:</p> Type Description <code>StandardsLoadingResult</code> <p>New result with duplicate tracked</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.track_invalid_standards_file","title":"<code>track_invalid_standards_file(result, file_path, reason)</code>","text":"<p>Track an invalid standards file.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the invalid file</p> required <code>reason</code> <code>str</code> <p>Reason the file is invalid</p> required <p>Returns:</p> Type Description <code>StandardsLoadingResult</code> <p>New result with invalid file tracked</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.track_skipped_standards_file","title":"<code>track_skipped_standards_file(result, file_path, reason)</code>","text":"<p>Track a skipped standards file.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsLoadingResult</code> <p>The standards loading result to update</p> required <code>file_path</code> <code>Path</code> <p>Path to the skipped file</p> required <code>reason</code> <code>str</code> <p>Reason the file was skipped</p> required <p>Returns:</p> Type Description <code>StandardsLoadingResult</code> <p>New result with skipped file tracked</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.validate_standard","title":"<code>validate_standard(result, standard_id, standards_data)</code>","text":"<p>Validate a standards definition with basic field validation.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsValidationResult</code> <p>The validation result to update</p> required <code>standard_id</code> <code>str</code> <p>Standards ID being validated</p> required <code>standards_data</code> <code>StandardsDataDict</code> <p>Standards data to validate</p> required <p>Returns:</p> Type Description <code>StandardsValidationResult</code> <p>New result with validation performed</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.results.validate_standards_field","title":"<code>validate_standards_field(result, standard_id, field_path, field_value, validation_rule)</code>","text":"<p>Validate a specific standards field.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>StandardsValidationResult</code> <p>The validation result to update</p> required <code>standard_id</code> <code>str</code> <p>Standards ID being validated</p> required <code>field_path</code> <code>str</code> <p>Path to the field being validated</p> required <code>field_value</code> <code>Any</code> <p>Value of the field</p> required <code>validation_rule</code> <code>str</code> <p>Description of the validation rule</p> required <p>Returns:</p> Type Description <code>StandardsValidationResult</code> <p>New result with field validation recorded</p>"},{"location":"api/standards/#standards-errors","title":"Standards Errors","text":"<p>Standards domain error types with rich context.</p> <p>Domain-specific error hierarchy for standards operations. Extends base error types to provide standards-specific context like standard IDs, mapping information, and validation details.</p> Design principles <ul> <li>Inherits consistent formatting from base error types</li> <li>Adds standards-specific context (standard IDs, mappings, formats)</li> <li>Provides specific exception types for different standards failure scenarios</li> <li>Maintains minimal memory overhead with slots</li> </ul> Core standards errors <ul> <li>StandardsError: Base standards error with standard ID context</li> <li>StandardsLoadingError: Standards definition loading failures</li> <li>StandardsValidationError: Standards validation failures</li> <li>StandardsMappingError: Standards mapping validation failures</li> </ul> Typical usage <p>from ci.transparency.cwe.types.standards import StandardsValidationError</p> <p>try:     validate_standards_definition(standards_data) except StandardsValidationError as e:     # Rich context: \"Validation failed | Standard: NIST-SP-800-53 | Field: controls[0] | File: nist.yaml\"     logger.error(f\"Standards validation failed: {e}\")</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsConfigurationError","title":"<code>StandardsConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Standards configuration error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsConfigurationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add configuration context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsConstraintViolationError","title":"<code>StandardsConstraintViolationError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards constraint validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsConstraintViolationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add constraint details to context.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsDuplicateMappingError","title":"<code>StandardsDuplicateMappingError</code>","text":"<p>               Bases: <code>StandardsMappingError</code></p> <p>Duplicate standards mapping detected.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsDuplicateMappingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add duplicate mapping context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsError","title":"<code>StandardsError</code>","text":"<p>               Bases: <code>BaseLoadingError</code></p> <p>Base exception for standards operations.</p> <p>Extends BaseLoadingError to add standards-specific context like standard identifiers and framework information.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add standards context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFieldValidationError","title":"<code>StandardsFieldValidationError</code>","text":"<p>               Bases: <code>StandardsValidationError</code></p> <p>Standards field-level validation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFieldValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add field validation details to context.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFileNotFoundError","title":"<code>StandardsFileNotFoundError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards definition file could not be found.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFormatError","title":"<code>StandardsFormatError</code>","text":"<p>               Bases: <code>StandardsError</code></p> <p>Standards formatting/serialization problem.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsFormatError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add format context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsIntegrityError","title":"<code>StandardsIntegrityError</code>","text":"<p>               Bases: <code>StandardsError</code></p> <p>Standards data integrity violation.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsIntegrityError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add integrity check details to context.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsInvalidFormatError","title":"<code>StandardsInvalidFormatError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards definition format is invalid or unsupported.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsInvalidFormatError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add format context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsInvalidMappingError","title":"<code>StandardsInvalidMappingError</code>","text":"<p>               Bases: <code>StandardsMappingError</code></p> <p>Standards mapping references unknown target ID.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsInvalidMappingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add reference source to context.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsLoadingError","title":"<code>StandardsLoadingError</code>","text":"<p>               Bases: <code>StandardsError</code></p> <p>Base standards loading error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsMappingError","title":"<code>StandardsMappingError</code>","text":"<p>               Bases: <code>StandardsError</code></p> <p>Base standards mapping validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsMappingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add mapping context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsMissingFieldError","title":"<code>StandardsMissingFieldError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Required standards field is missing from definition.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsMissingFieldError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add missing field context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsParsingError","title":"<code>StandardsParsingError</code>","text":"<p>               Bases: <code>StandardsLoadingError</code></p> <p>Standards definition file could not be parsed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsParsingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add parsing context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsProcessingError","title":"<code>StandardsProcessingError</code>","text":"<p>               Bases: <code>StandardsError</code></p> <p>Standards processing operation failed.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsProcessingError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add processing context to error message.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsValidationError","title":"<code>StandardsValidationError</code>","text":"<p>               Bases: <code>StandardsError</code></p> <p>Base standards validation error.</p>"},{"location":"api/standards/#ci.transparency.cwe.types.standards.errors.StandardsValidationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation type to context.</p>"},{"location":"api/validation/","title":"Validation Framework","text":"<p>Phase-based validation orchestration for complex multi-step workflows. Provides single-phase tracking and multi-phase coordination with detailed context and error handling.</p>"},{"location":"api/validation/#phase-results","title":"Phase Results","text":"<p>Phase validation result types and operations.</p> <p>Immutable, slotted dataclasses for tracking single-phase and multi-phase validation operations. Built on base validation result types with phase-specific functionality and aggregation capabilities.</p> Core types <ul> <li>PhaseValidationResult: Single validation phase tracking</li> <li>MultiPhaseValidationResult: Multi-phase aggregation with phase ordering</li> </ul> Key operations <ul> <li>set_phase_info: Configure phase identification</li> <li>add_processed_item: Track processed items in a phase</li> <li>add_phase: Add a phase to multi-phase result</li> <li>update_phase: Update an existing phase in multi-phase result</li> </ul> Design principles <ul> <li>Immutable: uses dataclasses.replace for all modifications</li> <li>Phase-aware: first-class phase identity and ordering</li> <li>Aggregation-friendly: multi-phase results aggregate child phase data</li> <li>Conversion-compatible: follows base result conversion patterns</li> </ul> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult","title":"<code>MultiPhaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from multi-phase validation operations.</p> <p>Aggregates multiple validation phases and maintains phase ordering and current phase tracking. Top-level counts reflect aggregated totals from all child phases.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult.has_current_phase","title":"<code>has_current_phase</code>  <code>property</code>","text":"<p>True if a current phase is set.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult.items_processed_total","title":"<code>items_processed_total</code>  <code>property</code>","text":"<p>Total items processed across all phases.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult.ordered_phases","title":"<code>ordered_phases</code>  <code>property</code>","text":"<p>Get phases in their defined order.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult.phase_count","title":"<code>phase_count</code>  <code>property</code>","text":"<p>Number of phases tracked.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult.get_phase","title":"<code>get_phase(phase_name)</code>","text":"<p>Get a specific phase by name.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.MultiPhaseValidationResult.has_phase","title":"<code>has_phase(phase_name)</code>","text":"<p>Check if a phase exists.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.PhaseValidationResult","title":"<code>PhaseValidationResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseValidationResult</code></p> <p>Result from a single validation phase.</p> <p>Tracks validation results for a single phase with phase-specific metadata and processing details.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.PhaseValidationResult.has_phase_details","title":"<code>has_phase_details</code>  <code>property</code>","text":"<p>True if phase has additional detail information.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.PhaseValidationResult.items_count","title":"<code>items_count</code>  <code>property</code>","text":"<p>Number of items processed in this phase.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.PhaseValidationResult.get_detail","title":"<code>get_detail(key, default=None)</code>","text":"<p>Get a specific phase detail value.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.add_item_to_phase","title":"<code>add_item_to_phase(result, phase_name, item_id)</code>","text":"<p>Add an item to a named phase's processed list.</p> <p>Creates the phase if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the phase</p> required <code>item_id</code> <code>str</code> <p>ID of the item to add</p> required <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with item added to phase</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.add_phase","title":"<code>add_phase(result, phase, *, set_current=False)</code>","text":"<p>Add a new phase and re-aggregate totals.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase</code> <code>PhaseValidationResult</code> <p>Phase to add</p> required <code>set_current</code> <code>bool</code> <p>Whether to set this as the current phase</p> <code>False</code> <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with phase added and totals re-aggregated</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.add_processed_item","title":"<code>add_processed_item(result, item_id)</code>","text":"<p>Add an item that was processed in this phase.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>PhaseValidationResult</code> <p>The phase result to update</p> required <code>item_id</code> <code>str</code> <p>ID of the item that was processed</p> required <p>Returns:</p> Type Description <code>PhaseValidationResult</code> <p>New result with processed item added</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.annotate_phase","title":"<code>annotate_phase(result, phase_name, **details)</code>","text":"<p>Add details to a named phase.</p> <p>Creates the phase if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the phase</p> required <code>**details</code> <code>Any</code> <p>Details to add to the phase</p> <code>{}</code> <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with phase annotated</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.get_failed_phases","title":"<code>get_failed_phases(result)</code>","text":"<p>Get all phases that have failures.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.get_multiphase_summary","title":"<code>get_multiphase_summary(result)</code>","text":"<p>Generate multi-phase validation summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed multi-phase statistics</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.get_phase_by_name","title":"<code>get_phase_by_name(result, phase_name)</code>","text":"<p>Get a phase by name with None if not found.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.get_phase_completion_rate","title":"<code>get_phase_completion_rate(result)</code>","text":"<p>Calculate overall phase completion rate.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.get_phase_summary","title":"<code>get_phase_summary(result)</code>","text":"<p>Generate single-phase validation summary.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>PhaseValidationResult</code> <p>The phase result to summarize</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with detailed phase statistics</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.get_phases_by_type","title":"<code>get_phases_by_type(result, validation_type)</code>","text":"<p>Get all phases of a specific validation type.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.merge_phases","title":"<code>merge_phases(primary, *others)</code>","text":"<p>Merge multiple multi-phase results.</p> <p>Parameters:</p> Name Type Description Default <code>primary</code> <code>MultiPhaseValidationResult</code> <p>The primary result (type is preserved)</p> required <code>*others</code> <code>MultiPhaseValidationResult</code> <p>Additional results to merge</p> <code>()</code> <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with all phases merged and totals re-aggregated</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.phase_add_error","title":"<code>phase_add_error(result, phase_name, message)</code>","text":"<p>Add an error message to a named phase.</p> <p>Creates the phase if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the phase</p> required <code>message</code> <code>str</code> <p>Error message to add</p> required <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with error added to phase</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.phase_add_info","title":"<code>phase_add_info(result, phase_name, message)</code>","text":"<p>Add an info message to a named phase.</p> <p>Creates the phase if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the phase</p> required <code>message</code> <code>str</code> <p>Info message to add</p> required <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with info added to phase</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.phase_add_warning","title":"<code>phase_add_warning(result, phase_name, message)</code>","text":"<p>Add a warning message to a named phase.</p> <p>Creates the phase if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the phase</p> required <code>message</code> <code>str</code> <p>Warning message to add</p> required <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with warning added to phase</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.set_current_phase","title":"<code>set_current_phase(result, phase_name)</code>","text":"<p>Set the current active phase.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str | None</code> <p>Name of the phase to set as current, or None to clear</p> required <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with current phase updated</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.set_phase_detail","title":"<code>set_phase_detail(result, key, value)</code>","text":"<p>Set a specific phase detail.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>PhaseValidationResult</code> <p>The phase result to update</p> required <code>key</code> <code>str</code> <p>Detail key to set</p> required <code>value</code> <code>Any</code> <p>Detail value to set</p> required <p>Returns:</p> Type Description <code>PhaseValidationResult</code> <p>New result with detail set</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.set_phase_info","title":"<code>set_phase_info(result, phase_name, validation_type='')</code>","text":"<p>Set phase identification information.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>PhaseValidationResult</code> <p>The phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the validation phase</p> required <code>validation_type</code> <code>str</code> <p>Optional type of validation performed</p> <code>''</code> <p>Returns:</p> Type Description <code>PhaseValidationResult</code> <p>New result with phase info updated</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.update_phase","title":"<code>update_phase(result, phase_name, updater)</code>","text":"<p>Update an existing phase and re-aggregate totals.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>MultiPhaseValidationResult</code> <p>The multi-phase result to update</p> required <code>phase_name</code> <code>str</code> <p>Name of the phase to update</p> required <code>updater</code> <code>Callable[[PhaseValidationResult], PhaseValidationResult]</code> <p>Function that takes and returns an updated phase</p> required <p>Returns:</p> Type Description <code>MultiPhaseValidationResult</code> <p>New result with phase updated and totals re-aggregated</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.results.update_phase_details","title":"<code>update_phase_details(result, details)</code>","text":"<p>Update phase-specific details with shallow merge.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>PhaseValidationResult</code> <p>The phase result to update</p> required <code>details</code> <code>dict[str, Any]</code> <p>Details to merge into phase details</p> required <p>Returns:</p> Type Description <code>PhaseValidationResult</code> <p>New result with details updated</p>"},{"location":"api/validation/#phase-errors","title":"Phase Errors","text":"<p>Phase validation error types with rich context.</p> <p>Domain-specific error hierarchy for phase validation operations. Extends base error types to provide phase-specific context like phase names, validation stages, and processing statistics.</p> Design principles <ul> <li>Inherits consistent formatting from base error types</li> <li>Adds phase-specific context (phase names, stages, processing counts)</li> <li>Provides specific exception types for different phase failure scenarios</li> <li>Maintains minimal memory overhead with slots</li> </ul> Core phase errors <ul> <li>PhaseError: Base phase error with phase name context</li> <li>PhaseAbortedError: Phase operation was aborted</li> <li>PhaseTimeoutError: Phase operation timed out</li> <li>PhaseResourceError: Phase ran out of resources</li> </ul> Typical usage <p>from ci.transparency.cwe.types.validation.phase import PhaseAbortedError</p> <p>try:     run_validation_phase(phase_config) except PhaseAbortedError as e:     # Rich context: \"Phase aborted | Phase: field-validation | Stage: processing | Items: 150/500\"     logger.error(f\"Phase validation failed: {e}\")</p> <p>options: showsource: false show_signature: true group_by_category: true filters: - \"!^\"</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseAbortedError","title":"<code>PhaseAbortedError</code>","text":"<p>               Bases: <code>PhaseError</code></p> <p>Phase operation was aborted before completion.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseAbortedError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add abort context to error message.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseConfigurationError","title":"<code>PhaseConfigurationError</code>","text":"<p>               Bases: <code>BaseTransparencyError</code></p> <p>Phase configuration is invalid or incomplete.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseConfigurationError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add configuration context to error message.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseError","title":"<code>PhaseError</code>","text":"<p>               Bases: <code>BaseValidationError</code></p> <p>Base exception for phase validation operations.</p> <p>Extends BaseValidationError to add phase-specific context like phase names and processing stages.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add phase context to error message.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseIntegrityError","title":"<code>PhaseIntegrityError</code>","text":"<p>               Bases: <code>PhaseError</code></p> <p>Phase data integrity violation.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseIntegrityError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add integrity check details to context.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseResourceError","title":"<code>PhaseResourceError</code>","text":"<p>               Bases: <code>PhaseError</code></p> <p>Phase operation ran out of system resources.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseResourceError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add resource context to error message.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseTimeoutError","title":"<code>PhaseTimeoutError</code>","text":"<p>               Bases: <code>PhaseError</code></p> <p>Phase operation timed out.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseTimeoutError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add timeout context to error message.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseValidationRuleError","title":"<code>PhaseValidationRuleError</code>","text":"<p>               Bases: <code>PhaseError</code></p> <p>Phase validation rule failed.</p>"},{"location":"api/validation/#ci.transparency.cwe.types.validation.phase.errors.PhaseValidationRuleError.get_context_parts","title":"<code>get_context_parts()</code>","text":"<p>Add validation rule details to context.</p>"}]}